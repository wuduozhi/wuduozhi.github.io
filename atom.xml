<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>只为不凡而来</title>
  <subtitle>小智的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-28T14:23:50.139Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wuduozhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java|过滤器基础</title>
    <link href="http://yoursite.com/2018/03/01/Java-%E8%BF%87%E6%BB%A4%E5%99%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/03/01/Java-过滤器基础/</id>
    <published>2018-02-28T21:54:21.000Z</published>
    <updated>2018-02-28T14:23:50.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-it"><a href="#What-is-it" class="headerlink" title="What is it?"></a>What is it?</h3><p>过滤器是Servlet的高级特性之一，也别把它想得那么高深，只不过是实现Filter接口的Java类罢了！</p>
<p>首先，我们来看看过滤器究竟Web容器的哪处:</p>
<p><img src="/images/Java-过滤-01.png" alt="Java 过滤器" title="Java-过滤器-01"></p>
<p>上面的图我们可以发现，当浏览器发送请求给服务器的时候，先执行过滤器，然后才访问Web的资源。服务器响应Response，从Web资源抵达浏览器之前，也会途径过滤器。。<br>我们很容易发现，过滤器可以比喻成一张滤网。我们想想现实中的滤网可以做什么：在泡茶的时候，过滤掉茶叶。那滤网是怎么过滤茶叶的呢？规定大小的网孔，只要网孔比茶叶小，就可以实现过滤了！<br>引申在Web容器中，过滤器可以做：过滤一些敏感的字符串【规定不能出现敏感字符串】、避免中文乱码【规定Web资源都使用UTF-8编码】、权限验证【规定只有带Session或Cookie的浏览器，才能访问web资源】等等等，过滤器的作用非常大，只要发挥想象就可以有意想不到的效果<br>也就是说：当需要限制用户访问某些资源时、在处理请求时提前处理某些资源、服务器响应的内容对其进行处理再返回、我们就是用过滤器来完成的！</p>
<h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h3><p>直接举例子来说明吧：</p>
<h4 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h4><p><strong>方法一</strong>：如果我没有用到过滤器：浏览器通过http请求发送数据给Servlet，如果存在中文，就必须指定编码，否则就会乱码！</p>
<p>jsp页面提交中文数据给Servlet处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/Demo1&quot; method=&quot;post&quot;&gt;</div><div class="line"></div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</div><div class="line"></div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</div><div class="line"></div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>Servlet没有指定编码的情况下，获取得到的是乱码：</p>
<p><img src="/images/Java-过滤-02.png" alt="中文乱码" title="Java-过滤器-02"></p>
<p>也就是说：如果我每次接受客户端带过来的中文数据，在Serlvet中都要设定编码。这样代码的重复率太高了！！！！</p>
<p><strong>方法二</strong>：用过滤器解决中文乱码问题。有过滤器的情况就不一样了：只要我在过滤器中指定了编码，可以使全站的Web资源都是使用该编码，并且重用性是非常理想的！还有一个好处是：如果需要换另一种编码，只需要改变一处。</p>
<h3 id="How"><a href="#How" class="headerlink" title="How"></a>How</h3><p>要使用过滤器，只要Java类实现了Filter接口就可以称为过滤器！Filter接口的方法也十分简单：</p>
<p><img src="/images/Java-过滤-03.png" alt="实现接口" title="Java-过滤器-03"></p>
<p>其中init()和destory()方法就不用多说了，他俩跟Servlet是一样的。只有在Web服务器加载和销毁的时候被执行，只会被执行一次！</p>
<p>值得注意的是doFilter()方法,它有三个参数(ServletRequest,ServletResponse,FilterChain),从前两个参数我们可以发现：过滤器可以完成任何协议的过滤操作！</p>
<p>那FilterChain是什么东西呢？我们看看：</p>
<p><img src="/images/Java-过滤-04.png" alt="enter description here" title="Java-过滤器-04"></p>
<p>FilterChain是一个接口，里面又定义了doFilter()方法。这究竟是怎么回事啊？？？？？？</p>
<p>我们可以这样理解：过滤器不单单只有一个，那么我们怎么管理这些过滤器呢？在Java中就使用了链式结构。把所有的过滤器都放在FilterChain里边，如果符合条件，就执行下一个过滤器（如果没有过滤器了，就执行目标资源）。</p>
<p>上面的话好像有点拗口，我们可以想象生活的例子：现在我想在茶杯上能过滤出石头和茶叶出来。石头在一层，茶叶在一层。所以茶杯的过滤装置应该有两层滤网。这个过滤装置就是FilterChain，过滤石头的滤网和过滤茶叶的滤网就是Filter。在石头滤网中，茶叶是属于下一层的，就把茶叶放行，让茶叶的滤网过滤茶叶。过滤完茶叶了，剩下的就是茶（茶就可以比喻成我们的目标资源）</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>写一个简单的过滤器。</p>
<ol>
<li><p>实现Filter接口的Java类就被称作为过滤器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class FilterDemo1 implements Filter &#123;</div><div class="line">	    public void destroy() &#123;</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException &#123;</div><div class="line">	</div><div class="line">	        //执行这一句，说明放行（让下一个过滤器执行，如果没有过滤器了，就执行执行目标资源）</div><div class="line">	        chain.doFilter(req, resp);</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    public void init(FilterConfig config) throws ServletException &#123;</div><div class="line">	        </div><div class="line">	    &#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>filter部署(过滤器和Servlet是一样的，需要部署到Web服务器上的。)</p>
<ul>
<li><p>第一种方式：在web.xml文件中配置</p>
<ul>
<li><p>filter<br><filter>用于注册过滤器</filter></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">      &lt;filter-name&gt;FilterDemo1&lt;/filter-name&gt;</div><div class="line">     &lt;filter-class&gt;FilterDemo1&lt;/filter-class&gt;</div><div class="line">     &lt;init-param&gt;</div><div class="line">	 &lt;param-name&gt;word_file&lt;/param-name&gt;	</div><div class="line">	 &lt;param-value&gt;/WEB-INF/word.txt&lt;/param-value&gt;</div><div class="line">     &lt;/init-param&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line"></div><div class="line">&lt;filter-name&gt;用于为过滤器指定一个名字，该元素的内容不能为空。</div><div class="line">&lt;filter-class&gt;元素用于指定过滤器的完整的限定类名。</div><div class="line">&lt;init-param&gt;元素用于为过滤器指定初始化参数，它的子元素指定参数的名字，&lt;param-value&gt;指定参数的值。在过滤器中，可以使用FilterConfig接口对象来访问初始化参数。</div></pre></td></tr></table></figure>
</li>
<li><p>filter-mapping<br><filter-mapping>元素用于设置一个Filter 所负责拦截的资源。<br>一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径。</filter-mapping></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;filter-mapping&gt;</div><div class="line">    &lt;filter-name&gt;FilterDemo1&lt;/filter-name&gt;</div><div class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div><div class="line">&lt;filter-name&gt;子元素用于设置filter的注册名称。该值必须是在元素中声明过的过滤器的名字</div><div class="line">&lt;url-pattern&gt;设置 filter 所拦截的请求路径(过滤器关联的URL样式)</div><div class="line">&lt;servlet-name&gt;指定过滤器所拦截的Servlet名称。</div><div class="line">&lt;dispatcher&gt;指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。用户可以设置多个&lt;dispatcher&gt; 子元素用来指定 Filter 对资源的多种调用方式进行拦截。</div></pre></td></tr></table></figure>
</li>
<li><p>dispatcher<br>子元素可以设置的值及其意义：</p>
<ul>
<li>REQUEST：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。</li>
<li>INCLUDE：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。</li>
<li>FORWARD：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。</li>
<li>ERROR：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。</li>
</ul>
</li>
</ul>
</li>
<li><p>第二种方式：通过注解配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@WebFilter(filterName = &quot;FilterDemo1&quot;,urlPatterns = &quot;/*&quot;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>上面的配置是“/*”，所有的Web资源都需要途径过滤器</p>
<p>如果想要部分的Web资源进行过滤器过滤则需要指定Web资源的名称即可！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-it&quot;&gt;&lt;a href=&quot;#What-is-it&quot; class=&quot;headerlink&quot; title=&quot;What is it?&quot;&gt;&lt;/a&gt;What is it?&lt;/h3&gt;&lt;p&gt;过滤器是Servlet的高级特性之一，也别把它想得那么高深，只不过是实现
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>机器学习|2-逻辑回归</title>
    <link href="http://yoursite.com/2018/02/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-2-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2018/02/28/机器学习-2-逻辑回归/</id>
    <published>2018-02-28T10:54:56.000Z</published>
    <updated>2018-02-28T03:24:11.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分类-Classification"><a href="#分类-Classification" class="headerlink" title="分类(Classification)"></a>分类(Classification)</h3><p>和回归(Regression)一样，分类(Classification)问题也是机器学习里面很大的一块。</p>
<blockquote>
<p>分类问题是机器学习非常重要的一个组成部分，它的目标是根据已知样本的某些特征，判断一个新的样本属于哪种已知的样本类。</p>
</blockquote>
<p>其实常见的例子很多，判断一个邮件是否是垃圾邮件之类的，预测一个用户是否对我的商品感兴趣，以及图像处理里面对图像进行的分类。</p>
<p><img src="/images/机器学习-逻辑回归-01.jpg" alt="机器学习-逻辑回归" title="机器学习-逻辑回归-01"></p>
<p>分类问题有简单的二分类也有多分类。</p>
<h3 id="逻辑回归LR-Logistic-Regression"><a href="#逻辑回归LR-Logistic-Regression" class="headerlink" title="逻辑回归LR(Logistic Regression)"></a>逻辑回归LR(Logistic Regression)</h3><p>看到名字的时候你可能会有一些奇怪，为什么明明叫逻辑“回归”却用在分类问题上。虽然这个名字似乎指示着什么，但是逻辑回归实际上是分类算法。我猜它之所以这样命名是因为在它的学习方法上和线性回归相似，但是损失(loss)和梯度(gradient)函数的表达不同。特别的，逻辑回归使用 S型函数(sigmoid)而不是线性回归的连续输出。当我们深入到实现中去，我们会了解到更多。</p>
<p>首先我们先把逻辑回归放到一边，之前也说了逻辑回归是用来解决分类问题的，对于分类问题，我们实际上是希望得到一个分类器(Classifier)，当输入数据之后，这个分类器能给我预测这个数据属于某一类的概率，也就是说我们需要的是一个<strong>概率</strong>。</p>
<p>上一节我们介绍的线性回归，其输出的是预测值，其假设函数(Hypothesis Function)也就是输出预测值的函数是这样的。</p>
<p><img src="/images/机器学习-逻辑回归-02.jpg" alt="机器学习-逻辑回归" title="机器学习-逻辑回归-02"></p>
<p>而逻辑回归则是预测属于某一类的概率，所以我们让其假设函数是下面这个：</p>
<p><img src="/images/机器学习-逻辑回归-03.jpg" alt="机器学习-逻辑回归" title="机器学习-逻辑回归-03"></p>
<p>这个函数的意义其实是<strong>当输入为x时，输出y=1的概率</strong>，其实就是二分类问题里面是某个东西的概率。读者现在可能会对这个函数有所疑问，比如为什么是这个函数，这个留在后面会讨论。</p>
<p><img src="/images/机器学习-逻辑回归-04.jpg" alt="机器学习-逻辑回归" title="机器学习-逻辑回归-04"></p>
<blockquote>
<p>这里出现了条件概率，实际上就是指事件A在另外一个事件B已经发生条件下的发生概率。</p>
</blockquote>
<p>我们把这个函数g(z)叫做sigmoid函数，很明显这个函数的值域是0到1的开区间。接下来我们会详细介绍一下这个函数。</p>
<h4 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h4><p>Sigmoid函数的函数表达式如下:</p>
<p><img src="/images/机器学习-逻辑回归-05.jpg" alt="Sigmoid函数" title="机器学习-逻辑回归-05"></p>
<p><img src="/images/机器学习-逻辑回归-06.jpg" alt="Sigmoid函数图像" title="机器学习-逻辑回归-06"></p>
<h4 id="损失函数-Loss-Function"><a href="#损失函数-Loss-Function" class="headerlink" title="损失函数(Loss Function)"></a>损失函数(Loss Function)</h4><p>上一小节我们也说过，为了修正参数Θ我们需要有个手段来衡量当前参数Θ的优秀程度。损失函数(Loss Function)就是用来衡量假设函数(hypothesis function)的准确性。</p>
<p>对于逻辑回归来说，我们希望的是当预测概率约接近实际情况(0或1)的时候误差最小，而且不希望曲线是一条直线，而是对于越接近的地方变化越小，约远离的地方变化越大的函数。</p>
<p>下面就是逻辑回归的损失函数。</p>
<p><img src="/images/机器学习-逻辑回归-07.jpg" alt="损失函数" title="机器学习-逻辑回归-07"></p>
<p><img src="/images/机器学习-逻辑回归-08.jpg" alt="损失函数" title="机器学习-逻辑回归-08"></p>
<p>我们可以将函数合并一下，毕竟这种分段函数处理起来不是很舒服，其实就是下图这样，也很好理解，毕竟二分类训练数据y只有0和1两个值。</p>
<p><img src="/images/机器学习-逻辑回归-09.jpg" alt="enter description here" title="机器学习-逻辑回归-09"></p>
<p>这样我们就可以算出在一个训练集中基于当前参数Θ得到结果的误差了。</p>
<p><img src="/images/机器学习-逻辑回归-10.jpg" alt="enter description here" title="机器学习-逻辑回归-10"></p>
<h4 id="矢量化编程"><a href="#矢量化编程" class="headerlink" title="矢量化编程"></a>矢量化编程</h4><p>矢量化编程是提高算法速度的一种有效方法。为了提升特定数值运算操作（如矩阵相乘、矩阵相加、矩阵-向量乘法等）的速度，数值计算和并行计算的研究人员已经努力了几十年。矢量化编程的思想就是尽量使用这些被高度优化的数值运算操作来实现我们的学习算法。</p>
<p>换句话说就是尽量避免使用for循环，毕竟矩阵相乘这种场景非常适合并行计算，在巨量的数据面前性能收益非常明显。</p>
<p>如果刚刚的损失函数用矢量化编程的思想来表示的话</p>
<p><img src="/images/机器学习-逻辑回归-11.jpg" alt="矢量化编程" title="机器学习-逻辑回归-11"></p>
<p>如果一时不理解的话我先解释一下，我们先假设共m个数据，而这个模型中变量有n个。则矩阵h就是(m, n) X (n, 1)也就是(m,1)矩阵，矩阵h的意义就是这m个数据的预测值。<br>损失函数中y的转置为(1, m)，相乘后得到(1, 1)也就是一个值，这两个矩阵相乘的意义则是对应的预测值取对数乘以对应的实际值，最后加在一起。</p>
<blockquote>
<p>(m,n)表示维度为m行n列的矩阵，如果学过矩阵的乘法应该知道矩阵相乘(m, n) X (n, k)得到的矩阵是(m, k)</p>
</blockquote>
<h4 id="逻辑回归的梯度下降法-Gradient-Descent"><a href="#逻辑回归的梯度下降法-Gradient-Descent" class="headerlink" title="逻辑回归的梯度下降法(Gradient Descent)"></a>逻辑回归的梯度下降法(Gradient Descent)</h4><p>我们刚刚知道了怎么评价当前参数Θ的好坏，现在我们需要做的是使用梯度下降法来调整参数。</p>
<p><img src="/images/机器学习-逻辑回归-12.jpg" alt="" title="机器学习-逻辑回归-12"></p>
<p>依旧是对损失函数求偏导数，别忘记α是学习速率的意思。</p>
<p><img src="/images/机器学习-逻辑回归-13.jpg" alt="" title="机器学习-逻辑回归-13"></p>
<p>矢量化表示为</p>
<p><img src="/images/机器学习-逻辑回归-14.jpg" alt="" title="机器学习-逻辑回归-14"></p>
<h5 id="损失函数偏导数求解过程-选修"><a href="#损失函数偏导数求解过程-选修" class="headerlink" title="损失函数偏导数求解过程(选修)"></a>损失函数偏导数求解过程(选修)</h5><p><img src="/images/机器学习-逻辑回归-15.jpg" alt="损失函数偏导数求解过程" title="机器学习-逻辑回归-15"></p>
<h3 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h3><p>对于一个训练数据集，可视化后如下图所示。</p>
<p><img src="/images/机器学习-逻辑回归-16.jpg" alt="" title="机器学习-逻辑回归-16"></p>
<p>对于三个不同的分类器划分出的边界的三种情况，我们对其有不同的称呼.</p>
<p><img src="/images/机器学习-逻辑回归-17.jpg" alt="" title="机器学习-逻辑回归-17"></p>
<p>第一种，分类非常不准，这种我们叫欠拟合(underfitting)<br>第二种，分类得恰到好处，这种其实没有特别的称呼。<br>第三种，分类太过于契合训练数据了。这种我们称为过拟合(overfitting)<br>过拟合所产生的问题也很明显，它实在太过于契合训练集了，对于我们来说，第二个曲线才是我们想要的，过拟合的结果太过于契合训练数据，实用性可想而知的低。</p>
<p>而解决过拟合的方法主要有两种</p>
<ul>
<li>减少特征的数量，这个很好理解，更多的特征意味着划分出来的函数曲线可以越复杂。这个可以扩展到以后会讲的特征工程(Feature Engineering)</li>
<li>使用正则化项， 保持所有的特征，但是保证参数θj不会变得巨大。正则化项非常适合在我们拥有很多稍微有点用的特征的时候。</li>
</ul>
<h4 id="正则化项-regularizer"><a href="#正则化项-regularizer" class="headerlink" title="正则化项(regularizer)"></a>正则化项(regularizer)</h4><p>正则化项其实也叫惩罚项(penalty term)，其作用是减缓过拟合问题，其实就是在损失函数后面加一个含有各个Θ的项，这样做的目的是让Θ也参与损失函数的计算，这样由于我们需要求的是损失函数的最小值，这个项就会限制Θ的大小。</p>
<p>这个正则化项的目的其实是一个权衡，我们即希望参数Θ能在训练数据集上表现得比较好，又不希望参数Θ训练出来的值非常大而产生一些奇葩的划分曲线，就像下图这样的。</p>
<p><img src="/images/机器学习-逻辑回归-18.jpg" alt="过拟合" title="机器学习-逻辑回归-18"></p>
<blockquote>
<p>转载 <a href="https://juejin.im/post/5a40e8e46fb9a0450671dd2f" target="_blank" rel="external">https://juejin.im/post/5a40e8e46fb9a0450671dd2f</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;分类-Classification&quot;&gt;&lt;a href=&quot;#分类-Classification&quot; class=&quot;headerlink&quot; title=&quot;分类(Classification)&quot;&gt;&lt;/a&gt;分类(Classification)&lt;/h3&gt;&lt;p&gt;和回归(Regr
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/machine/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习|1-线性回归</title>
    <link href="http://yoursite.com/2018/02/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2018/02/27/机器学习-1-线性回归/</id>
    <published>2018-02-26T18:37:58.000Z</published>
    <updated>2018-02-26T15:46:51.948Z</updated>
    
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>

<script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<blockquote>
<p>机器学习(Machine Learning, ML)是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。</p>
</blockquote>
<p>自己作为计算机专业的一员，在写了几个只要增删改查的项目后，发现自己对写代码这个活动不是很有兴趣了，有点厌倦了。现在业内人都在说人工智能、机器学习等高大尚的东西，起初自己认为这些东西不是本科生能掌握的东西，但接触后发现自己错了，也就是那么一回事。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文章的主角是线性回归，也就是LR(Linear Regression)，是机器学习得基础算法。</p>
<p>回归(Regression)问题是机器学习里面很大的一块。</p>
<blockquote>
<p>统计学中，回归分析（regression analysis)指的是确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。回归分析按照涉及的变量的多少，分为一元回归和多元回归分析；按照因变量的多少，可分为简单回归分析和多重回归分析；按照自变量和因变量之间的关系类型，可分为线性回归分析和非线性回归分析。</p>
</blockquote>
<p>不玩定义，直接上例子，设想一下这样的场景： 如果我现在有了一组(身高, 体重)的数据集，可以令身高为x值，体重为y值将其画在纸上，就和下图一样。</p>
<p><img src="/images/机器学习-线性回归-01.png" alt="机器学习-线性回归" title="机器学习-线性回归-01"></p>
<p>那么现在问题来了，假设我身高为1.8m，能不能预测出我的体重？这就是回归要解决的问题，我希望得到一个函数，我输入我的身高之后他能够帮我预测出我的体重。<br>在这个例子里，我假设身高和体重的关系是线性关系，所以假设模型是y=kx+b这种一次函数，为了确定变量k和b，我需要利用之前的数据去学习出这两个参数。<br>尽管上面的例子误差很大。因为体重的函数肯定不单单由身高这一个特征(feature)决定，而且即使只有身高一个特征，最佳函数也很可能不是一次函数。</p>
<h4 id="回归问题相关概念"><a href="#回归问题相关概念" class="headerlink" title="回归问题相关概念"></a>回归问题相关概念</h4><p>通常，这类预测问题可以用回归(regression)模型进行解决，回归模型定义了输入与输出的关系，输入即现有知识，而输出则为预测。<br>一个预测问题在回归模型下的解决步骤为：</p>
<ul>
<li>积累知识： 我们将储备的知识称之为训练集(Training Set)，毕竟预测是需要过去的数据作为参考的，这个很好理解。</li>
<li>学习：当我们有了数据的时候，我们就需要去学习这些数据，为什么说机器学习智能？因为当我告诉计算机我的模型是线性(一次函数)或其他类型的函数然后把数据直接倒进去之后它就能返回给我最后的函数(参数都训练好了)。</li>
<li>预测：学习完成后，当接受了新的数据（输入）后，我们就能通过学习阶段获得的对应关系来预测输出。</li>
</ul>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>这篇博客主要讲的是线性回归(Linear regression)，经过前言后大家也知道了，回归里面用到的函数有多种多样的，这个需要开发者自己去选择，这次先介绍最简单的线性回归(Linear regression)。</p>
<h4 id="线性回归LR-Linear-Regression"><a href="#线性回归LR-Linear-Regression" class="headerlink" title="线性回归LR(Linear Regression)"></a>线性回归LR(Linear Regression)</h4><p>从数学上来说，给定由d个属性描述的示例x=(x1;x2;…;xd),其中xi是x在第i个属性上的取值，线性模型试图学得一个通过属性的线性组合来进行预测的函数，即:</p>
<p><img src="/images/机器学习-线性回归-02.png" alt="机器学习-线性回归" title="机器学习-线性回归-02"></p>
<p>一般用向量形式:</p>
<p><img src="/images/机器学习-线性回归-03.png" alt="机器学习-线性回归" title="机器学习-线性回归-03"></p>
<p>好了，现在我们知道了线性回归模型的基本形式了，那么我们现在的任务就是要去学习出这个w向量和b这些参数的值，有了这个值我们才能去做预测。</p>
<p>一般来说，我们会给w和b一个初始值，然后我们去修正这些值来让这些值符合预期，那么我们怎么去修正这些值呢？我们需要一个<strong>损失函数</strong>(loss function)，这个函数用来指明我的预测值和训练数据实际值的差别。<br>那么这个损失函数(loss function)是什么，以及我们怎么用它来修正我们的参数w和b，看下面。</p>
<h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><p>不知道大家知不知道启发式搜索(Heuristically Search)？</p>
<blockquote>
<p>启发式搜索(Heuristically Search)又称为有信息搜索(Informed Search)，它是利用问题拥有的启发信息来引导搜索，达到减少搜索范围、降低问题复杂度的目的，这种利用启发信息的搜索过程称为启发式搜索。——百度百科</p>
</blockquote>
<p>举个例子，大一大二在大学里面的时候我是有单车的，晚上下课的时候在停车场里面经常忘记自己的车停在哪，要找半天才能找得到，这种就叫盲目搜索，广度优先搜索(BFS)和宽度优先搜索(DFS)都是盲目搜索。</p>
<p>那么如果我手里有个黑科技，能够告诉我我现在距离我的爱车多远，那么我是不是可以以此为依据，往距离逐渐减少的方向去搜索呢？这就是启发式搜索(Heuristically Search)，Astar(A*)寻路算法等就是启发式搜索。<br>启发式搜索与机器学习有一些概念是共通的，那么对于机器学习来说，我也同样需要一个和“距离我爱车多远”这样一个指标来判断我现在参数距离我最优参数有“多远”。我们可以统一的把这种东西叫做损失函数(loss function)</p>
<h4 id="损失函数-Loss-Function"><a href="#损失函数-Loss-Function" class="headerlink" title="损失函数(Loss Function)"></a>损失函数(Loss Function)</h4><p>我们给之前例子里的函数一个名字，叫假设函数(hypothesis function)，意为预估值函数。损失函数则是用来衡量假设函数(hypothesis function)的准确性，具体衡量指标有很多，这里我们和吴恩达教程里面一样采用平方差的方式计算。</p>
<p><img src="/images/机器学习-线性回归-04.png" alt="机器学习-线性回归" title="机器学习-线性回归-04"></p>
<p>其中函数J就是损失函数(为什么是J我好好奇)，函数h是假设函数，可以看到后面是平方差的平均值然后除以了个2。</p>
<blockquote>
<p>公式2*m里面的2其实就是为了后面求偏导的时候可以把分数消掉，没什么太大的实际意义。</p>
</blockquote>
<h4 id="梯度下降算法-Gradient-descent-algorithm"><a href="#梯度下降算法-Gradient-descent-algorithm" class="headerlink" title="梯度下降算法(Gradient descent algorithm)"></a>梯度下降算法(Gradient descent algorithm)</h4><p>既然我们现在知道了当前怎么评价当前参数的好坏，那么我怎么去修正参数让参数更好(损失函数的最小值)呢？</p>
<p>高中生都知道，在一元函数里面，导数的几何意义就是函数变化增加最快的方向。梯度其实类似，也是类似的，说白了就是一个向量，表示上升最快的方向。</p>
<p>那么我们就可以得到一个修正的公式，我们迭代这个公式许多次来修正参数。</p>
<p><img src="/images/机器学习-线性回归-05.png" alt="机器学习-线性回归" title="机器学习-线性回归-05"></p>
<p>这里是减号是因为梯度表示上升最快，所以用的是负梯度。</p>
<p>然后其中其中α表示学习速率(learning rate)，这个值越大每次修正的就越多，不过这个不是越高越好，如果太高了可能会一直在最低点“摆动”而无法收敛。也有的使用可变的学习速率，一开始设置较高，接近最低点的过程中逐渐降低。</p>
<p><img src="/images/机器学习-线性回归-06.png" alt="机器学习-线性回归" title="机器学习-线性回归-06"></p>
<p>接下来我们看一下求导之后的结果:</p>
<p><img src="/images/机器学习-线性回归-07.png" alt="机器学习-线性回归" title="机器学习-线性回归-07"></p>
<blockquote>
<p>这里有一点值得注意的是，在这个梯度下降中我们每次迭代都使用了所有的m个训练数据，这种也叫批量梯度下降法Batch Gradient Descent，BGD<br>这样每次迭代都将对m个样本进行计算，计算量大。所以有些优化方案，有兴趣的可以去看一下</p>
</blockquote>
<p>现在我们知道了如何去修正参数了，但我们实际上修正之后得到的是损失函数(loss function)的极小值而不一定是最小值.</p>
<p><img src="/images/机器学习-线性回归-08.png" alt="机器学习-线性回归" title="机器学习-线性回归-08"></p>
<p><img src="/images/机器学习-线性回归-09.png" alt="机器学习-线性回归" title="机器学习-线性回归-09"></p>
<ol>
<li>由于起始点(起始参数)的不同，最后可能得到的并不是全局的最优解(损失函数最小)。我说一下从西瓜书上看到的几个优化方法。</li>
<li>以多组不同的参数值初始化，反正就是找多个起点选最好的结果。</li>
<li>使用“模拟退火”(Simulated Annealing)技术，模拟退火在每一步都以一定概率接受比当前解更差的结果，从而有助于“跳出”局部极小。在每步迭代过程中，接受“次优解”的概率会随着时间的推移而逐步降低，从而保证算法的稳定。</li>
<li>使用随机梯度下降，它在计算梯度的时候加入了随机因素，所以即使陷入了局部极小值，它计算出来的梯度仍然可能不为0，这样就有机会跳出局部极小继续搜索。</li>
</ol>
<blockquote>
<p>转载 <a href="https://juejin.im/post/5a37b4cf6fb9a045023bbe25" target="_blank" rel="external">https://juejin.im/post/5a37b4cf6fb9a045023bbe25</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}
});
&lt;/script&gt;

&lt;script type=&quot;te
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/machine/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java|自己撸一个SpringMVC框架</title>
    <link href="http://yoursite.com/2018/02/25/Java-%E5%BE%92%E6%89%8B%E6%92%B8%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0SpringMVC%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2018/02/25/Java-徒手撸框架-实现SpringMVC框架/</id>
    <published>2018-02-24T18:37:19.000Z</published>
    <updated>2018-02-24T14:53:24.619Z</updated>
    
    <content type="html"><![CDATA[<p>Spring框架对于Java后端程序员来说再熟悉不过了，以前只知道它用的反射实现的，但了解之后才知道有很多巧妙的设计在里面。如果不看Spring的源码，你将会失去一次和大师学习的机会：它的代码规范，设计思想很值得学习。我们程序员大部分人都是野路子，不懂什么叫代码规范。写了一个月的代码，最后还得其他老司机花3天时间重构，相信大部分老司机都很头疼看新手的代码。</p>
<p>废话不多说，我们进入今天的正题，在Web应用程序设计中，MVC模式已经被广泛使用。SpringMVC以DispatcherServlet为核心，负责协调和组织不同组件以完成请求处理并返回响应的工作，实现了MVC模式。想要实现自己的SpringMVC框架，需要从以下几点入手：</p>
<ul>
<li>了解SpringMVC运行流程及九大组件</li>
<li>自己实现SpringMVC的功能分析</li>
<li>手写SpringMVC框架</li>
</ul>
<h3 id="了解SpringMVC运行流程及九大组件"><a href="#了解SpringMVC运行流程及九大组件" class="headerlink" title="了解SpringMVC运行流程及九大组件"></a>了解SpringMVC运行流程及九大组件</h3><h4 id="SpringMVC的运行流程"><a href="#SpringMVC的运行流程" class="headerlink" title="SpringMVC的运行流程"></a>SpringMVC的运行流程</h4><p><img src="/images/springMVC-01.jpg" alt="springMVC" title="springMVC-01"></p>
<ul>
<li>用户发送请求至前端控制器DispatcherServlet</li>
<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>
<li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li>
<li>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器<br>执行处理器(Controller，也叫后端控制器)。</li>
<li>Controller执行完成返回ModelAndView</li>
<li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</li>
<li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li>
<li>ViewReslover解析后返回具体View</li>
<li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</li>
<li>DispatcherServlet响应用户。</li>
</ul>
<p>从上面可以看出，DispatcherServlet有接受请求，响应结果，转发等作用。有了DispatcherServlet之后，可以减少组件之间的耦合度。</p>
<h4 id="SpringMVC的九大组件"><a href="#SpringMVC的九大组件" class="headerlink" title="SpringMVC的九大组件"></a>SpringMVC的九大组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">protected void initStrategies(ApplicationContext context) &#123;</div><div class="line">	//用于处理上传请求。处理方法是将普通的request包装成MultipartHttpServletRequest，后者可以直接调用getFile方法获取File.</div><div class="line">	initMultipartResolver(context);</div><div class="line">	//SpringMVC主要有两个地方用到了Locale：一是ViewResolver视图解析的时候；二是用到国际化资源或者主题的时候。</div><div class="line">	initLocaleResolver(context); </div><div class="line">	//用于解析主题。SpringMVC中一个主题对应一个properties文件，里面存放着跟当前主题相关的所有资源、</div><div class="line">	//如图片、css样式等。SpringMVC的主题也支持国际化， </div><div class="line">	initThemeResolver(context);</div><div class="line">	//用来查找Handler的。</div><div class="line">	initHandlerMappings(context);</div><div class="line">	//从名字上看，它就是一个适配器。Servlet需要的处理方法的结构却是固定的，都是以request和response为参数的方法。</div><div class="line">	//如何让固定的Servlet处理方法调用灵活的Handler来进行处理呢？这就是HandlerAdapter要做的事情</div><div class="line">	initHandlerAdapters(context);</div><div class="line">	//其它组件都是用来干活的。在干活的过程中难免会出现问题，出问题后怎么办呢？</div><div class="line">	//这就需要有一个专门的角色对异常情况进行处理，在SpringMVC中就是HandlerExceptionResolver。</div><div class="line">	initHandlerExceptionResolvers(context);</div><div class="line">	//有的Handler处理完后并没有设置View也没有设置ViewName，这时就需要从request获取ViewName了，</div><div class="line">	//如何从request中获取ViewName就是RequestToViewNameTranslator要做的事情了。</div><div class="line">	initRequestToViewNameTranslator(context);</div><div class="line">	//ViewResolver用来将String类型的视图名和Locale解析为View类型的视图。</div><div class="line">	//View是用来渲染页面的，也就是将程序返回的参数填入模板里，生成html（也可能是其它类型）文件。</div><div class="line">	initViewResolvers(context);</div><div class="line">	//用来管理FlashMap的，FlashMap主要用在redirect重定向中传递参数。</div><div class="line">	initFlashMapManager(context); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自己实现SpringMVC功能分析"><a href="#自己实现SpringMVC功能分析" class="headerlink" title="自己实现SpringMVC功能分析"></a>自己实现SpringMVC功能分析</h3><p>本片文章只实现SpringMVC的配置加载、实例化扫描的包、HandlerMapping的url映射到对应的Controller的method上、异常的拦截和动态调用后返回结果输出给浏览器的功能。其余SpringMVC功能读者可以尝试自己实现。</p>
<h4 id="读取配置"><a href="#读取配置" class="headerlink" title="读取配置"></a>读取配置</h4><p><img src="/images/springMVC-02.png" alt="springMVC" title="springMVC-02"></p>
<p> 从图中可以看出，SpringMVC本质上是一个Servlet,这个 Servlet 继承自 HttpServlet。FrameworkServlet负责初始化SpringMVC的容器，并将Spring容器设置为父容器。因为本文只是实现SpringMVC，对于Spring容器不做过多讲解。</p>
<p> 为了读取web.xml中的配置，我们用到ServletConfig这个类，它代表当前Servlet在web.xml中的配置信息。通过web.xml中加载我们自己写的MyDispatcherServlet和读取配置文件。</p>
<h4 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h4><p>在上文中，我们知道了DispatcherServlet的initStrategies方法会初始化9大组件，但是本文将实现一些SpringMVC的最基本的组件而不是全部，按顺序包括：</p>
<ul>
<li>加载配置文件</li>
<li>初始化所有相关联的类，扫描用户设定的包下面所有的类</li>
<li>拿到扫描到的类，通过反射机制，实例化。并且放到ioc容器中(Map的键值对  beanName-bean) beanName默认是首字母小写</li>
<li>初始化HandlerMapping，其实就是将一个Map的键值对 key是url，value是所调用的方法put进去(将url和method对应上)</li>
</ul>
<h4 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h4><p>每一次请求将会调用doGet或doPost方法，所以统一运行阶段都放在doDispatch方法里处理，它会根据url请求去HandlerMapping中匹配到对应的Method，然后利用反射机制调用Controller中的方法，并得到结果返回。按顺序包括以下功能：</p>
<ul>
<li>异常的拦截</li>
<li>获取请求传入的参数并处理参数</li>
<li>通过初始化好的handlerMapping的Map容器中拿出url对应的方法名，反射调用</li>
</ul>
<h3 id="手写SpringMVC框架"><a href="#手写SpringMVC框架" class="headerlink" title="手写SpringMVC框架"></a>手写SpringMVC框架</h3><p> 工程文件及目录：</p>
<p> <img src="/images/springMVC-03.png" alt="springMVC" title="springMVC-03"></p>
<p>首先，新建一个maven项目，在pom.xml中导入以下依赖。为了方便，博主直接导入了Springboot的web包，里面有我们需要的所有web开发的东西：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">  &lt;groupId&gt;com.liugh&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;liughMVC&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line">  </div><div class="line"> &lt;dependencyManagement&gt;</div><div class="line">		&lt;dependencies&gt;</div><div class="line">			&lt;dependency&gt;</div><div class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">				&lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</div><div class="line">				&lt;version&gt;1.4.3.RELEASE&lt;/version&gt;</div><div class="line">				&lt;type&gt;pom&lt;/type&gt;</div><div class="line">				&lt;scope&gt;import&lt;/scope&gt;</div><div class="line">			&lt;/dependency&gt;</div><div class="line">		&lt;/dependencies&gt;</div><div class="line">	&lt;/dependencyManagement&gt;</div><div class="line">	&lt;properties&gt;</div><div class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">		&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</div><div class="line">		&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</div><div class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line">	</div><div class="line">	&lt;dependencies&gt;</div><div class="line">  		&lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p>
<p>接着，我们在WEB-INF下创建一个web.xml，如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</div><div class="line">	version=&quot;3.0&quot;&gt;</div><div class="line">	&lt;servlet&gt;</div><div class="line">		&lt;servlet-name&gt;MySpringMVC&lt;/servlet-name&gt;</div><div class="line">		&lt;servlet-class&gt;com.liugh.servlet.MyDispatcherServlet&lt;/servlet-class&gt;</div><div class="line">		&lt;init-param&gt;</div><div class="line">			&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">			&lt;param-value&gt;application.properties&lt;/param-value&gt;</div><div class="line">		&lt;/init-param&gt;</div><div class="line">		&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">	&lt;/servlet&gt;</div><div class="line">	&lt;servlet-mapping&gt;</div><div class="line">		&lt;servlet-name&gt;MySpringMVC&lt;/servlet-name&gt;</div><div class="line">		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">	&lt;/servlet-mapping&gt;</div><div class="line"></div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>application.properties文件中只是配置要扫描的包到SpringMVC容器中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scanPackage=com.liugh.core</div></pre></td></tr></table></figure></p>
<p>创建自己的Controller注解，它只能标注在类上面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.liugh.annotation;</div><div class="line"></div><div class="line">import java.lang.annotation.Documented;</div><div class="line">import java.lang.annotation.ElementType;</div><div class="line">import java.lang.annotation.Retention;</div><div class="line">import java.lang.annotation.RetentionPolicy;</div><div class="line">import java.lang.annotation.Target;</div><div class="line"></div><div class="line">@Target(ElementType.TYPE)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">public @interface MyController &#123;</div><div class="line">	/**</div><div class="line">     * 表示给controller注册别名</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    String value() default &quot;&quot;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>RequestMapping注解，可以在类和方法上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.liugh.annotation;</div><div class="line"></div><div class="line">import java.lang.annotation.Documented;</div><div class="line">import java.lang.annotation.ElementType;</div><div class="line">import java.lang.annotation.Retention;</div><div class="line">import java.lang.annotation.RetentionPolicy;</div><div class="line">import java.lang.annotation.Target;</div><div class="line"></div><div class="line">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">public @interface MyRequestMapping &#123;</div><div class="line">	/**</div><div class="line">     * 表示访问该方法的url</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    String value() default &quot;&quot;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>RequestParam注解,只能注解在参数上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.liugh.annotation;</div><div class="line"></div><div class="line">import java.lang.annotation.Documented;</div><div class="line">import java.lang.annotation.ElementType;</div><div class="line">import java.lang.annotation.Retention;</div><div class="line">import java.lang.annotation.RetentionPolicy;</div><div class="line">import java.lang.annotation.Target;</div><div class="line"></div><div class="line">@Target(ElementType.PARAMETER)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">public @interface MyRequestParam &#123;</div><div class="line">	/**</div><div class="line">     * 表示参数的别名，必填</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    String value();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后创建MyDispatcherServlet这个类，去继承HttpServlet，重写init方法、doGet、doPost方法，以及加上我们第二步分析时要实现的功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div></pre></td><td class="code"><pre><div class="line">package com.liugh.servlet;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.lang.reflect.Method;</div><div class="line">import java.net.URL;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Map.Entry;</div><div class="line">import java.util.Properties;</div><div class="line"></div><div class="line">import javax.servlet.ServletConfig;</div><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.http.HttpServlet;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import com.liugh.annotation.MyController;</div><div class="line">import com.liugh.annotation.MyRequestMapping;</div><div class="line"></div><div class="line">public class MyDispatcherServlet extends HttpServlet&#123;</div><div class="line">	</div><div class="line">	private Properties properties = new Properties();</div><div class="line">	</div><div class="line">	private List&lt;String&gt; classNames = new ArrayList&lt;&gt;();</div><div class="line">	</div><div class="line">	private Map&lt;String, Object&gt; ioc = new HashMap&lt;&gt;();</div><div class="line">	</div><div class="line">	private Map&lt;String, Method&gt; handlerMapping = new  HashMap&lt;&gt;();</div><div class="line">	</div><div class="line">	private Map&lt;String, Object&gt; controllerMap  =new HashMap&lt;&gt;();</div><div class="line">	</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void init(ServletConfig config) throws ServletException &#123;</div><div class="line">		</div><div class="line">		//1.加载配置文件</div><div class="line">		doLoadConfig(config.getInitParameter(&quot;contextConfigLocation&quot;));</div><div class="line">		</div><div class="line">		//2.初始化所有相关联的类,扫描用户设定的包下面所有的类</div><div class="line">		doScanner(properties.getProperty(&quot;scanPackage&quot;));</div><div class="line">		</div><div class="line">		//3.拿到扫描到的类,通过反射机制,实例化,并且放到ioc容器中(k-v  beanName-bean) beanName默认是首字母小写</div><div class="line">		doInstance();</div><div class="line">		</div><div class="line">		//4.初始化HandlerMapping(将url和method对应上)</div><div class="line">		initHandlerMapping();</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line">	@Override</div><div class="line">	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">		this.doPost(req,resp);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</div><div class="line">		try &#123;</div><div class="line">			//处理请求</div><div class="line">			doDispatch(req,resp);</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			resp.getWriter().write(&quot;500!! Server Exception&quot;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	private void doDispatch(HttpServletRequest req, HttpServletResponse resp) throws Exception &#123;</div><div class="line">		if(handlerMapping.isEmpty())&#123;</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		String url =req.getRequestURI();</div><div class="line">		String contextPath = req.getContextPath();</div><div class="line">		</div><div class="line">		url=url.replace(contextPath, &quot;&quot;).replaceAll(&quot;/+&quot;, &quot;/&quot;);</div><div class="line">		</div><div class="line">		if(!this.handlerMapping.containsKey(url))&#123;</div><div class="line">			resp.getWriter().write(&quot;404 NOT FOUND!&quot;);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		Method method =this.handlerMapping.get(url);</div><div class="line">		</div><div class="line">		//获取方法的参数列表</div><div class="line">		Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class="line">	</div><div class="line">		//获取请求的参数</div><div class="line">		Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</div><div class="line">		</div><div class="line">		//保存参数值</div><div class="line">		Object [] paramValues= new Object[parameterTypes.length];</div><div class="line">		</div><div class="line">		//方法的参数列表</div><div class="line">        for (int i = 0; i&lt;parameterTypes.length; i++)&#123;  </div><div class="line">            //根据参数名称，做某些处理  </div><div class="line">            String requestParam = parameterTypes[i].getSimpleName();  </div><div class="line">            </div><div class="line">            </div><div class="line">            if (requestParam.equals(&quot;HttpServletRequest&quot;))&#123;  </div><div class="line">                //参数类型已明确，这边强转类型  </div><div class="line">            	paramValues[i]=req;</div><div class="line">                continue;  </div><div class="line">            &#125;  </div><div class="line">            if (requestParam.equals(&quot;HttpServletResponse&quot;))&#123;  </div><div class="line">            	paramValues[i]=resp;</div><div class="line">                continue;  </div><div class="line">            &#125;</div><div class="line">            if(requestParam.equals(&quot;String&quot;))&#123;</div><div class="line">            	for (Entry&lt;String, String[]&gt; param : parameterMap.entrySet()) &#123;</div><div class="line">         			String value =Arrays.toString(param.getValue()).replaceAll(&quot;\\[|\\]&quot;, &quot;&quot;).replaceAll(&quot;,\\s&quot;, &quot;,&quot;);</div><div class="line">         			paramValues[i]=value;</div><div class="line">         		&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;  </div><div class="line">		//利用反射机制来调用</div><div class="line">		try &#123;</div><div class="line">			method.invoke(this.controllerMap.get(url), paramValues);//obj是method所对应的实例 在ioc容器中</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	private void  doLoadConfig(String location)&#123;</div><div class="line">		//把web.xml中的contextConfigLocation对应value值的文件加载到留里面</div><div class="line">		InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream(location);</div><div class="line">		try &#123;</div><div class="line">			//用Properties文件加载文件里的内容</div><div class="line">			properties.load(resourceAsStream);</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;finally &#123;</div><div class="line">			//关流</div><div class="line">			if(null!=resourceAsStream)&#123;</div><div class="line">				try &#123;</div><div class="line">					resourceAsStream.close();</div><div class="line">				&#125; catch (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	private void doScanner(String packageName) &#123;</div><div class="line">		//把所有的.替换成/</div><div class="line">		URL url  =this.getClass().getClassLoader().getResource(&quot;/&quot;+packageName.replaceAll(&quot;\\.&quot;, &quot;/&quot;));</div><div class="line">		File dir = new File(url.getFile());</div><div class="line">		for (File file : dir.listFiles()) &#123;</div><div class="line">			if(file.isDirectory())&#123;</div><div class="line">				//递归读取包</div><div class="line">				doScanner(packageName+&quot;.&quot;+file.getName());</div><div class="line">			&#125;else&#123;</div><div class="line">				String className =packageName +&quot;.&quot; +file.getName().replace(&quot;.class&quot;, &quot;&quot;);</div><div class="line">				classNames.add(className);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	private void doInstance() &#123;</div><div class="line">		if (classNames.isEmpty()) &#123;</div><div class="line">			return;</div><div class="line">		&#125;	</div><div class="line">		for (String className : classNames) &#123;</div><div class="line">			try &#123;</div><div class="line">				//把类搞出来,反射来实例化(只有加@MyController需要实例化)</div><div class="line">				Class&lt;?&gt; clazz =Class.forName(className);</div><div class="line">			   if(clazz.isAnnotationPresent(MyController.class))&#123;</div><div class="line">					ioc.put(toLowerFirstWord(clazz.getSimpleName()),clazz.newInstance());</div><div class="line">				&#125;else&#123;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				</div><div class="line">			&#125; catch (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	private void initHandlerMapping()&#123;</div><div class="line">		if(ioc.isEmpty())&#123;</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		try &#123;</div><div class="line">			for (Entry&lt;String, Object&gt; entry: ioc.entrySet()) &#123;</div><div class="line">				Class&lt;? extends Object&gt; clazz = entry.getValue().getClass();</div><div class="line">				if(!clazz.isAnnotationPresent(MyController.class))&#123;</div><div class="line">					continue;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				//拼url时,是controller头的url拼上方法上的url</div><div class="line">				String baseUrl =&quot;&quot;;</div><div class="line">				if(clazz.isAnnotationPresent(MyRequestMapping.class))&#123;</div><div class="line">					MyRequestMapping annotation = clazz.getAnnotation(MyRequestMapping.class);</div><div class="line">					baseUrl=annotation.value();</div><div class="line">				&#125;</div><div class="line">				Method[] methods = clazz.getMethods();</div><div class="line">				for (Method method : methods) &#123;</div><div class="line">					if(!method.isAnnotationPresent(MyRequestMapping.class))&#123;</div><div class="line">						continue;</div><div class="line">					&#125;</div><div class="line">					MyRequestMapping annotation = method.getAnnotation(MyRequestMapping.class);</div><div class="line">					String url = annotation.value();</div><div class="line">					</div><div class="line">					url =(baseUrl+&quot;/&quot;+url).replaceAll(&quot;/+&quot;, &quot;/&quot;);</div><div class="line">					handlerMapping.put(url,method);</div><div class="line">					controllerMap.put(url,clazz.newInstance());</div><div class="line">					System.out.println(url+&quot;,&quot;+method);</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 把字符串的首字母小写</div><div class="line">	 * @param name</div><div class="line">	 * @return</div><div class="line">	 */</div><div class="line">	private String toLowerFirstWord(String name)&#123;</div><div class="line">		char[] charArray = name.toCharArray();</div><div class="line">		charArray[0] += 32;</div><div class="line">		return String.valueOf(charArray);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们就开发完了自己的SpringMVC，现在我们测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.liugh.core.controller;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import com.liugh.annotation.MyController;</div><div class="line">import com.liugh.annotation.MyRequestMapping;</div><div class="line">import com.liugh.annotation.MyRequestParam;</div><div class="line"></div><div class="line">@MyController</div><div class="line">@MyRequestMapping(&quot;/test&quot;)</div><div class="line">public class TestController &#123;</div><div class="line">	</div><div class="line"></div><div class="line">	</div><div class="line">	 @MyRequestMapping(&quot;/doTest&quot;)</div><div class="line">    public void test1(HttpServletRequest request, HttpServletResponse response,</div><div class="line">    		@MyRequestParam(&quot;param&quot;) String param)&#123;</div><div class="line"> 		System.out.println(param);</div><div class="line">	    try &#123;</div><div class="line">            response.getWriter().write( &quot;doTest method success! param:&quot;+param);</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	 </div><div class="line">	 </div><div class="line">	 @MyRequestMapping(&quot;/doTest2&quot;)</div><div class="line">    public void test2(HttpServletRequest request, HttpServletResponse response)&#123;</div><div class="line">        try &#123;</div><div class="line">            response.getWriter().println(&quot;doTest2 method success!&quot;);</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>访问<a href="http://localhost:8080/liughMVC/test/doTest?param=liugh如下：" target="_blank" rel="external">http://localhost:8080/liughMVC/test/doTest?param=liugh如下：</a></p>
<p><img src="/images/springMVC-04.jpg" alt="test" title="springMVC-04"></p>
<p>访问一个不存在的试试：<br><img src="/images/springMVC-05.jpg" alt="test" title="springMVC-05"></p>
<p>到这里我们就大功告成了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring框架对于Java后端程序员来说再熟悉不过了，以前只知道它用的反射实现的，但了解之后才知道有很多巧妙的设计在里面。如果不看Spring的源码，你将会失去一次和大师学习的机会：它的代码规范，设计思想很值得学习。我们程序员大部分人都是野路子，不懂什么叫代码规范。写了一
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福机器学习课程|第一周(1)认识机器学习</title>
    <link href="http://yoursite.com/2018/02/22/%E6%96%AF%E5%9D%A6%E7%A6%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%91%A8-1-%E8%AE%A4%E8%AF%86%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/02/22/斯坦福机器学习课程-第一周-1-认识机器学习/</id>
    <published>2018-02-22T11:08:52.000Z</published>
    <updated>2018-02-22T03:47:46.296Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生活中机器学习的影子"><a href="#生活中机器学习的影子" class="headerlink" title="生活中机器学习的影子"></a>生活中机器学习的影子</h3><p>在生活中，每天你都可能在不知不觉中使用了各种各样的机器学习算法。比如，当你每一次使用像诸如谷歌 (Google)或必应 (Bing) 的搜索引擎时，它们运作得如此之好的原因之一便是，由Google或微软实现的一种学习算法可以“学会”如何对网页进行排名；每当你使用脸书 (Facebook)或苹果 (Apple) 的照片处理应用时，它们都能自动识别出你朋友的照片，这也是机器学习的一种；每当你阅读电子邮件时，你的垃圾邮件过滤器帮你免受大量垃圾邮件的困扰，这也是通过一种学习算法实现的。还有一个让我兴奋的理由，是一个关于人工智能的梦想：有朝一日，我们能创造出像你我一样聪明的机器，尽管我们离这个目标仍有很长的距离，但许多的人工智能专家相信，实现这一目标最好的途径是通过学习算法，来模拟人类大脑的学习方式。</p>
<p>话说，为什么机器学习在当今如此流行呢？ 机器学习发源于人工智能领域 我们希望能够创造出具有智慧的机器。我们通过编程来让机器完成一些基础的工作，比如如何找到从A到B的最短路径，但在大多数情况下，我们并不知道如何显式地编写人工智能程序，来做一些更有趣的任务。比如网页搜索，标记照片和拦截垃圾邮件等。人们意识到唯一能够达成这些目标的方法，就是让机器自己学会如何去做。因而，机器学习已经发展成为计算机的一项新能力，并且与工业界和基础科学界有着紧密的联系。</p>
<p>身处机器学习领域。我常常会在短短一周中与形形色色的人打交道 如直升机飞行员、生物学家、还有许多计算机系统专家。比如我在斯坦福的同事们，同时平均每周我还会数次收到来自硅谷的业界人士的email，咨询我是否有兴趣将机器学习算法应用到他们所遇到的实际问题中，以上的例子都彰显了机器学习所能处理的问题范围之广。在硅谷，机器学习引导着大量的课题。如自主机器人、计算生物学等。机器学习的实例还有很多，比如数据库挖掘。机器学习变得如此流行的原因之一，便是网络和自动化算法的爆炸性增长，这意味着我们掌握了比以往多得多的数据集。举例来说，当今有数不胜数的硅谷企业，在收集有关网络点击的数据 (Clickstream Data) 并试图在这些数据上运用机器学习的算法来更好的理解和服务用户，这在硅谷已经成为了一项巨大的产业。随着电子自动化的发展，我们现在拥有了电子医疗记录，如果我们能够将这些记录转变为医学知识，那我们就能对各种疾病了解的更深入，同时，计算生物学也在电子自动化的辅助下快速发展。生物学家收集了大量有关基因序列以及DNA序列的数据，通过对其应用机器学习的算法来帮助我们跟深入地理解人类基因组，及其对我们人类的意义，几乎工程界的所有领域，都在使用机器学习算法来分析日益增长的海量数据集。有些机器应用我们并不能够通过手工编程来实现，比如说，我个人对自动直升机有着许多年的研究，想要写出一个能让直升机自主飞行的程序几乎是不可能的任务。唯一可行的解决方案就是让一台计算机能够自主地学会如何让直升机飞行。再比如手写识别，如今将大量的邮件，按地址分类寄送到全美甚至全球的代价大大降低，其中重要的理由之一便是每当你写下这样一封信时 一个机器学习的算法已经学会如何读懂你的笔迹并自动地将你的信件发往它的目的地.所以邮寄跨越上万里的信件的费用也很低。你也许曾经接触过自然语言处理和计算机视觉，事实上，这些领域都是试图通过人工智能来理解人类的语言和图像，如今大多数的自然语言处理和计算机视觉都是对机器学习的一种应用。</p>
<p><strong>机器学习算法也在用户自定制化程序(self-customizing program)中有着广泛的应用</strong>，每当你使用亚马逊、Netflix或iTunes Genius的服务时，都会收到它们为你量身推荐的电影或产品。这就是通过学习算法来实现的。可以相信，这些应用都有着上千万的用户，而针对这些海量的用户编写千万个不同的程序显然是不可能的。唯一有效的解决方案就是开发出能够自我学习，定制出符合你喜好的并据此进行推荐的软件，最后，机器学习算法已经被应用于探究人类的学习方式，并试图理解人类的大脑。我们也将会了解到研究者是如何运用机器学习的工具，来一步步实现人工智能的梦想。</p>
<h3 id="机器学习的分类"><a href="#机器学习的分类" class="headerlink" title="机器学习的分类"></a>机器学习的分类</h3><h4 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h4><p>来个例子：</p>
<p>假设你想预测房价（无比需要啊！)，之前，某学生已经从某地收集了数据集（不是中国的，囧） 其中一个数据集是这样的。</p>
<p><img src="/images/机器学习-监督学习-01.png" alt="机器学习-监督学习-01" title="机器学习-监督学习-01"></p>
<p>这是横坐标，即不同房子的面积，单位平方脚（^-^） 纵轴上是房价，单位 千美元。 根据给定数据，假设你朋友有栋房子，750平尺（70平米） 想知道这房子能卖多少，好卖掉。 那么，学习算法怎么帮你呢？学习算法可以： 绘出一条直线，让直线尽可能匹配到所有数据。</p>
<p><img src="/images/机器学习-监督学习-02.png" alt="机器学习-监督学习-02" title="机器学习-监督学习-02"></p>
<p>于此，看上去，那个房子应该、可能、也许、大概 卖到15万美元（一平米两千刀！）。但这不是唯一的学习算法。可能还有更好的。比如不用直线了，可能平方函数会更好，即二次多项式更符合数据集。如果你这样做，预测结果就应该是20万刀（一平三千刀，涨价好快）。</p>
<p><img src="/images/机器学习-监督学习-03.png" alt="机器学习-监督学习-03" title="机器学习-监督学习-03"></p>
<p>对于应该选择直线还是曲线，不是我们现在关心的问题。我们需要知道的是这是一个监督学习得例子。术语监督学习，意指给出一个算法，需要部分数据集已经有正确答案。比如给定房价数据集， 对于里面每个数据，算法都知道对应的正确房价，即这房子实际卖出的价格。算法的结果就是算出更多的正确价格，比如那个新房子，你朋友想卖的那个。</p>
<p>用更术语的方式来定义，监督学习又叫回归问题，（应该是回归属于监督中的一种）意指要预测一个连续值的输出，比如房价。虽然从技术上，一般把房价记到美分单位。所以实际还是个离散值，但通常把它看作实际数字，是一个标量值，一个连续值的数，而术语回归，意味着要预测这类连续值属性的种类。</p>
<h4 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h4><p>在监督学习中，我们用到的例子中的数据集，每个样本，都已经被标明为正样本或者负样本，即良性或恶性肿瘤。</p>
<p>因此，对于监督学习中的每一个样本，我们已经被清楚地告知了什么是所谓的正确答案，即它们是良性还是恶性。在无监督学习中，我们用的数据会和监督学习里的看起来有些不一样。在无监督学习中，没有属性或标签这一概念，也就是说所有的数据都是一样的，没有区别。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;生活中机器学习的影子&quot;&gt;&lt;a href=&quot;#生活中机器学习的影子&quot; class=&quot;headerlink&quot; title=&quot;生活中机器学习的影子&quot;&gt;&lt;/a&gt;生活中机器学习的影子&lt;/h3&gt;&lt;p&gt;在生活中，每天你都可能在不知不觉中使用了各种各样的机器学习算法。比如，当你每
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/machine/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>运维|安装Octave</title>
    <link href="http://yoursite.com/2018/02/22/%E8%BF%90%E7%BB%B4-%E5%AE%89%E8%A3%85Octave/"/>
    <id>http://yoursite.com/2018/02/22/运维-安装Octave/</id>
    <published>2018-02-22T10:42:45.000Z</published>
    <updated>2018-02-22T03:47:05.440Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-Octave"><a href="#What-is-Octave" class="headerlink" title="What is Octave"></a>What is Octave</h3><p>Octave是一个旨在提供与Matlab语法兼容的开放源代码科学计算及数值分析的工具。Octave是在GNU协议下被开放的，这意味着它一直是可以免费下载的。</p>
<h3 id="在Windows下安装Octave"><a href="#在Windows下安装Octave" class="headerlink" title="在Windows下安装Octave"></a>在Windows下安装Octave</h3><p>使用这个链接来在Windows安装Octave:</p>
<blockquote>
<p><a href="http://wiki.octave.org/Octave_for_Microsoft_Windows" target="_blank" rel="external">http://wiki.octave.org/Octave_for_Microsoft_Windows</a></p>
</blockquote>
<h3 id="在GNU-Linux上安装Octave"><a href="#在GNU-Linux上安装Octave" class="headerlink" title="在GNU/Linux上安装Octave"></a>在GNU/Linux上安装Octave</h3><ul>
<li>在Ubuntu上，你可以使用：<ul>
<li>sudo apt-get update &amp;&amp; sudo apt-get install octave</li>
</ul>
</li>
<li>在Fedora上，你可以使用：<ul>
<li>sudo yum install octave-forge</li>
</ul>
</li>
<li>在Red Hat Enterprise/CentOS上，你可以使用：<ul>
<li>Method One:<ul>
<li><blockquote>
<p>yum install epel-release<br>  yum install octave</p>
</blockquote>
</li>
</ul>
</li>
<li>Method Two:<ul>
<li><blockquote>
<p>wget <a href="http://url/to/latest/epel-release-6-7.noarch.rpm" target="_blank" rel="external">http://url/to/latest/epel-release-6-7.noarch.rpm</a><br> yum localinstall epel-release-6-7.noarch.rpm </p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>在CentOS上，可以到 <a href="https://fedoraproject.org/wiki/EPEL" target="_blank" rel="external">https://fedoraproject.org/wiki/EPEL</a> 中选择自己需要的Octave版本。</p>
<p>Octave is available for Red Hat Enterprise Linux distributions through the <a href="https://fedoraproject.org/wiki/EPEL" target="_blank" rel="external">EPEL</a> repository. This section applies to CentOS, Scientific Linux, and other Red Hat Enterprise rebuild distributions as well.</p>
<blockquote>
<p>参考 <a href="http://wiki.octave.org/Octave_for_GNU/Linux" target="_blank" rel="external">http://wiki.octave.org/Octave_for_GNU/Linux</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-Octave&quot;&gt;&lt;a href=&quot;#What-is-Octave&quot; class=&quot;headerlink&quot; title=&quot;What is Octave&quot;&gt;&lt;/a&gt;What is Octave&lt;/h3&gt;&lt;p&gt;Octave是一个旨在提供与Matlab语法
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Octave" scheme="http://yoursite.com/tags/Octave/"/>
    
  </entry>
  
  <entry>
    <title>PHP|PHP安全性开发</title>
    <link href="http://yoursite.com/2018/02/21/PHP-PHP%E5%AE%89%E5%85%A8%E6%80%A7%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/02/21/PHP-PHP安全性开发/</id>
    <published>2018-02-21T11:28:02.000Z</published>
    <updated>2018-02-24T11:05:07.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>“php给了开发者极大的灵活性，但是这也为安全问题带来了潜在的隐患，近期需要总结一下以往的问题，在这里借翻译一篇文章同时加上自己开发的一些感触总结一下。”</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>当开发一个互联网服务的时候，必须时刻牢记==安全观念==，并在开发的代码中体现。PHP脚本语言对安全问题并不关心，特别是对大多数没有经验的开发者来说。每当你讲任何涉及到钱财事务等交易问题时，需要特别注意安全问题的考虑，例如开发一个论坛或者是一个购物车等。</p>
<h3 id="安全保护一般性要点"><a href="#安全保护一般性要点" class="headerlink" title="安全保护一般性要点"></a>安全保护一般性要点</h3><h4 id="不相信表单"><a href="#不相信表单" class="headerlink" title="不相信表单"></a>不相信表单</h4><p>对于一般的Javascript前台验证，由于无法得知用户的行为，例如关闭了浏览器的javascript引擎，这样通过POST恶意数据到服务器。需要在服务器端进行验证，对每个php脚本验证传递到的数据，防止XSS攻击和SQL注入</p>
<h4 id="不相信用户"><a href="#不相信用户" class="headerlink" title="不相信用户"></a>不相信用户</h4><p>要假设你的网站接收的每一条数据都是存在恶意代码的，存在隐藏的威胁，要对每一条数据都进行清理</p>
<h4 id="服务器方面"><a href="#服务器方面" class="headerlink" title="服务器方面"></a>服务器方面</h4><h5 id="打开php的安全模式"><a href="#打开php的安全模式" class="headerlink" title="打开php的安全模式"></a>打开php的安全模式</h5><p>php的安全模式是个非常重要的内嵌的安全机制，能够控制一些php中的函数，比如system()，同时把很多文件操作函数进行了权限控制，也不允许对某些关键文件的文件，比如/etc/passwd，但是默认的php.ini是没有打开安全模式的，我们把它打开：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">safe_mode = on</div></pre></td></tr></table></figure></p>
<h5 id="用户组安全"><a href="#用户组安全" class="headerlink" title="用户组安全"></a>用户组安全</h5><p>当safe_mode打开时，safe_mode_gid被关闭，那么php脚本能够对文件进行访问，而且相同组的用户也能够对文件进行访问。</p>
<p>建议设置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">safe_mode_gid = off</div></pre></td></tr></table></figure></p>
<p>如果不进行设置，可能我们无法对我们服务器网站目录下的文件进行操作了，比如我们需要对文件进行操作的时候。</p>
<p>安全模式下执行程序主目录如果安全模式打开了，但是却是要执行某些程序的时候，可以指定要执行程序的主目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">safe_mode_exec_dir = D:/usr/bin</div></pre></td></tr></table></figure></p>
<p>一般情况下是不需要执行什么程序的，所以推荐不要执行系统程序目录，可以指向一个目录，然后把需要执行的程序拷贝过去，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">safe_mode_exec_dir = D:/tmp/cmd</div></pre></td></tr></table></figure></p>
<p>但是，我更推荐不要执行任何程序，那么就可以指向我们网页目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">safe_mode_exec_dir = D:/usr/www</div></pre></td></tr></table></figure></p>
<p>安全模式下包含文件如果要在安全模式下包含某些公共文件，那么就修改一下选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">safe_mode_include_dir = D:/usr/www/include/</div></pre></td></tr></table></figure></p>
<p>其实一般php脚本中包含文件都是在程序自己已经写好了，这个可以根据具体需要设置。</p>
<h5 id="控制php脚本能访问的目录"><a href="#控制php脚本能访问的目录" class="headerlink" title="控制php脚本能访问的目录"></a>控制php脚本能访问的目录</h5><p>使用open_basedir选项能够控制PHP脚本只能访问指定的目录，这样能够避免PHP脚本访问不应该访问的文件，一定程度上限制了phpshell的危害，我们一般可以设置为只能访问网站目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open_basedir = D:/usr/www</div></pre></td></tr></table></figure></p>
<h5 id="关闭危险函数"><a href="#关闭危险函数" class="headerlink" title="关闭危险函数"></a>关闭危险函数</h5><p>如果打开了安全模式，那么函数禁止是可以不需要的，但是我们为了安全还是考虑进去。比如，<br>我们觉得不希望执行包括system()等在那的能够执行命令的php函数，或者能够查看php信息的<br>phpinfo()等函数，那么我们就可以禁止它们：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">disable_functions = system,passthru,exec,shell_exec,popen,phpinfo</div></pre></td></tr></table></figure></p>
<p>如果你要禁止任何文件和目录的操作，那么可以关闭很多文件操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">disable_functions = chdir,chroot,dir,getcwd,opendir,readdir,scandir,fopen,unlink,delete,copy,mkdir, rmdir,rename,file,file_get_contents,fputs,fwrite,chgrp,chmod,chown</div></pre></td></tr></table></figure></p>
<p>以上只是列了部分不叫常用的文件处理函数，你也可以把上面执行命令函数和这个函数结合，就能够抵制大部分的phpshell了。</p>
<h5 id="关闭PHP版本信息"><a href="#关闭PHP版本信息" class="headerlink" title="关闭PHP版本信息"></a>关闭PHP版本信息</h5><p>关闭PHP版本信息在http头中的泄漏我们为了防止黑客获取服务器中php版本的信息，可以关闭该信息斜路在http头中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expose_php = Off</div></pre></td></tr></table></figure></p>
<p>比如黑客在 telnet www.12345.com 80 的时候，那么将无法看到PHP的信息。</p>
<h5 id="关闭注册全局变量"><a href="#关闭注册全局变量" class="headerlink" title="关闭注册全局变量"></a>关闭注册全局变量</h5><p>在PHP中提交的变量，包括使用POST或者GET提交的变量，都将自动注册为全局变量，能够直接访问，这是对服务器非常不安全的，所以我们不能让它注册为全局变量，就把注册全局变量选项关闭：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">register_globals = Off</div></pre></td></tr></table></figure></p>
<p>当然，如果这样设置了，那么获取对应变量的时候就要采用合理方式，比如获取GET提交的变量var，那么就要用$_GET[‘var’]来进行获取，这个php程序员要注意。</p>
<h5 id="打开magic-quotes-gpc来防止SQL注入"><a href="#打开magic-quotes-gpc来防止SQL注入" class="headerlink" title="打开magic_quotes_gpc来防止SQL注入"></a>打开magic_quotes_gpc来防止SQL注入</h5><p>SQL注入是非常危险的问题，小则网站后台被入侵，重则整个服务器沦陷，所以一定要小心。php.ini中有一个设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">magic_quotes_gpc = Off</div></pre></td></tr></table></figure></p>
<p>这个默认是关闭的，如果它打开后将自动把用户提交对sql的查询进行转换，比如把 ‘ 转为 &#39;等，这对防止sql注射有重大作用。所以我们推荐设置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">magic_quotes_gpc = On</div></pre></td></tr></table></figure></p>
<h5 id="错误信息控制"><a href="#错误信息控制" class="headerlink" title="错误信息控制"></a>错误信息控制</h5><p>一般php在没有连接到数据库或者其他情况下会有提示错误，一般错误信息中会包含php脚本当前的路径信息或者查询的SQL语句等信息，这类信息提供给黑客后，是不安全的，所以一般服务器建议禁止错误提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">display_errors = Off</div></pre></td></tr></table></figure></p>
<p>如果你却是是要显示错误信息，一定要设置显示错误的级别，比如只显示警告以上的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error_reporting = E_WARNING &amp; E_ERROR</div></pre></td></tr></table></figure></p>
<p>当然，我还是建议关闭错误提示。</p>
<p><strong>同时，错误日志建议在关闭display_errors后能够把错误信息记录下来，便于查找服务器运行的原因</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log_errors = On</div></pre></td></tr></table></figure></p>
<p>同时也要设置错误日志存放的目录，建议根apache的日志存在一起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error_log = D:/usr/local/apache2/logs/php_error.log</div></pre></td></tr></table></figure></p>
<p>注意：日志文件必须允许apache用户的和组具有写的权限。</p>
<h4 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h4><p>对于操作数据库的SQL语句，需要特别注意安全性，因为用户可能输入特定语句使得原有的SQL语句改变了功能。类似下面的例子：</p>
<blockquote>
<p>$sql = “select * from pinfo where product = ‘$product’”;</p>
</blockquote>
<p>此时如果用户输入的$product参数为：</p>
<blockquote>
<p>39’; DROP pinfo; SELECT ‘FOO</p>
</blockquote>
<p>那么最终SQL语句就变成了如下的样子：</p>
<blockquote>
<p>select product from pinfo where product = ‘39’; DROP pinfo; SELECT ‘FOO’</p>
</blockquote>
<p>这样就会变成三条SQL语句，会造成pinfo表被删除，这样会造成严重的后果。</p>
<p>这个问题可以简单的使用PHP的内置函数解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$sql = &apos;Select * from pinfo where product = &apos;&quot;&apos;</div><div class="line">mysql_real_escape_string($product) . &apos;&quot;&apos;;</div></pre></td></tr></table></figure></p>
<h5 id="如何预防"><a href="#如何预防" class="headerlink" title="如何预防"></a>如何预防</h5><h6 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h6><p>主要就是一些数据没有经过严格的验证，然后直接拼接 SQL 去查询。导致漏洞产生，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$id  = $_GET[&apos;id&apos;];</div><div class="line">$sql = &quot;SELECT name FROM users WHERE id = $id&quot;;</div></pre></td></tr></table></figure></p>
<p>因为没有对 $_GET[‘id’] 做数据类型验证，注入者可提交任何类型的数据，比如 “ and 1= 1 or “ 等不安全的数据。如果按照下面方式写，就安全一些。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$id  = intval($_GET[&apos;id&apos;]);</div><div class="line">$sql = &quot;SELECT name FROM users WHERE id = $id&quot;;</div></pre></td></tr></table></figure></p>
<p>把 id 转换成 int 类型，就可以去掉不安全的东西。</p>
<h6 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h6><p>防止注入的第一步就是验证数据，可以根据相应类型进行严格的验证。比如 int 类型直接同过 intval 进行转换就行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$id =intval( $_GET[&apos;id&apos;]);</div></pre></td></tr></table></figure></p>
<p>字符处理起来比较复杂些，首先通过 sprintf 函数格式话输出，确保它是一个字符串。然后通过一些安全函数去掉一些不合法的字符，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$str = addslashes(sprintf(&quot;%s&quot;,$str));</div></pre></td></tr></table></figure></p>
<p>也可以用 mysqli_real_escape_string　函数替代addslashes这样处理以后会比较安全。当然还可以进一步去判断字符串长度，去防止「缓冲区溢出攻击」比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$str = addslashes(sprintf(&quot;%s&quot;,$str));　</div><div class="line">$str = substr($str,0,40); //最大长度为40</div></pre></td></tr></table></figure></p>
<h6 id="参数化绑定"><a href="#参数化绑定" class="headerlink" title="参数化绑定"></a>参数化绑定</h6><p>参数化绑定，防止 SQL 注入的又一道屏障。php MySQLi 和 PDO 均提供这样的功能。比如 MySQLi 可以这样去查询：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$mysqli = new mysqli(&apos;localhost&apos;, &apos;my_user&apos;, &apos;my_password&apos;, &apos;world&apos;);</div><div class="line">$stmt = $mysqli-&gt;prepare(&quot;INSERT INTO my_table VALUES (?, ?, ?, ?)&quot;);</div><div class="line">$code = &apos;DEU&apos;;</div><div class="line">$language = &apos;Bavarian&apos;;</div><div class="line">$official = &quot;F&quot;;</div><div class="line">$percent = 11.2;</div><div class="line">$stmt-&gt;bind_param(&apos;sssd&apos;, $code, $language, $official, $percent);</div></pre></td></tr></table></figure>
<p>PDO 的更是方便，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/* Execute a prepared statement by passing an array of values */</div><div class="line">$sql = &apos;SELECT name, colour, calories  </div><div class="line">FROM fruit</div><div class="line">WHERE calories &lt; :calories AND colour = :colour&apos;; $sth = $dbh-&gt;prepare($sql, array(PDO::ATTR_CURSOR =&gt; PDO::CURSOR_FWDONLY));</div><div class="line">$sth-&gt;execute(array(&apos;:calories&apos; =&gt; 150, &apos;:colour&apos; =&gt; &apos;red&apos;));</div><div class="line">$red = $sth-&gt;fetchAll();</div><div class="line">$sth-&gt;execute(array(&apos;:calories&apos; =&gt; 175, &apos;:colour&apos; =&gt; &apos;yellow&apos;));</div><div class="line">$yellow = $sth-&gt;fetchAll();</div></pre></td></tr></table></figure></p>
<p>我们多数使用 php 的框架进行编程，所以最好不要自己拼写 SQL，按照框架给定参数绑定进行查询。遇到较为复杂的 SQL 语句，一定要自己拼写的时候，一定要注意严格的判断。没有用 PDO 或者 MySQLi 也可以自己写个 prepared，比如 wordprss db 查询语句，可以看出也是经过严格的类型验证。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">function prepare( $query, $args ) &#123;</div><div class="line">    if ( is_null( $query ) )</div><div class="line">         return;</div><div class="line">    // This is not meant to be foolproof -- </div><div class="line">           but it will catch obviously incorrect usage.</div><div class="line">    if ( strpos( $query, &apos;%&apos; ) === false ) &#123;</div><div class="line">         _doing_it_wrong( &apos;wpdb::prepare&apos; , </div><div class="line">         sprintf ( __( &apos;The query argument of %s</div><div class="line">                 must have a placeholder.&apos; ), &apos;wpdb::prepare()&apos; ), &apos;3.9&apos; );</div><div class="line">   &#125;</div><div class="line">    $args = func_get_args();</div><div class="line">    array_shift( $args );</div><div class="line">    // If args were passed as an array (as in vsprintf), move them up</div><div class="line">    if ( isset( $args[ 0] ) &amp;&amp; is_array( $args[0]) )</div><div class="line">         $args = $args [0];</div><div class="line">    $query = str_replace( &quot;&apos;%s&apos;&quot;, &apos;%s&apos; , $query ); </div><div class="line">        // in case someone mistakenly already singlequoted it</div><div class="line">    $query = str_replace( &apos;&quot;%s&quot;&apos;, &apos;%s&apos; , $query ); </div><div class="line">        // doublequote unquoting</div><div class="line">    $query = preg_replace( &apos;|(?&lt;!%)%f|&apos; , &apos;%F&apos; , $query ); </div><div class="line">        // Force floats to be locale unaware</div><div class="line">    $query = preg_replace( &apos;|(?&lt;!%)%s|&apos;, &quot;&apos;%s&apos;&quot; , $query ); </div><div class="line">        // quote the strings, avoiding escaped strings like %%s</div><div class="line">    array_walk( $args, array( $this, &apos;escape_by_ref&apos; ) );</div><div class="line">    return @ vsprintf( $query, $args );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="防止基本的XSS攻击"><a href="#防止基本的XSS攻击" class="headerlink" title="防止基本的XSS攻击"></a>防止基本的XSS攻击</h4><p>XSS攻击不像其他攻击，这种攻击在客户端进行，最基本的XSS工具就是<strong>防止一段javascript脚本在用户待提交的表单页面，将用户提交的数据和cookie偷取过来</strong>。</p>
<p>XSS工具比SQL注入更加难以防护，各大公司网站都被XSS攻击过，虽然这种攻击与php语言无关，但可以使用php来筛选用户数据达到保护用户数据的目的，这里主要使用的是对用户的数据进行过滤，一般过滤掉HTML标签，特别是a标签。下面是一个普通的过滤方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function transform_HTML($string, $length = null) &#123;</div><div class="line">    // Helps prevent XSS attacks</div><div class="line">    // Remove dead space.</div><div class="line">    $string = trim($string);</div><div class="line">    // Prevent potential Unicode codec problems.</div><div class="line">    $string = utf8_decode($string);</div><div class="line">    // HTMLize HTML-specific characters.</div><div class="line">    $string = htmlentities($string, ENT_NOQUOTES);</div><div class="line">    $string = str_replace(&quot;#&quot;, &quot;#&quot;, $string);</div><div class="line">    $string = str_replace(&quot;%&quot;, &quot;%&quot;, $string);</div><div class="line">    $length = intval($length);</div><div class="line">    if ($length &gt; 0) &#123;</div><div class="line">        $string = substr($string, 0, $length);</div><div class="line">    &#125;</div><div class="line">    return $string;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个函数将HTML的特殊字符转换为了HTML实体，浏览器在渲染这段文本的时候以纯文本形式显示。如bold会被显示为：</p>
<strong>BoldText</strong>

<p>上述函数的核心就是==htmlentities函数==，这个函数将html特殊标签转换为html实体字符，这样可以过滤大部分的XSS攻击。</p>
<p>但是对于有经验的XSS攻击者，有更加巧妙的办法进行攻击：将他们的恶意代码使用十六进制或者utf-8编码，而不是普通的ASCII文本，例如可以使用下面的方式进行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;http://host/a.php?variable=%22%3e %3c%53%43%52%49%50%54%3e%44%6f%73%6f%6d%65%74%68%69%6e%67%6d%61%6c%69%63%69%6f%75%73%3c%2f%53%43%52%49%50%54%3e&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>这样浏览器渲染的结果其实是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;http://host/a.php?variable=&quot;&gt;                   &lt;SCRIPT&gt;Dosomethingmalicious&lt;/SCRIPT&gt;</div><div class="line">&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>这样就达到了攻击的目的。为了防止这种情况，需要在transform_HTML函数的基础上再将#和%转换为他们对应的实体符号，同时加上了$length参数来限制提交的数据的最大长度。</p>
<h4 id="使用SafeHTML防止XSS攻击"><a href="#使用SafeHTML防止XSS攻击" class="headerlink" title="使用SafeHTML防止XSS攻击"></a>使用SafeHTML防止XSS攻击</h4><p>上述关于XSS攻击的防护非常简单，但是不包含用户的所有标记，同时有上百种绕过过滤函数提交javascript代码的方法，也没有办法能完全阻止这个情况。</p>
<p>目前，没有一个单一的脚本能保证不被攻击突破，但是总有相对来说防护程度更好的。一共有两个安全防护的方式：白名单和黑名单。其中白名单更加简单和有效。</p>
<p>一种白名单解决方案就是SafeHTML，它足够智能能够识别有效的HTML，然后就可以去除任何危险的标签。这个需要基于HTMLSax包来进行解析。</p>
<blockquote>
<p>安装使用SafeHTML的方法：<br>1、前往<a href="http://pixel-apes.com/safehtml/?page=safehtml" target="_blank" rel="external">http://pixel-apes.com/safehtml/?page=safehtml</a> 下载最新的SafeHTML<br>2、将文件放入服务器的classes 目录，这个目录包含所有的SafeHTML和HTMLSax库<br>3、在自己的脚本中包含SafeHTML类文件<br>4、建立一个SafeHTML对象<br>5、使用parse方法进行过滤</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    /* If you&apos;re storing the HTMLSax3.php in the /classes directory, along</div><div class="line">    with the safehtml.php script, define XML_HTMLSAX3 as a null string. */</div><div class="line">    define(XML_HTMLSAX3, &apos;&apos;);</div><div class="line">    // Include the class file.</div><div class="line">    require_once(&apos;classes/safehtml.php&apos;);</div><div class="line">    // Define some sample bad code.</div><div class="line">    $data = &quot;This data would raise an alert &lt;script&gt;alert(&apos;XSS Attack&apos;)&lt;/script&gt;&quot;;</div><div class="line">    // Create a safehtml object.</div><div class="line">    $safehtml = new safehtml();</div><div class="line">    // Parse and sanitize the data.</div><div class="line">    $safe_data = $safehtml-&gt;parse($data);</div><div class="line">    // Display result.</div><div class="line">    echo &apos;The sanitized data is &lt;br /&gt;&apos; . $safe_data;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>SafeHTML并不能完全防止XSS攻击，只是一个相对复杂的脚本来检验的方式。</p>
<p>使用单向HASH加密方式来保护数据</p>
<p>单向hash加密保证对每个用户的密码都是唯一的，而且不能被破译的，只有最终用户知道密码，系统也是不知道原始密码的。这样的一个好处是在系统被攻击后攻击者也无法知道原始密码数据。</p>
<p>加密和Hash是不同的两个过程。与加密不同，Hash是无法被解密的，是单向的；同时两个不同的字符串可能会得到同一个hash值，并不能保证hash值的唯一性。</p>
<p>MD5函数处理过的hash值基本不能被破解，但是总是有可能性的，而且网上也有MD5的hash字典。</p>
<h4 id="使用mcrypt加密数据"><a href="#使用mcrypt加密数据" class="headerlink" title="使用mcrypt加密数据"></a>使用mcrypt加密数据</h4><p>MD5 hash函数可以在可读的表单中显示数据，但是对于存储用户的信用卡信息的时候，需要进行加密处理后存储，并且需要之后进行解密。</p>
<p>最好的方法是使用mcrypt模块，这个模块包含了超过30中加密方式来保证只有加密者才能解密数据。</p>
<blockquote>
<p>mcrypt函数需要以下信息：<br>1、待加密数据<br>2、用来加密和解密数据的key<br>3、用户选择的加密数据的特定算法（cipher：如 MCRYPT_TWOFISH192,MCRYPT_SERPENT_256， MCRYPT_RC2, MCRYPT_DES, and MCRYPT_LOKI97）<br>4、用来加密的模式<br>5、加密的种子，用来起始加密过程的数据，是一个额外的二进制数据用来初始化加密算法<br>6、加密key和种子的长度，使用mcrypt_get_key_size函数和mcrypt_get_block_size函数可以获取</p>
</blockquote>
<p>如果数据和key都被盗取，那么攻击者可以遍历ciphers寻找开行的方式即可，因此我们需要将加密的key进行MD5一次后保证安全性。同时由于mcrypt函数返回的加密数据是一个二进制数据，这样保存到数据库字段中会引起其他错误，使用了base64encode将这些数据转换为了十六进制数方便保存。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>安全性很重要，也可以看出一个人基本功，项目漏洞百出，扩展性和可维护性再好也没有用。平时多留意，树立安全意识，养成一种习惯，一些基本的安全当然也不会占用用 coding 的时间。养成这个习惯，即便在项目急，时间短的情况一下，依然可以做的质量很高。不要等到自己以后负责的东西，数据库都被拿走了，造成损失才重视。共勉！</p>
<p>虽然国内很多PHP程序员仍在依靠addslashes防止SQL注入，还是建议大家加强中文防止SQL注入的检查。addslashes的问题在于黑客可以用0xbf27来代替单引号，而addslashes只是将0xbf27修改为0xbf5c27，成为一个有效的多字节字符，其中的0xbf5c仍会被看作是单引号，所以addslashes无法成功拦截。</p>
<p>当然addslashes也不是毫无用处，它是用于单字节字符串的处理，多字节字符还是用mysql_real_escape_string吧。</p>
<blockquote>
<p>引用 <a href="https://www.daijiale.cn/back-end-dev/【php】php安全性开发.html" target="_blank" rel="external">https://www.daijiale.cn/back-end-dev/【php】php安全性开发.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;“php给了开发者极大的灵活性，但是这也为安全问题带来了潜在的隐患，近期需要总结一下以往的问题，在这里借翻译一篇文
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>展望|2018</title>
    <link href="http://yoursite.com/2018/02/20/%E5%B1%95%E6%9C%9B-2018/"/>
    <id>http://yoursite.com/2018/02/20/展望-2018/</id>
    <published>2018-02-19T23:18:19.000Z</published>
    <updated>2018-02-19T15:18:19.513Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>爬虫|解读http的秘密&lt;进阶篇&gt;</title>
    <link href="http://yoursite.com/2018/02/12/%E7%88%AC%E8%99%AB-%E8%A7%A3%E8%AF%BBhttp%E7%9A%84%E7%A7%98%E5%AF%86-%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>http://yoursite.com/2018/02/12/爬虫-解读http的秘密-进阶篇/</id>
    <published>2018-02-12T15:47:52.000Z</published>
    <updated>2018-02-12T08:20:06.118Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇我们介绍了爬虫中HTTP的基础内容，相信看过的朋友们应该对HTTP已经有个初步的认识了。本篇博主将分享一些HTTP的高级内容，以及在爬虫中的应用，让大家更深入理解。这些内容包括：</p>
<ul>
<li>Cookie解读</li>
<li>Session解读</li>
<li>HTTPs解读</li>
</ul>
<h3 id="Cookie解读"><a href="#Cookie解读" class="headerlink" title="Cookie解读"></a>Cookie解读</h3><h4 id="什么是Cookie？"><a href="#什么是Cookie？" class="headerlink" title="什么是Cookie？"></a>什么是Cookie？</h4><p>==Cookie==原意是”小甜点”的意思，但是在互联网上被用作储存在用户本地终端上的数据。</p>
<p>百度百科是这么解释的：</p>
<blockquote>
<p>Cookie，有时也用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 session<br>跟踪而储存在用户本地终端上的数据（通常经过加密）。定义于 RFC2109 和 2965 中的都已废弃，最新取代的规范是<br>RFC6265。（可以叫做浏览器缓存）</p>
</blockquote>
<h4 id="为什么要使用Cookie？"><a href="#为什么要使用Cookie？" class="headerlink" title="为什么要使用Cookie？"></a>为什么要使用Cookie？</h4><p>首先，需要明确一个很重要的概念：HTTP是一个无状态的协议。</p>
<p>什么意思呢？举一个简单的例子来理解一下。</p>
<h5 id="lt-应用一-gt"><a href="#lt-应用一-gt" class="headerlink" title="&lt;应用一&gt;"></a>&lt;应用一&gt;</h5><p>比如，我们网上购物的时候，浏览了几个网页，选了几样商品放入了购物车。但是由于HTTP的无状态特点，当我们结账的时候服务器并不知道操作的用户是谁，即无法记录上下文的信息，这严重的妨碍了web应用程序交互式的操作。</p>
<p>为了解决HTTP的无状态的问题，Cookie就应运而生了。Cookie绕开了HTTP的无状态性，提供了一种”额外手段”维护了用户跟服务器会话中的状态。<strong>说白了，Cookie就是一小段数据储存在本地，记录并标识了用户身份，以便服务器辨认。</strong>这其实相当于让一个失忆的人从此有了记忆。因此，无论当我们购买几次商品，退货，结账等，服务器都能通过这个标识来判断出你是谁。</p>
<p>还有一个常见的例子，就是==登录==。</p>
<h4 id="lt-应用二-gt"><a href="#lt-应用二-gt" class="headerlink" title="&lt;应用二&gt;"></a>&lt;应用二&gt;</h4><p>当我们登录某个网站输入用户名和密码后，一般浏览器会提示是”是否保存密码”。我们通常会勾选保存，那么这样带来的好处就是在以后的一段时间我们访问该网站都会自动登录而不必每次都去敲用户名和密码了。</p>
<p>也正是这个原因，简化了爬虫中模拟登录的问题，每次登录只要post一个Cookie信息就可以了，而避免了每次都post登录信息。当然，这只针对一部分网站而言，一些复杂的网站会定期的变换一些算法，使得Cookie频繁的失效，这时候就需要post登录信息了或者模拟找到算法的规律。</p>
<p>关于==爬虫模拟登录==的详细内容后续后专门开一篇和大家分享。</p>
<h3 id="Cookie的分类"><a href="#Cookie的分类" class="headerlink" title="Cookie的分类"></a>Cookie的分类</h3><p>Cookie有两种类型：持久化Cookie，非持久化Cookie。</p>
<ul>
<li>持久化Cookie：表示Cookie会保存到本地磁盘上，关闭浏览器再次打开，Cookie依然有效直到设置的expire时间。</li>
<li>非持久化Cookie：表示Cookie会在本地内存中，生命周期会受浏览器开关状态影响，只要浏览器关闭，Cookie则失效。</li>
</ul>
<h3 id="HTTP-Cookie的交互过程"><a href="#HTTP-Cookie的交互过程" class="headerlink" title="HTTP+Cookie的交互过程"></a>HTTP+Cookie的交互过程</h3><p>下面是HTTP请求中使用Cookie所实现的整个web交互过程。</p>
<p><img src="/images/爬虫-http-07.jpg" alt="爬虫--cookie" title="爬虫-http-07"></p>
<p>博主以一个==访问豆瓣==的实际例子作为上述过程的具体说明和描述。</p>
<h4 id="步骤1的请求头"><a href="#步骤1的请求头" class="headerlink" title="步骤1的请求头"></a>步骤1的请求头</h4><p><img src="/images/爬虫-http-08.jpg" alt="爬虫--cookie" title="爬虫-http-08"></p>
<p>看到请求头里面没有Cookie，只是常规的头域字段信息。</p>
<h4 id="步骤2-gt-3的响应头"><a href="#步骤2-gt-3的响应头" class="headerlink" title="步骤2-&gt;3的响应头"></a>步骤2-&gt;3的响应头</h4><p><img src="/images/爬虫-http-09.jpg" alt="爬虫--cookie" title="爬虫-http-09"></p>
<p>服务器根据==POST请求==（用户名密码等）生成一个Cookie，并通过响应头的==set-Cookie字段==返回此Cookie信息。</p>
<h4 id="步骤5的请求头"><a href="#步骤5的请求头" class="headerlink" title="步骤5的请求头"></a>步骤5的请求头</h4><p><img src="/images/爬虫-http-10.jpg" alt="爬虫--cookie" title="爬虫-http-10"></p>
<p>再一次刷新页面的请求头中就有了获取Cookie信息。</p>
<h4 id="步骤7的响应头"><a href="#步骤7的响应头" class="headerlink" title="步骤7的响应头"></a>步骤7的响应头</h4><p><img src="/images/爬虫-http-11.jpg" alt="爬虫--cookie" title="爬虫-http-11"></p>
<p>第二次的响应头==无set-Cookie==字段信息，因为服务器已经辨别了这个用户刚刚提交的Cookie信息。</p>
<h3 id="5-Cookie的格式和属性"><a href="#5-Cookie的格式和属性" class="headerlink" title="5.Cookie的格式和属性"></a>5.Cookie的格式和属性</h3><p>==格式==</p>
<ul>
<li>客户端发送Cookie（键值对）：Cookie：key1=value1; key2=value2; key3=value3</li>
<li>服务器响应Cookie：Set-Cookie: name=value；expires=date；path=path；domain=domain_name；secure</li>
</ul>
<p>==属性==</p>
<ul>
<li>name：为一个Cookie的名称。</li>
<li>domain：为可以访问此Cookie的域名，该域名可以使多个web服务器共享Cookie。</li>
<li>path：表示Cookie所在目录，“/”表示根目录。</li>
<li>expires/max-age：为Cookie的生命周期。若设置该值，则到此时间Cookie会失效。若没有设置该值，默认与session一起失效。浏览器关闭，Cookie失效。</li>
<li>secure：布尔值，指定Cookie的传输方式，默认是不安全的HTTP连接。</li>
<li>http：Cookie的httponly属性，若此属性为true，则只能在http的请求头中携带Cookie信息。</li>
</ul>
<h3 id="Session解读"><a href="#Session解读" class="headerlink" title="Session解读"></a>Session解读</h3><h4 id="什么是Session？"><a href="#什么是Session？" class="headerlink" title="什么是Session？"></a>什么是Session？</h4><p>百度百科是这么解释的：</p>
<blockquote>
<p>Session: 在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p>
</blockquote>
<h4 id="为什么要使用Session？"><a href="#为什么要使用Session？" class="headerlink" title="为什么要使用Session？"></a>为什么要使用Session？</h4><p>同样是因为HTTP是一个无状态协议。Session和Cookie的存在都是为了解决这个问题的。</p>
<p>由于服务器本身并不会维持用户的上下文，因此为了实现会话的跟踪，不得不想出一种办法。<br>==Session正是一种保存上下文的机制==，对于每一个用户来讲，用户所产生的变量值都保存在了服务器端，这样就使得整个会话都衔接的上，而每个用户有自己独一无二的ID，我们叫做==SessionID==。</p>
<h4 id="Session和Cookie有什么联系？"><a href="#Session和Cookie有什么联系？" class="headerlink" title="Session和Cookie有什么联系？"></a>Session和Cookie有什么联系？</h4><p>这个要从SessionID说起。我们上面提到服务器会每个用户创建一个SessionID，那么我们该如何使用它呢?</p>
<h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>这是我们最常用的方式，Cookie相当于一个SessionID的高级应用，是SessionID的载体或者容器。我们说Cookie可以用来识别用户身份，也是因为SessionID的缘故。</p>
<p><strong>因此，可以说Session是服务端的解决方案，实现了web的会话跟踪，而Cookie是客户端的解决方案，实现了跟踪过程的用户识别。</strong></p>
<p>Session是真正解决HTTP无状态的方案，而Cookie只是实现了Session过程中的SessionID方式。</p>
<h5 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h5><p>Cookie的使用给用户带来了极大的方便，以及很好的用户体验。但是Cookie存在着一些安全问题，Cookie储存在本地会很大程度暴露用户信息。因此，用户可以选择禁用Cookie。</p>
<p>那么另一种实现SessionID的方式就是URL重写。URL重写就是把SessionID附加在URL里，可以作为URL路径附加信息或者查询字符串附加在URL后面。</p>
<p><strong>就是说用户所有的请求的URL中都要有==sesssionID==这个东西，否则无法保持会话的持久状态。</strong></p>
<h5 id="表单隐藏字段"><a href="#表单隐藏字段" class="headerlink" title="表单隐藏字段"></a>表单隐藏字段</h5><p>服务器会修改表单，设置一个SessionID的隐藏字段，用户需要将SessionID填写到隐藏字段中提交表单，以让服务器知道用户身份。</p>
<p><strong>隐藏字段也是爬虫中的反爬策略之一</strong>，如果我们爬虫提交的表单没有填写隐藏字段，那么服务器会认为这是一种爬虫行为而禁掉，或者提交的内容不正确也可能造成同样的后果。因此，每次爬取前有必要查看一下是否存在隐藏字段。当然，关于隐藏字段还有更复杂的玩法这里就不详细介绍了。</p>
<h4 id="Session的关闭"><a href="#Session的关闭" class="headerlink" title="Session的关闭"></a>Session的关闭</h4><h5 id="关闭浏览器"><a href="#关闭浏览器" class="headerlink" title="关闭浏览器"></a>关闭浏览器</h5><p>有时候我们可能会误以为关闭了浏览器，Session就消失了。其实，Session并没有消失（session存储在服务器中），如果消失，消失的也是Cookie（如果储存在内存的话）。</p>
<p><strong>Session是储存在服务端的，注意是服务端</strong>。而服务端是不会知道浏览器什么时候关闭了的，但是服务端又不能一直开着Session，那样会损耗服务器资源。因此，为了解决这个问题，服务端一般会设置Session超时，通过检测用户活动状态来判断是否超时。如果超时，那么整个会话Session才真正消失，不然还是会开着直到超时。</p>
<p>如果Cookie是本地储存在磁盘上的，在我们关闭浏览器的很短一段时间内再次打开浏览器，还是会回到刚才那个Session会话。但是如果Cookie储存在内存中，再次打开时浏览器已经忘记了Cookie，那么就无法和刚才的会话连接上了。</p>
<p>结论是：==关闭浏览器并不会使服务端Session对象消失。==</p>
<h5 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h5><p>注销和关闭浏览器有着本质的区别，注销实际上会使Session对象消失。就比如我们在网页上点击注销一样，用户信息就都被清空了。如果需要连接Session，需要重新创建Session。</p>
<p>结论是：==注销会使服务端Session对象消失。==</p>
<h3 id="HTTPs解读"><a href="#HTTPs解读" class="headerlink" title="HTTPs解读"></a>HTTPs解读</h3><h4 id="什么是HTTPs"><a href="#什么是HTTPs" class="headerlink" title="什么是HTTPs?"></a>什么是HTTPs?</h4><blockquote>
<p>HTTPS（全称：Hyper Text Transfer Protocol over Secure SocketLayer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。<br>它是一个URIscheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器NetscapeNavigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p>
</blockquote>
<h4 id="HTTPs与HTTP的区别"><a href="#HTTPs与HTTP的区别" class="headerlink" title="HTTPs与HTTP的区别"></a>HTTPs与HTTP的区别</h4><blockquote>
<p>超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息。HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此HTTP协议不适合传输一些敏感信息，比如信用卡号、密码等。<br>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。<br>HTTPS和HTTP的区别主要为以下四点：</p>
<ul>
<li>一、https协议需要到ca申请证书，一般免费证书很少，需要交费。</li>
<li>二、http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</li>
<li>三、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li>
<li>四、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li>
</ul>
</blockquote>
<h4 id="HTTPs对爬虫的影响"><a href="#HTTPs对爬虫的影响" class="headerlink" title="HTTPs对爬虫的影响"></a>HTTPs对爬虫的影响</h4><p>乍一看感觉HTTPs有点像反爬的手段，通过上面的了解，我们发现HTTPs是对服务器端的验证，通过CA证书保证了我们访问的网站是有身份的，而非其他假网站。相反，我们爬虫模拟的是客户端，并不受HTTPs的限制。</p>
<p><strong>因此，HTTPs不影响我们爬虫</strong>。</p>
<p>但是，我们在爬虫的过程仍然也会遇到过类似SSL不通过之类的错误。比如，博主以前用requests访问HTTPs的时候遇到过这样的坑，但最后究其原因是同时打开了fiddler造成的。</p>
<blockquote>
<p>转载 <a href="https://segmentfault.com/a/1190000013074959" target="_blank" rel="external">https://segmentfault.com/a/1190000013074959</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇我们介绍了爬虫中HTTP的基础内容，相信看过的朋友们应该对HTTP已经有个初步的认识了。本篇博主将分享一些HTTP的高级内容，以及在爬虫中的应用，让大家更深入理解。这些内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie解读&lt;/li&gt;
&lt;li&gt;Session解读&lt;/li
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫|解读http的秘密&lt;基础篇&gt;</title>
    <link href="http://yoursite.com/2018/02/12/%E7%88%AC%E8%99%AB-%E8%A7%A3%E8%AF%BBhttp%E7%9A%84%E7%A7%98%E5%AF%86-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2018/02/12/爬虫-解读http的秘密-基础篇/</id>
    <published>2018-02-12T14:57:36.000Z</published>
    <updated>2018-02-12T07:44:58.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>在学习爬虫的过程中，相信大家对HTTP这个词已经不陌生了，它好像从未离开过我们的视线。被迫所需，我们每次都要使用开发者工具去查看请求头，响应头，以及头中的各个字段，使用别人封装好的模块填入信息，敲几行代码就解决了。面对简单的爬取任务，我们也许根本不用管它是什么，但可能等我们真正遇到问题的时候，却无从下手。</p>
<p>认识并深刻理解HTTP对于爬虫的实现过程是非常有帮助的。为了更好的让大家理解爬虫中的HTTP，博主将分为两篇对HTTP进行讲述，&lt;基础篇&gt; 和 &lt;高阶篇&gt;。本篇为基础篇，将从以下几个部分进行阐述。</p>
<ul>
<li>什么是HTTP</li>
<li>一个完整的HTTP请求过程</li>
<li>HTTP请求报文</li>
</ul>
<h3 id="什么是HTTP？"><a href="#什么是HTTP？" class="headerlink" title="什么是HTTP？"></a>什么是HTTP？</h3><h4 id=""><a href="#" class="headerlink" title=""></a><http的介绍></http的介绍></h4><p>引自百度百科的权威回答：</p>
<blockquote>
<p>超文本传输协议（HTTP，HyperText Transfer Protocol)<br>是互联网上应用最为广泛的一种网络协议。所有WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。<br>1960年美国人TedNelson构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了HTTP超文本传输协议标准架构的发展根基。TedNelson组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（InternetEngineering Task Force ）共同合作研究，最终发布了一系列的RFC，其中著名的RFC 2616定义了HTTP 1.1。<br><strong>HTTP协议是用于从WWW服务器传输超文本到本地浏览器的传输协议</strong>。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。</p>
</blockquote>
<h4 id="-1"><a href="#-1" class="headerlink" title=""></a><http的模型></http的模型></h4><p>HTTP采用了浏览器/服务器这种请求/响应模型，浏览器永远是HTTP请求的发起者，服务器为响应者。</p>
<p><img src="/images/爬虫-http-01.jpg" alt="爬虫-http-01" title="爬虫-http-01"></p>
<p>这样在浏览器客户端没有发起请求的情况下，服务器是不能主动推送消息给客户端的。这也可以说是http协议的一个缺点吧。</p>
<h4 id="-2"><a href="#-2" class="headerlink" title=""></a><http的定位></http的定位></h4><p>HTTP是一个<strong>应用层协议</strong>，是我们想从服务器端获取信息的最直观的请求。比如，在爬虫中使用的<strong><urllib模块></urllib模块></strong>，<strong><requests模块></requests模块></strong>等都是封装了HTTP协议，作为一个HTTP客户端实现了博文，图片，视频等信息源的下载。</p>
<p>但是HTTP也不是直接就可以用的，它的请求是建立在一些底层协议的基础上完成的。如<strong>TCP/IP</strong>协议栈中，HTTP需要TCP的三次握手连接成功后才能向服务器发起请求。当然，如果是<strong>HTTPS</strong>的话，还需要<strong>TSL</strong>和<strong>SSL</strong>安全层。</p>
<p><img src="/images/爬虫-http-02.jpg" alt="爬虫-http-02" title="爬虫-http-02"></p>
<h3 id="一个完整的HTTP请求过程"><a href="#一个完整的HTTP请求过程" class="headerlink" title="一个完整的HTTP请求过程"></a>一个完整的HTTP请求过程</h3><p>既然==HTTP==协议需要建立在其它底层协议基础上，我们来看看一个完整的HTTP请求是什么样的。</p>
<p>当我们点击一个链接或者输入一个链接的时候，整个HTTP的请求过程就开始了，然后经过以下步骤得到最后的信息，我们这里简单介绍一下前四个步骤，旨在了解HTTP。</p>
<p><img src="/images/爬虫-http-03.jpg" alt="爬虫-http-03" title="爬虫-http-03"></p>
<ul>
<li><strong>域名解析</strong>：首先会搜索各种本地DNS缓存，如果没有就会向DNS服务器（互联网提供商）发起域名解析，以获取IP地址。</li>
<li><strong>建立TCP连接</strong>：当获取IP后，将创建套接字socket连接，也就是TCP的3次握手连接，默认端口号80。</li>
<li><strong>HTTP请求</strong>：一旦TCP连接成功后，浏览器/爬虫就可以向服务器发起HTTP请求报文了，报文内容包含请求行、请求头部、请求主体。</li>
<li><strong>服务器响应</strong>：服务器响应，并返回一个HTTP响应包（如果成功会返回状态码200）和请求的HTML代码。</li>
</ul>
<p>上面的步骤<3>和<4>可以简单的示意如下，更方便大家理解。其中，请求和响应都包含特定格式的信息，具体我们接下来会继续解读。</4></3></p>
<p><img src="/images/爬虫-http-04.jpg" alt="爬虫-http-04" title="爬虫-http-04"></p>
<p>响应HTTP请求会返回响应状态码，根据状态码可以知道返回信息的状态。状态码规定如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">1xx: 信息响应类，表示接收到请求并且继续处理 </div><div class="line">100——必须继续发出请求 </div><div class="line">101——要求服务器根据请求转换HTTP协议版本</div><div class="line">2xx: 处理成功响应类，表示动作被成功接收、理解和接受 </div><div class="line">200——交易成功</div><div class="line">201——提示知道新文件的URL</div><div class="line">202——接受和处理、但处理未完成</div><div class="line">203——返回信息不确定或不完整</div><div class="line">204——请求收到，但返回信息为空</div><div class="line">205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</div><div class="line">206——服务器已经完成了部分用户的GET请求</div><div class="line"></div><div class="line">3xx: 重定向响应类，为了完成指定的动作，必须接受进一步处理</div><div class="line">300——请求的资源可在多处得到</div><div class="line">301——删除请求数据</div><div class="line">302——在其他地址发现了请求数据</div><div class="line">303——建议客户访问其他URL或访问方式</div><div class="line">304——客户端已经执行了GET，但文件未变化</div><div class="line">305——请求的资源必须从服务器指定的地址得到</div><div class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</div><div class="line">307——申明请求的资源临时性删除</div><div class="line"></div><div class="line">4xx: 客户端错误，客户请求包含语法错误或者是不能正确执行</div><div class="line">400——错误请求，如语法错误</div><div class="line">401——未授权</div><div class="line">402——保留有效ChargeTo头响应</div><div class="line">403——禁止访问</div><div class="line">404——没有发现文件、查询或URl</div><div class="line">405——在Request-Line字段定义的方法不允许</div><div class="line">406——根据发送的Accept，请求资源不可访问</div><div class="line">407——用户必须首先在代理服务器上得到授权</div><div class="line">408——客户端没有在指定的时间内完成请求</div><div class="line">409——对当前资源状态，请求不能完成</div><div class="line">410——服务器不再有此资源且无进一步地址</div><div class="line">411——服务器拒绝用户定义的Content-Length</div><div class="line">412——一个或多个请求头字段在当前请求中错误</div><div class="line">413——请求的资源大于服务器允许的大小</div><div class="line">414——请求的资源URL长于服务器允许的长度</div><div class="line">415——请求资源不支持请求项目格式</div><div class="line">416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</div><div class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</div><div class="line">5xx: 服务端错误，服务器不能正确执行一个正确的请求</div><div class="line">500——内部服务器错误</div><div class="line">501——未实现</div><div class="line">502——网关错误</div></pre></td></tr></table></figure>
<h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><p>相信你已经对HTTP的请求过程有了大致的了解了，下面我们来详细介绍HTTP请求的==报文信息==。<br>报文内容包含==请求行==、==请求头部==、==请求主体==</p>
<p><img src="/images/爬虫-http-05.jpg" alt="爬虫--http-05" title="爬虫-http-05"></p>
<p>下面我们来看一下通过开发者工具请求网址<a href="https://www.baidu.com/截取下来的HTTP请求报文内容，对比一下上面的标准格式。" target="_blank" rel="external">https://www.baidu.com/截取下来的HTTP请求报文内容，对比一下上面的标准格式。</a></p>
<p><img src="/images/爬虫-http-06.jpg" alt="爬虫-http-06" title="爬虫-http-06"></p>
<p>我们发现请求报文的格式与上面基本一致，正式我们想要的。那么，接下来我们将要逐个的介绍以上各个信息</p>
<h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>==GET==是HTTP的请求方式之一，HTTP/1.1协议中共定义了8种方法与服务器交互，有 GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT，其中比较常用的是==GET==和==POST==方法了。</p>
<ul>
<li>HEAD: 从服务器得到除了请求体与GET请求一样的响应</li>
<li>GET：通过URL获取查询资源信息（爬虫特定URL爬取）</li>
<li>POST：提交表单（爬虫中的模拟登录）</li>
<li>PUT：上传文件（浏览器不支持）</li>
<li>DELETE：删除</li>
<li>OPTIONS：返回服务器对特定资源支持的HTTP请求方法</li>
<li>TRACE：返回服务器收到的请求，用于测试或诊断 </li>
<li>CONNECT：预留给管道连接方式的代理服务</li>
</ul>
<p>==GET==请求方法后URL（这里是/）和版本1.1，别忘了空格。</p>
<h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>HTTP的头域包括==通用头==、==请求头==、==响应头==和==实体头==四部分。因为在爬虫过程中，我们经常会提交headers请求头信息用于伪装，所以我们这里对请求头着重讲解一下。</p>
<p>请求头是请求报文特有的，它向服务器提交了一些额外的信息，例如通过Accept字段信息，我们客户端可以告诉服务器我们接受一些什么类型的数据。而我们其实可以把这些字段信息就当成==键值对==对待。</p>
<p>下面我们看看这些字段都代表了什么意思？</p>
<h4 id="Accept"><a href="#Accept" class="headerlink" title="==Accept=="></a>==Accept==</h4><p>内容：text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8<br>含义：告诉浏览器我们接受MIME的类型</p>
<h4 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="==Accept-Encoding=="></a>==Accept-Encoding==</h4><p>内容：gzip, deflate, br<br>含义：如果有这个字段，则代表客户端支持压缩将内容编码，去掉后会支持任意编码。<br>注意：爬虫时一般不要把它加上，博主最开始就是不懂全都复制过来，结果因为这个就是不好使卡住好长时间。</p>
<h4 id="Accept-Lanague"><a href="#Accept-Lanague" class="headerlink" title="==Accept-Lanague=="></a>==Accept-Lanague==</h4><p>内容：zh-CN,zh;q=0.9<br>含义：告诉服务器能够接受的语言，没有则代表任何语言</p>
<h4 id="Connection"><a href="#Connection" class="headerlink" title="==Connection=="></a>==Connection==</h4><p>内容：keep-alive<br>含义：告诉服务器需要持久有效的连接状态（HTTP1.1默认会进行持久连接）</p>
<h4 id="Host"><a href="#Host" class="headerlink" title="==Host=="></a>==Host==</h4><p>内容：www.baidu.com<br>含义：客户端指定自己想访问的web服务器域名/IP地址和端口号</p>
<h4 id="Cache-control"><a href="#Cache-control" class="headerlink" title="==Cache-control=="></a>==Cache-control==</h4><p>内容：max-age=0<br>含义：(引自百度百科)</p>
<blockquote>
<p>Cache-Control<br>是最重要的规则。这个字段用于指定所有缓存机制在整个请求/响应链中必须服从的指令。这些指令指定用于阻止缓存对请求或响应造成不利干扰的行为。这些指令通常覆盖默认缓存算法。缓存指令是单向的，即请求中存在一个指令并不意味着响应中将存在同一个指令。<br>网页的缓存是由HTTP消息头中的“Cache-control”来控制的，常见的取值有private、no-cache、max-age、must-revalidate等，默认为private。</p>
</blockquote>
<p>但是HTTP请求和响应的Cache-Control是不完全一样的。<br>常见的请求Cache-Control取值有==no-cache==, ==no-store==, ==max-age==, ==max-stale==, ==min-fresh==, ==only-if-cached==。</p>
<p>响应的Cache-Control取值有==public==, ==private==,==no-cache==, ==no- store==, ==no-transform==, ==must-revalidate==, ==proxy-revalidate==, ==max-age==。</p>
<p>我们这里主要介绍请求时的常见Cache-Control取值。</p>
<h5 id="max-age-lt-0"><a href="#max-age-lt-0" class="headerlink" title="max-age&lt;=0"></a><1>max-age&lt;=0</1></h5><p>本例中使用max-age=0，表示每次请求会访问服务器，通过Last-Modified来判断文件是否被修改，如果被修改，返回状态码200并得到最新文件，否则将返回304状态码并读取缓存文件。</p>
<h5 id="max-age-gt-0"><a href="#max-age-gt-0" class="headerlink" title="max-age&gt;0"></a><2>max-age&gt;0</2></h5><p>表示会直接从浏览器提取缓存。</p>
<h5 id="no-cache"><a href="#no-cache" class="headerlink" title="no-cache"></a><3>no-cache</3></h5><p>表示不会在浏览器缓存进行提取，而是强制的向服务器发出请求，这样可以保证客户端能够收到最权威的回应。</p>
<h5 id="no-store"><a href="#no-store" class="headerlink" title="no-store"></a><4>no-store</4></h5><p>所有内容都不会被缓存到缓存或Internet临时文件中。</p>
<h4 id="Upgrade-Insecure-Requests"><a href="#Upgrade-Insecure-Requests" class="headerlink" title="==Upgrade-Insecure-Requests=="></a>==Upgrade-Insecure-Requests==</h4><p>内容：1<br>含义：表示浏览器/爬虫可以处理HTTPS协议，并能自动升级请求从HTTP到HTTPS。</p>
<h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="==User-Agent=="></a>==User-Agent==</h4><p>内容：Mozilla/5.0 (Windows NT 6.1; WOW64) ..Safari/537.36<br>含义：（这个是爬虫中最常用了）用于伪装成浏览器身份请求网页。它的意思自然就是表示浏览器的身份，说明是用的哪种浏览器进行的操作。</p>
<h4 id="Cookies"><a href="#Cookies" class="headerlink" title="==Cookies=="></a>==Cookies==</h4><p>含义：（这个也是爬虫中很重要的了，通常用于模拟登录）<br>Cookies是用于维持服务端的会话状态，由服务器端写入，然后在后续请求中，供服务器读取使用。</p>
<p><em>以上就是本例中出现的所有字段信息内容。当然，还有其它一些常用字段信息，这里也一起说明一下。</em></p>
<h3 id="其它请求头字段信息"><a href="#其它请求头字段信息" class="headerlink" title="其它请求头字段信息"></a>其它请求头字段信息</h3><h4 id="Referer"><a href="#Referer" class="headerlink" title="==Referer=="></a>==Referer==</h4><p>含义：（这个也是爬虫常用到的 ==防盗链==）<br>客户端通过当前URL代表的页面出发访问我们请求的页面。爬虫中，一般我们只要把它设置成请求的网页链接就好了。</p>
<h4 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="==Accept-Charset=="></a>==Accept-Charset==</h4><p>含义：（这个也是爬虫常用到的）<br>表示浏览器可接受的字符集，可以是utf-8，gbk等</p>
<h4 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="==If-Modified-Since=="></a>==If-Modified-Since==</h4><p>内容：Thu, 10 Apr 2008 09:14:42 GMT<br>含义：请求的内容在指定日期以后一旦被修改就被返回对象内容，否则返回“Not Modified”</p>
<h4 id="Pragma"><a href="#Pragma" class="headerlink" title="==Pragma=="></a>==Pragma==</h4><blockquote>
<p>Pragma头域用来包含实现特定的指令，最常用的是Pragma:no-cache。在HTTP/1.1协议中，它的含义和Cache-Control:no-cache相同。</p>
</blockquote>
<h4 id="Range"><a href="#Range" class="headerlink" title="==Range=="></a>==Range==</h4><p>含义：告诉浏览器自己想取对象的哪个部分。例如，Range: bytes=1173546</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;在学习爬虫的过程中，相信大家对HTTP这个词已经不陌生了，它好像从未离开过我们的视线。被迫所需，我们每次都要使用开发者工具去
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>运维|CentOS搭建JavaWeb环境</title>
    <link href="http://yoursite.com/2018/02/11/%E8%BF%90%E7%BB%B4-CentOS%E6%90%AD%E5%BB%BAJavaWeb%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/02/11/运维-CentOS搭建JavaWeb环境/</id>
    <published>2018-02-11T11:59:39.000Z</published>
    <updated>2018-02-12T06:36:15.786Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h3><p>这里列出的软件版本仅代表写作本文档使用的版本。操作时，请您以实际软件版本为准。</p>
<p>操作系统：CentOS 7.4<br>Tomcat 版本：Tomcat 8.0.49<br>JDK 版本：JDK 1.8.0_141</p>
<h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><p>CentOS 7.4 系统默认开启了防火墙。您可以关闭防火墙，也可以参考官网文档在防火墙里添加规则，放行 80、443 或 8080 端口入方向规则。</p>
<p>关闭防火墙：</p>
<blockquote>
<p>systemctl stop firewalld.service</p>
</blockquote>
<p>关闭防火墙开机自启动功能：</p>
<blockquote>
<p>systemctl disable firewalld.service</p>
</blockquote>
<p>创建一般用户 www，运行 tomcat：</p>
<blockquote>
<p>useradd www</p>
</blockquote>
<p>在安全组中放行 8080 端口。具体操作，请参考 添加安全组规则(如果在阿里云服务器)。</p>
<p>创建网站根目录：</p>
<blockquote>
<p>mkdir -p /data/wwwroot/default</p>
</blockquote>
<p>新建 Tomcat 测试页面：</p>
<blockquote>
<p>echo Tomcat test &gt; /data/wwwroot/default/index.jsp<br>chown -R www.www /data/wwwroot</p>
</blockquote>
<p>下载源代码</p>
<blockquote>
<p>wget <a href="https://mirrors.aliyun.com/apache/tomcat/tomcat-8/v8.0.49/bin/apache-tomcat-8.0.49.tar.gz" target="_blank" rel="external">https://mirrors.aliyun.com/apache/tomcat/tomcat-8/v8.0.49/bin/apache-tomcat-8.0.49.tar.gz</a></p>
</blockquote>
<p>说明：源代码版本会不断升级。您可以在 <strong><a href="https://mirrors.aliyun.com/apache/tomcat/tomcat-8/" target="_blank" rel="external">https://mirrors.aliyun.com/apache/tomcat/tomcat-8/</a></strong> 目录下获取合适的安装包地址。</p>
<blockquote>
<p>wget <a href="http://mirrors.linuxeye.com/jdk/jdk-8u141-linux-x64.tar.gz" target="_blank" rel="external">http://mirrors.linuxeye.com/jdk/jdk-8u141-linux-x64.tar.gz</a></p>
</blockquote>
<p>说明：源代码版本会不断升级。您可以在 <strong><a href="http://mirrors.linuxeye.com/jdk/" target="_blank" rel="external">http://mirrors.linuxeye.com/jdk/</a></strong> 目录下获取合适的安装包地址。</p>
<h3 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h3><p>按以下步骤安装 JDK。</p>
<p>1.新建一个目录：</p>
<blockquote>
<p>mkdir /usr/java</p>
</blockquote>
<p>解压 jdk-8u141-linux-x64.tar.gz 到 /usr/java。</p>
<blockquote>
<p>tar xzf jdk-8u141-linux-x64.tar.gz -C /usr/java</p>
</blockquote>
<p>设置环境变量：</p>
<p>编辑 /etc/profile：<strong>vi /etc/profile</strong>。</p>
<p>按 i 键进入编辑模式。</p>
<p>在 /etc/profile 文件中添加以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#set java environment</div><div class="line">export JAVA_HOME=/usr/java/jdk1.8.0_141</div><div class="line">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>按 Esc 键退出编辑模式，输入 :wq 保存并关闭文件。</p>
<p>加载环境变量：<strong>source /etc/profile</strong>。</p>
<p>查看 jdk 版本。当出现 jdk 版本信息时，表示 JDK 已经安装成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java -version</div><div class="line">java version &quot;1.8.0_141&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)</div></pre></td></tr></table></figure></p>
<h3 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h3><p>按以下步骤安装 Tomcat。</p>
<ol>
<li>依次运行以下命令解压 apache-tomcat-8.5.23.tar.gz，重命名 Tomcat 目录，并设置用户权限。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xzf apache-tomcat-8.0.49.tar.gz</div><div class="line">mv apache-tomcat-8.0.49 /usr/local/tomcat/</div><div class="line">chown -R www.www /usr/local/tomcat/</div></pre></td></tr></table></figure>
</li>
</ol>
<p>说明：</p>
<p>在 /usr/local/tomcat/ 目录里：</p>
<ul>
<li>bin 目录中存放 Tomcat 的一些脚本文件，包含启动和关闭 Tomcat 服务脚本。</li>
<li>conf：存放 Tomcat 服务器的各种全局配置文件，其中最重要的是 server.xml 和 web.xml。</li>
<li>webapps：Tomcat 的主要 Web 发布目录，默认情况下把 Web 应用文件放于此目录。</li>
<li>logs：存放 Tomcat 执行时的日志文件。</li>
</ul>
<p>2.配置 server.xml 文件：</p>
<p>切换到 /usr/local/tomcat/conf/ 目录：<strong>cd /usr/local/tomcat/conf/</strong>。</p>
<p>重命名 server.xml 文件：<strong>mv server.xml server.xml_bk</strong>。</p>
<p>创建一个新的 server.xml 文件：</p>
<p>运行命令 <strong>vi server.xml</strong>。</p>
<p>按 i 键进入编辑模式。</p>
<p>添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line"> &lt;Server port=&quot;8006&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class="line">&lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;/&gt;</div><div class="line">&lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;/&gt;</div><div class="line">&lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;/&gt;</div><div class="line">&lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot;/&gt;</div><div class="line">&lt;GlobalNamingResources&gt;</div><div class="line">  &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class="line">            type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class="line">            description=&quot;User database that can be updated and saved&quot;</div><div class="line">            factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class="line">            pathname=&quot;conf/tomcat-users.xml&quot;/&gt;</div><div class="line">&lt;/GlobalNamingResources&gt;</div><div class="line">&lt;Service name=&quot;Catalina&quot;&gt;</div><div class="line">  &lt;Connector port=&quot;8080&quot;</div><div class="line">            protocol=&quot;HTTP/1.1&quot;</div><div class="line">            connectionTimeout=&quot;20000&quot;</div><div class="line">            redirectPort=&quot;8443&quot;</div><div class="line">            maxThreads=&quot;1000&quot;</div><div class="line">            minSpareThreads=&quot;20&quot;</div><div class="line">            acceptCount=&quot;1000&quot;</div><div class="line">            maxHttpHeaderSize=&quot;65536&quot;</div><div class="line">            debug=&quot;0&quot;</div><div class="line">            disableUploadTimeout=&quot;true&quot;</div><div class="line">            useBodyEncodingForURI=&quot;true&quot;</div><div class="line">            enableLookups=&quot;false&quot;</div><div class="line">            URIEncoding=&quot;UTF-8&quot;/&gt;</div><div class="line">  &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class="line">    &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class="line">      &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class="line">             resourceName=&quot;UserDatabase&quot;/&gt;</div><div class="line">    &lt;/Realm&gt;</div><div class="line">    &lt;Host name=&quot;localhost&quot; appBase=&quot;/data/wwwroot/default&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class="line">      &lt;Context path=&quot;&quot; docBase=&quot;/data/wwwroot/default&quot; debug=&quot;0&quot; reloadable=&quot;false&quot; crossContext=&quot;true&quot;/&gt;</div><div class="line">      &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class="line">        prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class="line">    &lt;/Host&gt;</div><div class="line">  &lt;/Engine&gt;</div><div class="line">&lt;/Service&gt;</div><div class="line">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>
<p>设置 JVM 内存参数：</p>
<p>运行命令 <strong>vi /usr/local/tomcat/bin/setenv.sh</strong>， 创建 /usr/local/tomcat/bin/setenv.sh。<br>按 i 键进入编辑模式。<br>添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JAVA_OPTS=’-Djava.security.egd=file:/dev/./urandom -server -Xms256m -Xmx496m -Dfile.encoding=UTF-8’</div></pre></td></tr></table></figure></p>
<p>按 Esc 键退出编辑模式，输入 :wq 保存并退出文件。</p>
<p>-server:一定要作为第一个参数，在多个CPU时性能佳<br>-Xms：初始Heap大小，使用的最小内存,cpu性能高时此值应设的大一些<br>-Xmx：java heap最大值，使用的最大内存<br>上面两个值是分配JVM的最小和最大内存，取决于硬件物理内存的大小，建议均设为物理内存的一半。<br>-XX:PermSize:设定内存的永久保存区域<br>-XX:MaxPermSize:设定最大内存的永久保存区域<br>-XX:MaxNewSize:<br>-Xss 15120 这使得JBoss每增加一个线程（thread)就会立即消耗15M内存，而最佳值应该是128K,默认值好像是512k.<br>+XX:AggressiveHeap 会使得 Xms没有意义。这个参数让jvm忽略Xmx参数,疯狂地吃完一个G物理内存,再吃尽一个G的swap。<br>-Xss：每个线程的Stack大小<br>-verbose:gc 现实垃圾收集信息<br>-Xloggc:gc.log 指定垃圾收集日志文件<br>-Xmn：young generation的heap大小，一般设置为Xmx的3、4分之一<br>-XX:+UseParNewGC ：缩短minor收集的时间<br>-XX:+UseConcMarkSweepGC ：缩短major收集的时间</p>
<p>3.设置 Tomcat 自启动脚本。</p>
<p>下载脚本：<strong>wget <a href="https://github.com/lj2007331/oneinstack/raw/master/init.d/Tomcat-init" target="_blank" rel="external">https://github.com/lj2007331/oneinstack/raw/master/init.d/Tomcat-init</a></strong></p>
<p>重命名 Tomcat-init。<strong>mv Tomcat-init /etc/init.d/tomcat</strong></p>
<p>添加执行权限：<strong>chmod +x /etc/init.d/tomcat</strong></p>
<p>设置启动脚本 JAVA_HOME：<strong>sed -i ‘s@^export JAVA_HOME=.*@export JAVA_HOME=/usr/java/jdk1.8.0_141@’ /etc/init.d/tomcat</strong></p>
<p>4.设置自启动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chkconfig --add tomcat</div><div class="line">chkconfig tomcat on</div></pre></td></tr></table></figure></p>
<p>5.启动 Tomcat。</p>
<blockquote>
<p>service tomcat start</p>
</blockquote>
<p>6.在浏览器地址栏中输入 <a href="http://ip:8080" target="_blank" rel="external">http://ip:8080</a> 进行访问。出现如图所示页面时表示安装成功。</p>
<p><img src="/images/搭建JavaWeb服务器.png" alt="enter description here" title="搭建JavaWeb服务器"></p>
<h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><h4 id="卸载老版本MySQL"><a href="#卸载老版本MySQL" class="headerlink" title="卸载老版本MySQL"></a>卸载老版本MySQL</h4><p>查找并删除mysql有关的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">find / -name mysql</div><div class="line">rm -rf 上边查找到的路径，多个路径用空格隔开</div><div class="line">#或者下边一条命令即可</div><div class="line">find / -name mysql|xargs rm -rf</div></pre></td></tr></table></figure></p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><blockquote>
<p>wget <a href="http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.33-linux-glibc2.5-x86_64.tar.gz" target="_blank" rel="external">http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.33-linux-glibc2.5-x86_64.tar.gz</a></p>
</blockquote>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><blockquote>
<p>tar -zxvf mysql-5.6.33-linux-glibc2.5-x86_64.tar.gz</p>
</blockquote>
<h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><blockquote>
<p>mv mysql-5.6.33-linux-glibc2.5-x86_64/  /usr/local/mysql</p>
</blockquote>
<h4 id="添加mysql用户组和mysql用户"><a href="#添加mysql用户组和mysql用户" class="headerlink" title="添加mysql用户组和mysql用户"></a>添加mysql用户组和mysql用户</h4><p>先检查是否有mysql用户组和mysql用户</p>
<blockquote>
<p>groups mysql</p>
</blockquote>
<p>若无，则添加；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">groupadd mysql</div><div class="line">useradd -r -g mysql mysql</div></pre></td></tr></table></figure></p>
<h4 id="进入mysql目录更改权限"><a href="#进入mysql目录更改权限" class="headerlink" title="进入mysql目录更改权限"></a>进入mysql目录更改权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/mysql</div><div class="line">chown -R mysql:mysql ./</div></pre></td></tr></table></figure>
<h4 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h4><blockquote>
<p>./scripts/mysql_install_db –user=mysql</p>
</blockquote>
<p>安装完之后修改当前目录拥有者为root用户，修改data目录拥有者为mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown -R root:root ./</div><div class="line">chown -R mysql:mysql data</div></pre></td></tr></table></figure>
<h4 id="更改mysql密码"><a href="#更改mysql密码" class="headerlink" title="更改mysql密码"></a>更改mysql密码</h4><p>上一步安装脚本执行输出的日志中告诉我们如何更改密码了</p>
<p><img src="/images/搭建JavaWeb服务器-mysql.png" alt="搭建JavaWeb服务器--mysql" title="搭建JavaWeb服务器-mysql"></p>
<p>但是如果直接执行这两条命令就会报错<br><img src="/images/搭建JavaWeb服务器--mysql.png" alt="搭建JavaWeb服务器--mysql" title="搭建JavaWeb服务器--mysql"></p>
<p>因为这时还没有启动mysql，这算是一个坑。启动方法如下：</p>
<blockquote>
<p>./support-files/mysql.server start</p>
</blockquote>
<p><img src="/images/搭建JavaWeb服务器---mysql.png" alt="搭建JavaWeb服务器---mysql" title="搭建JavaWeb服务器---mysql"></p>
<p>如果MySQL启动报错，则可能是已经存在MySQL进程，杀掉即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ps aux|grep mysql</div><div class="line">kill -9 上边的进程号</div><div class="line">#或者下边一条命令即可杀掉所有MySQL进程</div><div class="line">ps aux|grep mysql|awk &apos;&#123;print $2&#125;&apos;|xargs kill -9</div></pre></td></tr></table></figure></p>
<p>MySQL启动之后再执行如下命令更改密码：</p>
<blockquote>
<p>./bin/mysqladmin -u root -h localhost.localdomain password ‘root’</p>
</blockquote>
<p>密码更改后即可登录MySQL</p>
<blockquote>
<p>./bin/mysql -h127.0.0.1 -uroot -proot</p>
</blockquote>
<p><img src="/images/搭建JavaWeb服务器----mysql.png" alt="搭建JavaWeb服务器----mysql" title="搭建JavaWeb服务器----mysql"></p>
<p>登录之后将其他用户的密码也可改为root<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">update mysql.user set password=password(&apos;root&apos;) where user=&apos;root&apos;;</div><div class="line">flush privileges;</div></pre></td></tr></table></figure></p>
<h4 id="增加远程登录权限"><a href="#增加远程登录权限" class="headerlink" title="增加远程登录权限"></a>增加远程登录权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grant all privileges on *.* to root@&apos;%&apos; identified by &apos;root&apos;;</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<h4 id="将MySQL加入Service系统服务"><a href="#将MySQL加入Service系统服务" class="headerlink" title="将MySQL加入Service系统服务"></a>将MySQL加入Service系统服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cp support-files/mysql.server /etc/init.d/mysqld</div><div class="line">chkconfig --add mysqld</div><div class="line">chkconfig mysqld on</div><div class="line">service mysqld restart</div><div class="line">service mysqld status</div></pre></td></tr></table></figure>
<p><img src="/images/搭建JavaWeb服务器-----mysql.png" alt="搭建JavaWeb服务器-----mysql" title="搭建JavaWeb服务器-----mysql"></p>
<h4 id="配置my-cnf-配置可能会出错-这一步可以忽"><a href="#配置my-cnf-配置可能会出错-这一步可以忽" class="headerlink" title="配置my.cnf[配置可能会出错|这一步可以忽]"></a>配置my.cnf[配置可能会出错|这一步可以忽]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim my.cnf</div><div class="line">#添加以下两条语句并保存退出</div><div class="line">default-character-set=utf8</div><div class="line">lower_case_table_names=1</div><div class="line">max_allowed_packet=100M</div></pre></td></tr></table></figure>
<p>配置好之后，重启mysqld服务</p>
<p><img src="/images/搭建JavaWeb服务器#mysql.png" alt="搭建JavaWeb服务器#mysql" title="搭建JavaWeb服务器#mysql"></p>
<blockquote>
<p>引用 <a href="https://help.aliyun.com/document_detail/51376.html?spm=a2c4g.11186623.2.6.f7qoYA" target="_blank" rel="external">https://help.aliyun.com/document_detail/51376.html?spm=a2c4g.11186623.2.6.f7qoYA</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置要求&quot;&gt;&lt;a href=&quot;#配置要求&quot; class=&quot;headerlink&quot; title=&quot;配置要求&quot;&gt;&lt;/a&gt;配置要求&lt;/h3&gt;&lt;p&gt;这里列出的软件版本仅代表写作本文档使用的版本。操作时，请您以实际软件版本为准。&lt;/p&gt;
&lt;p&gt;操作系统：CentOS 7.4
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java|徒手撸框架--实现Aop</title>
    <link href="http://yoursite.com/2018/02/10/Java-%E5%BE%92%E6%89%8B%E6%92%B8%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0Aop/"/>
    <id>http://yoursite.com/2018/02/10/Java-徒手撸框架-实现Aop/</id>
    <published>2018-02-10T15:50:24.000Z</published>
    <updated>2018-02-10T08:20:36.397Z</updated>
    
    <content type="html"><![CDATA[<p>Spring框架有两大特性，一个是IOC,另一个是AOP.对于Spring Aop的实现讲解的都不太透彻，大部分文章介绍了Spring Aop的底层技术使用了动态代理，至于Spring Aop的具体实现都语焉不详。这类文章看以后以后，我脑子里浮现的就是这样一个画面：</p>
<p><img src="/images/徒手鲁框架--04.jpg" alt="徒手鲁框架--04" title="徒手鲁框架--04"></p>
<p>我的想法就是，带领大家，首先梳理 Spring Aop的实现，然后屏蔽细节，自己实现一个Aop框架。加深对Spring Aop的理解。在了解上图1-4步骤的同时，补充 4 到 5 步骤之间的其他细节。</p>
<p>读完这篇文章你将会了解：</p>
<ul>
<li>Aop是什么？</li>
<li>为什么要使用Aop？</li>
<li>Spirng 实现Aop的思路是什么</li>
<li>自己根据Spring 思想实现一个 Aop框架</li>
</ul>
<h3 id="Aop-是什么？"><a href="#Aop-是什么？" class="headerlink" title="Aop 是什么？"></a>Aop 是什么？</h3><p>面向切面的程序设计（aspect-oriented programming，AOP）。通过预编译方式和运行期动态代理实现程序功能统一维护的一种技术。</p>
<h3 id="为什么需要使用Aop？"><a href="#为什么需要使用Aop？" class="headerlink" title="为什么需要使用Aop？"></a>为什么需要使用Aop？</h3><p>面向切面编程，实际上就是通过预编译或者动态代理技术在不修改源代码的情况下给原来的程序统一添加功能的一种技术。我们看几个关键词，第一个是“动态代理技术”，这个就是Spring Aop实现底层技术。第二个“不修改源代码”，这个就是Aop最关键的地方，也就是我们平时所说的非入侵性。。第三个“添加功能”，不改变原有的源代码，为程序添加功能。</p>
<p>举个例子：如果某天你需要统计若干方法的执行时间，如果不是用Aop技术，你要做的就是为每一个方法开始的时候获取一个开始时间，在方法结束的时候获取结束时间。二者之差就是方法的执行时间。如果对每一个需要统计的方法都做如上的操作，那代码简直就是灾难。如果我们使用Aop技术，在不修改代码的情况下，添加一个统计方法执行时间的切面。代码就变得十分优雅。具体这个切面怎么实现？看完下面的文章你一定就会知道。</p>
<h3 id="Spring-Aop-是怎么实现的？"><a href="#Spring-Aop-是怎么实现的？" class="headerlink" title="Spring Aop 是怎么实现的？"></a>Spring Aop 是怎么实现的？</h3><p>所谓：</p>
<blockquote>
<p>计算机程序 = 数据结构 + 算法</p>
</blockquote>
<p>在阅读过Spring源码之后，你就会对这个说法理解更深入了。</p>
<p>Spring Aop实现的代码非常非常的绕。也就是说 Spring 为了灵活做了非常深层次的抽象。同时 Spring为了兼容 @AspectJ 的Aop协议，使用了很多 Adapter （适配器）模式又进一步的增加了代码的复杂程度。</p>
<p>Spring 的 Aop 实现主要以下几个步骤：</p>
<ul>
<li>初始化 Aop 容器。</li>
<li>读取配置文件。</li>
<li>将配置文件装换为 Aop 能够识别的数据结构 – Advisor。这里展开讲一讲这个advisor。Advisor对象中包又含了两个重要的数据结构，一个是 Advice，一个是 Pointcut。Advice的作用就是描述一个切面的行为，pointcut描述的是切面的位置。两个数据结的组合就是”在哪里，干什么“。这样 Advisor 就包含了”在哪里干什么“的信息，就能够全面的描述切面了。</li>
<li>Spring 将这个 Advisor 转换成自己能够识别的数据结构 – AdvicedSupport。Spirng 动态的将这些方法拦截器织入到对应的方法。</li>
<li>生成动态代理代理。</li>
<li>提供调用，在使用的时候，调用方调用的就是代理方法。也就是已经织入了增强方法的方法。</li>
</ul>
<h3 id="自己实现一个-Aop-框架"><a href="#自己实现一个-Aop-框架" class="headerlink" title="自己实现一个 Aop 框架"></a>自己实现一个 Aop 框架</h3><p>同样，我也是参考了Aop的设计。只实现了基于方法的拦截器。去除了很多的实现细节。</p>
<p>使用上一讲的 IoC 框架管理对象。使用 Cglib 作为动态代理的基础类。使用 maven 管理 jar 包和 module。所以上一讲的 IoC 框架会作为一个 modules 引入项目。</p>
<p>下面我们就来实现我们的Aop 框架吧。</p>
<p>首先来看看代码的基本结构。</p>
<p><img src="/images/徒手鲁框架--05.jpg" alt="徒手鲁框架--05" title="徒手鲁框架--05"></p>
<p>我们首先对包每个包都干了什么做一个简单介绍。</p>
<ul>
<li>invocation 描述的就是一个方法的调用。注意这里指的是“方法的调用”，而不是调用这个动作。</li>
<li>interceptor 大家最熟悉的拦截器，拦截器拦截的目标就是 invcation 包里面的调用。</li>
<li>advisor 这个包里的对象，都是用来描述切面的数据结构。</li>
<li>adapter 这个包里面是一些适配器方法。对于”适配器”不了解的同学可以去看看”设计模式”里面的”适配模式”。他的作用就是将 advice 包里的对象适配为 interceptor。</li>
<li>bean 描述我们 json 配置文件的对象。</li>
<li>core 我们框架的核心逻辑。</li>
</ul>
<p>这个时候宏观的看我们大概梳理出了一条路线， adaper 将 advisor 适配为 interceptor 去拦截 invoction。</p>
<p>下面我们从这个链条的最末端讲起：</p>
<h4 id="invcation"><a href="#invcation" class="headerlink" title="invcation"></a>invcation</h4><p>首先 MethodInvocation 作为所有方法调用的接口。要描述一个方法的调用包含三个方法，获取方法本身getMethod,获取方法的参数getArguments，还有执行方法本身proceed()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface MethodInvocation &#123;</div><div class="line">    Method getMethod();</div><div class="line">    Object[] getArguments();</div><div class="line">    Object proceed() throws Throwable;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ProxyMethodInvocation 看名字就知道，是代理方法的调用，增加了一个获取代理的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface ProxyMethodInvocation extends MethodInvocation &#123;</div><div class="line">    Object getProxy();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="interceptor"><a href="#interceptor" class="headerlink" title="interceptor"></a>interceptor</h4><p>AopMethodInterceptor 是 Aop 容器所有拦截器都要实现的接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface AopMethodInterceptor &#123;</div><div class="line">    Object invoke(MethodInvocation mi) throws Throwable;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同时我们实现了两种拦截器BeforeMethodAdviceInterceptor和AfterRunningAdviceInterceptor,顾名思义前者就是在方法执行以前拦截，后者就在方法运行结束以后拦截：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class BeforeMethodAdviceInterceptor implements AopMethodInterceptor &#123;</div><div class="line">    private BeforeMethodAdvice advice;</div><div class="line">    public BeforeMethodAdviceInterceptor(BeforeMethodAdvice advice) &#123;</div><div class="line">        this.advice = advice;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Object invoke(MethodInvocation mi) throws Throwable &#123;</div><div class="line">        advice.before(mi.getMethod(),mi.getArguments(),mi);</div><div class="line">        return mi.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class AfterRunningAdviceInterceptor implements AopMethodInterceptor &#123;</div><div class="line">    private AfterRunningAdvice advice;</div><div class="line"></div><div class="line">    public AfterRunningAdviceInterceptor(AfterRunningAdvice advice) &#123;</div><div class="line">        this.advice = advice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object invoke(MethodInvocation mi) throws Throwable &#123;</div><div class="line">        Object returnVal = mi.proceed();</div><div class="line">        advice.after(returnVal,mi.getMethod(),mi.getArguments(),mi);</div><div class="line">        return returnVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看了上面的代码我们发现，实际上 mi.proceed()才是执行原有的方法。而advice我们上文就说过，是描述增强的方法”干什么“的数据结构，所以对于这个before拦截器，我们就把advice对应的增强方法放在了真正执行的方法前面。而对于after拦截器而言，就放在了真正执行的方法后面。</p>
<p>这个时候我们过头来看最关键的 ReflectioveMethodeInvocation<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public class ReflectioveMethodeInvocation implements ProxyMethodInvocation &#123;</div><div class="line">    public ReflectioveMethodeInvocation(Object proxy, Object target, Method method, Object[] arguments, List&lt;AopMethodInterceptor&gt; interceptorList) &#123;</div><div class="line">        this.proxy = proxy;</div><div class="line">        this.target = target;</div><div class="line">        this.method = method;</div><div class="line">        this.arguments = arguments;</div><div class="line">        this.interceptorList = interceptorList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected final Object proxy;</div><div class="line"></div><div class="line">    protected final Object target;</div><div class="line"></div><div class="line">    protected final Method method;</div><div class="line"></div><div class="line">    protected Object[] arguments = new Object[0];</div><div class="line"></div><div class="line">    //存储所有的拦截器</div><div class="line">    protected final List&lt;AopMethodInterceptor&gt; interceptorList;</div><div class="line"></div><div class="line">    private int currentInterceptorIndex = -1;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getProxy() &#123;</div><div class="line">        return proxy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Method getMethod() &#123;</div><div class="line">        return method;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object[] getArguments() &#123;</div><div class="line">        return arguments;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object proceed() throws Throwable &#123;</div><div class="line"></div><div class="line">        //执行完所有的拦截器后，执行目标方法</div><div class="line">        if(currentInterceptorIndex == this.interceptorList.size() - 1) &#123;</div><div class="line">            return invokeOriginal();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //迭代的执行拦截器。回顾上面的讲解，我们实现的拦击都会执行 im.proceed() 实际上又会调用这个方法。实现了一个递归的调用，直到执行完所有的拦截器。</div><div class="line">        AopMethodInterceptor interceptor = interceptorList.get(++currentInterceptorIndex);</div><div class="line">        return interceptor.invoke(this);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected Object invokeOriginal() throws Throwable&#123;</div><div class="line">        return ReflectionUtils.invokeMethodUseReflection(target,method,arguments);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在实际的运用中，我们的方法很可能被多个方法的拦截器所增强。所以我们，使用了一个list来保存所有的拦截器。所以我们需要递归的去增加拦截器。当处理完了所有的拦截器之后，才会真正调用调用被增强的方法。我们可以认为，前文所述的动态的织入代码就发生在这里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class CglibMethodInvocation extends ReflectioveMethodeInvocation &#123;</div><div class="line"></div><div class="line">    private MethodProxy methodProxy;</div><div class="line"></div><div class="line">    public CglibMethodInvocation(Object proxy, Object target, Method method, Object[] arguments, List&lt;AopMethodInterceptor&gt; interceptorList, MethodProxy methodProxy) &#123;</div><div class="line">        super(proxy, target, method, arguments, interceptorList);</div><div class="line">        this.methodProxy = methodProxy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected Object invokeOriginal() throws Throwable &#123;</div><div class="line">        return methodProxy.invoke(target,arguments);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CglibMethodInvocation 只是重写了 invokeOriginal 方法。使用代理类来调用被增强的方法。</p>
<h4 id="advisor"><a href="#advisor" class="headerlink" title="advisor"></a>advisor</h4><p>这个包里面都是一些描述切面的数据结构，我们讲解两个重要的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class Advisor &#123;</div><div class="line">    //干什么</div><div class="line">    private Advice advice;</div><div class="line">    //在哪里</div><div class="line">    private Pointcut pointcut;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上文所说，advisor 描述了在哪里，干什么。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class AdvisedSupport extends Advisor &#123;</div><div class="line">    //目标对象</div><div class="line">    private TargetSource targetSource;</div><div class="line">    //拦截器列表</div><div class="line">    private List&lt;AopMethodInterceptor&gt; list = new LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    public void addAopMethodInterceptor(AopMethodInterceptor interceptor)&#123;</div><div class="line">        list.add(interceptor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void addAopMethodInterceptors(List&lt;AopMethodInterceptor&gt; interceptors)&#123;</div><div class="line">        list.addAll(interceptors);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个AdvisedSupport就是 我们Aop框架能够理解的数据结构，这个时候问题就变成了–对于哪个目标，增加哪些拦截器。</p>
<h4 id="core"><a href="#core" class="headerlink" title="core"></a>core</h4><p>有了上面的准备，我们就开始讲解核心逻辑了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class CglibAopProxy implements AopProxy&#123;</div><div class="line">    private AdvisedSupport advised;</div><div class="line">    private Object[] constructorArgs;</div><div class="line">    private Class&lt;?&gt;[] constructorArgTypes;</div><div class="line">    public CglibAopProxy(AdvisedSupport config)&#123;</div><div class="line">        this.advised = config;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getProxy() &#123;</div><div class="line">        return getProxy(null);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Object getProxy(ClassLoader classLoader) &#123;</div><div class="line">        Class&lt;?&gt; rootClass = advised.getTargetSource().getTagetClass();</div><div class="line">        if(classLoader == null)&#123;</div><div class="line">            classLoader = ClassUtils.getDefultClassLoader();</div><div class="line">        &#125;</div><div class="line">        Enhancer enhancer = new Enhancer();</div><div class="line">        enhancer.setSuperclass(rootClass.getSuperclass());</div><div class="line">        //增加拦截器的核心方法</div><div class="line">        Callback callbacks = getCallBack(advised);</div><div class="line">        enhancer.setCallback(callbacks);</div><div class="line">        enhancer.setClassLoader(classLoader);</div><div class="line">        if(constructorArgs != null &amp;&amp; constructorArgs.length &gt; 0)&#123;</div><div class="line">            return enhancer.create(constructorArgTypes,constructorArgs);</div><div class="line">        &#125;</div><div class="line">        return enhancer.create();</div><div class="line">    &#125;</div><div class="line">    private Callback getCallBack(AdvisedSupport advised) &#123;</div><div class="line">        return new DynamicAdvisedIcnterceptor(advised.getList(),advised.getTargetSource());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CglibAopProxy就是我们代理对象生成的核心方法。使用 cglib 生成代理类。我们可以与之前ioc框架的代码。比较发现区别就在于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Callback callbacks = getCallBack(advised);</div><div class="line">enhancer.setCallback(callbacks);</div></pre></td></tr></table></figure></p>
<p>callback与之前不同了，而是写了一个getCallback()的方法，我们就来看看 getCallback 里面的 DynamicAdvisedIcnterceptor到底干了啥。</p>
<p>篇幅问题，这里不会介绍 cglib 的使用，对于callback的作用，不理解的同学需要自行学习。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class DynamicAdvisedInterceptor implements MethodInterceptor&#123;</div><div class="line"></div><div class="line">    protected final List&lt;AopMethodInterceptor&gt; interceptorList;</div><div class="line">    protected final TargetSource targetSource;</div><div class="line"></div><div class="line">    public DynamicAdvisedInterceptor(List&lt;AopMethodInterceptor&gt; interceptorList, TargetSource targetSource) &#123;</div><div class="line">        this.interceptorList = interceptorList;</div><div class="line">        this.targetSource = targetSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable &#123;</div><div class="line">        MethodInvocation invocation = new CglibMethodInvocation(obj,targetSource.getTagetObject(),method, args,interceptorList,proxy);</div><div class="line">        return invocation.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里需要注意，DynamicAdvisedInterceptor这个类实现的 MethodInterceptor 是 gclib的接口，并非我们之前的 AopMethodInterceptor。</p>
<p>我们近距离观察 intercept 这个方法我们看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MethodInvocation invocation = new CglibMethodInvocation(obj,targetSource.getTagetObject(),method, args,interceptorList,proxy);</div></pre></td></tr></table></figure></p>
<p>通过这行代码，我们的整个逻辑终于连起来了。也就是这个动态的拦截器，把我们通过 CglibMethodInvocation 织入了增强代码的方法，委托给了 cglib 来生成代理对象。</p>
<p>至此我们的 Aop 的核心功能就实现了。</p>
<p><strong>AopBeanFactoryImpl</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">public class AopBeanFactoryImpl extends BeanFactoryImpl&#123;</div><div class="line"></div><div class="line">    private static final ConcurrentHashMap&lt;String,AopBeanDefinition&gt; aopBeanDefinitionMap = new ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    private static final ConcurrentHashMap&lt;String,Object&gt; aopBeanMap = new ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getBean(String name) throws Exception &#123;</div><div class="line">        Object aopBean = aopBeanMap.get(name);</div><div class="line"></div><div class="line">        if(aopBean != null)&#123;</div><div class="line">            return aopBean;</div><div class="line">        &#125;</div><div class="line">        if(aopBeanDefinitionMap.containsKey(name))&#123;</div><div class="line">            AopBeanDefinition aopBeanDefinition = aopBeanDefinitionMap.get(name);</div><div class="line">            AdvisedSupport advisedSupport = getAdvisedSupport(aopBeanDefinition);</div><div class="line">            aopBean = new CglibAopProxy(advisedSupport).getProxy();</div><div class="line">            aopBeanMap.put(name,aopBean);</div><div class="line">            return aopBean;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return super.getBean(name);</div><div class="line">    &#125;</div><div class="line">    protected void registerBean(String name, AopBeanDefinition aopBeanDefinition)&#123;</div><div class="line">        aopBeanDefinitionMap.put(name,aopBeanDefinition);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private AdvisedSupport getAdvisedSupport(AopBeanDefinition aopBeanDefinition) throws Exception &#123;</div><div class="line"></div><div class="line">        AdvisedSupport advisedSupport = new AdvisedSupport();</div><div class="line">        List&lt;String&gt; interceptorNames = aopBeanDefinition.getInterceptorNames();</div><div class="line">        if(interceptorNames != null &amp;&amp; !interceptorNames.isEmpty())&#123;</div><div class="line">            for (String interceptorName : interceptorNames) &#123;</div><div class="line"></div><div class="line">                Advice advice = (Advice) getBean(interceptorName);</div><div class="line"></div><div class="line">                Advisor advisor = new Advisor();</div><div class="line">                advisor.setAdvice(advice);</div><div class="line"></div><div class="line">                if(advice instanceof BeforeMethodAdvice)&#123;</div><div class="line">                    AopMethodInterceptor interceptor = BeforeMethodAdviceAdapter.getInstants().getInterceptor(advisor);</div><div class="line">                    advisedSupport.addAopMethodInterceptor(interceptor);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                if(advice instanceof AfterRunningAdvice)&#123;</div><div class="line">                    AopMethodInterceptor interceptor = AfterRunningAdviceAdapter.getInstants().getInterceptor(advisor);</div><div class="line">                    advisedSupport.addAopMethodInterceptor(interceptor);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TargetSource targetSource = new TargetSource();</div><div class="line">        Object object = getBean(aopBeanDefinition.getTarget());</div><div class="line">        targetSource.setTagetClass(object.getClass());</div><div class="line">        targetSource.setTagetObject(object);</div><div class="line">        advisedSupport.setTargetSource(targetSource);</div><div class="line">        return advisedSupport;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AopBeanFactoryImpl是我们产生代理对象的工厂类，继承了上一讲我们实现的 IoC 容器的BeanFactoryImpl。重写了 getBean方法，如果是一个切面代理类，我们使用Aop框架生成代理类，如果是普通的对象，我们就用原来的IoC容器进行依赖注入。<br>getAdvisedSupport就是获取 Aop 框架认识的数据结构。</p>
<p>剩下没有讲到的类都比较简单，大家看源码就行。与核心逻辑无关。</p>
<h4 id="写个方法测试一下"><a href="#写个方法测试一下" class="headerlink" title="写个方法测试一下"></a>写个方法测试一下</h4><p>我们需要统计一个方法的执行时间。面对这个需求我们怎么做？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class StartTimeBeforeMethod implements BeforeMethodAdvice&#123;</div><div class="line">    @Override</div><div class="line">    public void before(Method method, Object[] args, Object target) &#123;</div><div class="line">        long startTime = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;开始计时&quot;);</div><div class="line">        ThreadLocalUtils.set(startTime);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class EndTimeAfterMethod implements AfterRunningAdvice &#123;</div><div class="line">    @Override</div><div class="line">    public Object after(Object returnVal, Method method, Object[] args, Object target) &#123;</div><div class="line">        long endTime = System.currentTimeMillis();</div><div class="line">        long startTime = ThreadLocalUtils.get();</div><div class="line">        ThreadLocalUtils.remove();</div><div class="line">        System.out.println(&quot;方法耗时：&quot; + (endTime - startTime) + &quot;ms&quot;);</div><div class="line">        return returnVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法开始前，记录时间，保存到 ThredLocal里面，方法结束记录时间，打印时间差。完成统计。</p>
<p>目标类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class TestService &#123;</div><div class="line">    public void testMethod() throws InterruptedException &#123;</div><div class="line">        System.out.println(&quot;this is a test method&quot;);</div><div class="line">        Thread.sleep(1000);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;beforeMethod&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.aop.test.StartTimeBeforeMethod&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;afterMethod&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.aop.test.EndTimeAfterMethod&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;testService&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.aop.test.TestService&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;testServiceProxy&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.aop.core.ProxyFactoryBean&quot;,</div><div class="line">    &quot;target&quot;:&quot;testService&quot;,</div><div class="line">    &quot;interceptorNames&quot;:[</div><div class="line">      &quot;beforeMethod&quot;,</div><div class="line">      &quot;afterMethod&quot;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MainTest &#123;</div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        AopApplictionContext aopApplictionContext = new AopApplictionContext(&quot;application.json&quot;);</div><div class="line">        aopApplictionContext.init();</div><div class="line">        TestService testService = (TestService) aopApplictionContext.getBean(&quot;testServiceProxy&quot;);</div><div class="line">        testService.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终我们的执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">开始计时</div><div class="line">this is a test method</div><div class="line">方法耗时：1015ms</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>至此 Aop 框架完成。</p>
<blockquote>
<p>引用 <a href="https://www.xilidou.com/2018/01/13/spring-aop/" target="_blank" rel="external">https://www.xilidou.com/2018/01/13/spring-aop/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring框架有两大特性，一个是IOC,另一个是AOP.对于Spring Aop的实现讲解的都不太透彻，大部分文章介绍了Spring Aop的底层技术使用了动态代理，至于Spring Aop的具体实现都语焉不详。这类文章看以后以后，我脑子里浮现的就是这样一个画面：&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java|徒手撸框架--实现IoC</title>
    <link href="http://yoursite.com/2018/02/10/Java-%E5%BE%92%E6%89%8B%E6%92%B8%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0IoC/"/>
    <id>http://yoursite.com/2018/02/10/Java-徒手撸框架-实现IoC/</id>
    <published>2018-02-10T14:45:42.000Z</published>
    <updated>2018-02-11T15:15:00.338Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h3><p>Spring 作为 J2ee 开发事实上的标准，是每个Java开发人员都需要了解的框架。但是Spring 的 IoC 和 Aop 的特性，对于初级的Java开发人员来说还是比较难于理解的。所以我就想写一系列的文章给大家讲解这些特性。从而能够进一步深入了解 Spring 框架。</p>
<p>读完这篇文章，你将会了解：</p>
<ul>
<li>什么是依赖注入和控制反转</li>
<li>Ioc有什么用</li>
<li>Spring的 Ioc 是怎么实现的</li>
<li>按照Spring的思路开发一个简单的Ioc框架</li>
</ul>
<h3 id="IoC-是什么？"><a href="#IoC-是什么？" class="headerlink" title="IoC 是什么？"></a>IoC 是什么？</h3><p>wiki百科的解释是：</p>
<blockquote>
<p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p>
</blockquote>
<h3 id="Ioc-有什么用？"><a href="#Ioc-有什么用？" class="headerlink" title="Ioc 有什么用？"></a>Ioc 有什么用？</h3><p>看完上面的解释你一定没有理解什么是 Ioc，因为是第一次看见上面的话也觉得云里雾里。</p>
<p>不过通过上面的描述我们可以大概的了解到，使用IoC的目的是为了解耦。也就是说IoC 是解耦的一种方法。</p>
<p>我们知道Java 是一门面向对象的语言，在 Java 中 Everything is Object，我们的程序就是由若干对象组成的。当我们的项目越来越大，合作的开发者越来越多的时候，我们的类就会越来越多，类与类之间的引用就会成指数级的增长。如下图所示：</p>
<p><img src="/images/徒手鲁框架--01.jpg" alt="徒手鲁框架--01" title="徒手鲁框架--01"></p>
<p>这样的工程简直就是灾难，如果我们引入 Ioc 框架。由框架来维护类的生命周期和类之间的引用。我们的系统就会变成这样：</p>
<p><img src="/images/徒手鲁框架--02.jpg" alt="徒手鲁框架--02" title="徒手鲁框架--02"></p>
<p>这个时候我们发现，我们类之间的关系都由 IoC 框架负责维护类，同时将类注入到需要的类中。也就是类的使用者只负责使用，而不负责维护。把专业的事情交给专业的框架来完成。大大的减少开发的复杂度。</p>
<p>用一个类比来理解这个问题。Ioc框架就是我们生活中的房屋中介，首先中介会收集市场上的房源，分别和各个房源的房东建立联系。当我们需要租房的时候，并不需要我们四处寻找各类租房信息。我们直接找房屋中介，中介就会根据你的需求提供相应的房屋信息。大大提升了租房的效率，减少了你与各类房东之间的沟通次数。</p>
<h3 id="Spring-的-IoC-是怎么实现的"><a href="#Spring-的-IoC-是怎么实现的" class="headerlink" title="Spring 的 IoC 是怎么实现的"></a>Spring 的 IoC 是怎么实现的</h3><p>了解Spring框架最直接的方法就阅读Spring的源码。但是Spring的代码抽象的层次很高，且处理的细节很高。对于大多数人来说不是太容易理解。我读了Spirng的源码以后以我的理解做一个总结,Spirng IoC 主要是以下几个步骤。</p>
<ul>
<li><ol>
<li>初始化 IoC 容器。</li>
</ol>
</li>
<li><ol>
<li>读取配置文件。</li>
</ol>
</li>
<li><ol>
<li>将配置文件转换为容器识别对的数据结构（这个数据结构在Spring中叫做 BeanDefinition</li>
</ol>
</li>
<li><ol>
<li>利用数据结构依次实例化相应的对象</li>
</ol>
</li>
<li><ol>
<li>注入对象之间的依赖关系</li>
</ol>
</li>
</ul>
<h3 id="自己实现一个IoC框架"><a href="#自己实现一个IoC框架" class="headerlink" title="自己实现一个IoC框架"></a>自己实现一个IoC框架</h3><p>为了方便，我们参考Spirng的IoC实现，去除所有与核心原理无关的逻辑。极简的实现 IoC 的框架。 项目使用 json 作为配置文件。使用 maven 管理 jar 包的依赖。</p>
<p>在这个框架中我们的对象都是单例的，并不支持Spirng的多种作用域。框架的实现使用了cglib和Java的反射。项目中我还使用了lombok用来简化代码。</p>
<p>下面我们就来编写 IoC 框架吧。</p>
<p>首先我们看看这个框架的基本结构：</p>
<p><img src="/images/徒手鲁框架--03.jpg" alt="徒手鲁框架--03" title="徒手鲁框架--03"></p>
<p>从宏观上观察一下这个框架，包含了2个package、在包 bean 中定义了我们框架的数据结构。core 是我们框架的核心逻辑所在。utils 是一些通用工具类。接下来我们就逐一讲解一下：</p>
<h4 id="1-bean-定义了框架的数据结构"><a href="#1-bean-定义了框架的数据结构" class="headerlink" title="1. bean 定义了框架的数据结构"></a>1. bean 定义了框架的数据结构</h4><p>BeanDefinition 是我们项目的核心数据结构。用于描述我们需要 IoC 框架管理的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">@ToString</div><div class="line">public class BeanDefinition &#123;</div><div class="line"></div><div class="line">    private String name;</div><div class="line"></div><div class="line">    private String className;</div><div class="line"></div><div class="line">    private String interfaceName;</div><div class="line"></div><div class="line">    private List&lt;ConstructorArg&gt; constructorArgs;</div><div class="line"></div><div class="line">    private List&lt;PropertyArg&gt; propertyArgs;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>包含了对象的 name，class的名称。如果是接口的实现，还有该对象实现的接口。以及构造函数的传参的列表 constructorArgs 和需要注入的参数列表 propertyArgList。</p>
<h4 id="2-再看看我们的工具类包里面的对象："><a href="#2-再看看我们的工具类包里面的对象：" class="headerlink" title="2. 再看看我们的工具类包里面的对象："></a>2. 再看看我们的工具类包里面的对象：</h4><p>ClassUtils 负责处理 Java 类的加载,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class ClassUtils &#123;</div><div class="line">    public static ClassLoader getDefultClassLoader()&#123;</div><div class="line">        return Thread.currentThread().getContextClassLoader();</div><div class="line">    &#125;</div><div class="line">    public static Class loadClass(String className)&#123;</div><div class="line">        try &#123;</div><div class="line">            return getDefultClassLoader().loadClass(className);</div><div class="line">        &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们只写了一个方法，就是通过 className 这个参数获取对象的 Class。</p>
<p>BeanUtils 负责处理对象的实例化，这里我们使用了 cglib 这个工具包，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class BeanUtils &#123;</div><div class="line">    public static &lt;T&gt; T instanceByCglib(Class&lt;T&gt; clz,Constructor ctr,Object[] args) &#123;</div><div class="line">        Enhancer enhancer = new Enhancer();</div><div class="line">        enhancer.setSuperclass(clz);</div><div class="line">        enhancer.setCallback(NoOp.INSTANCE);</div><div class="line">        if(ctr == null)&#123;</div><div class="line">            return (T) enhancer.create();</div><div class="line">        &#125;else &#123;</div><div class="line">            return (T) enhancer.create(ctr.getParameterTypes(),args);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ReflectionUtils 主要通过 Java 的反射原理来完成对象的依赖注入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ReflectionUtils &#123;</div><div class="line"></div><div class="line">    public static void injectField(Field field,Object obj,Object value) throws IllegalAccessException &#123;</div><div class="line">        if(field != null) &#123;</div><div class="line">            field.setAccessible(true);</div><div class="line">            field.set(obj, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>injectField(Field field,Object obj,Object value) 这个方法的作用就是，设置 obj 的 field 为 value。</p>
<p>JsonUtils 的作用就是为了解析我们的json配置文件。代码比较长，与我们的 IoC 原理关系不大，感兴趣的同学可以自行从github上下载代码看看。</p>
<p>有了这几个趁手的工具，我们就可以开始完成 Ioc 框架的核心代码了。</p>
<h4 id="3-核心逻辑"><a href="#3-核心逻辑" class="headerlink" title="3. 核心逻辑"></a>3. 核心逻辑</h4><p>我的 IoC 框架，目前只支持一种 ByName 的注入。所以我们的 BeanFactory 就只有一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface BeanFactory &#123;</div><div class="line">    Object getBean(String name) throws Exception;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们实现了这个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">public class BeanFactoryImpl implements BeanFactory&#123;</div><div class="line"></div><div class="line">    private static final ConcurrentHashMap&lt;String,Object&gt; beanMap = new ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    private static final ConcurrentHashMap&lt;String,BeanDefinition&gt; beanDefineMap= new ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    private static final Set&lt;String&gt; beanNameSet = Collections.synchronizedSet(new HashSet&lt;&gt;());</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getBean(String name) throws Exception &#123;</div><div class="line">        //查找对象是否已经实例化过</div><div class="line">        Object bean = beanMap.get(name);</div><div class="line">        if(bean != null)&#123;</div><div class="line">            return bean;</div><div class="line">        &#125;</div><div class="line">        //如果没有实例化，那就需要调用createBean来创建对象</div><div class="line">        bean =  createBean(beanDefineMap.get(name));</div><div class="line">        </div><div class="line">        if(bean != null) &#123;</div><div class="line"></div><div class="line">            //对象创建成功以后，注入对象需要的参数</div><div class="line">            populatebean(bean);</div><div class="line">            </div><div class="line">            //再吧对象存入Map中方便下次使用。</div><div class="line">            beanMap.put(name,bean;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //结束返回</div><div class="line">        return bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void registerBean(String name, BeanDefinition bd)&#123;</div><div class="line">        beanDefineMap.put(name,bd);</div><div class="line">        beanNameSet.add(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Object createBean(BeanDefinition beanDefinition) throws Exception &#123;</div><div class="line">        String beanName = beanDefinition.getClassName();</div><div class="line">        Class clz = ClassUtils.loadClass(beanName);</div><div class="line">        if(clz == null) &#123;</div><div class="line">            throw new Exception(&quot;can not find bean by beanName&quot;);</div><div class="line">        &#125;</div><div class="line">        List&lt;ConstructorArg&gt; constructorArgs = beanDefinition.getConstructorArgs();</div><div class="line">        if(constructorArgs != null &amp;&amp; !constructorArgs.isEmpty())&#123;</div><div class="line">            List&lt;Object&gt; objects = new ArrayList&lt;&gt;();</div><div class="line">            for (ConstructorArg constructorArg : constructorArgs) &#123;</div><div class="line">                objects.add(getBean(constructorArg.getRef()));</div><div class="line">            &#125;</div><div class="line">            return BeanUtils.instanceByCglib(clz,clz.getConstructor(),objects.toArray());</div><div class="line">        &#125;else &#123;</div><div class="line">            return BeanUtils.instanceByCglib(clz,null,null);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void populatebean(Object bean) throws Exception &#123;</div><div class="line">        Field[] fields = bean.getClass().getSuperclass().getDeclaredFields();</div><div class="line">        if (fields != null &amp;&amp; fields.length &gt; 0) &#123;</div><div class="line">            for (Field field : fields) &#123;</div><div class="line">                String beanName = field.getName();</div><div class="line">                beanName = StringUtils.uncapitalize(beanName);</div><div class="line">                if (beanNameSet.contains(field.getName())) &#123;</div><div class="line">                    Object fieldBean = getBean(beanName);</div><div class="line">                    if (fieldBean != null) &#123;</div><div class="line">                        ReflectionUtils.injectField(field,bean,fieldBean);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先我们看到在 BeanFactory 的实现中。我们有两 HashMap，beanMap 和 beanDefineMap。 beanDefineMap 存储的是对象的名称和对象对应的数据结构的映射。</p>
<p>容器初始化的时候，会调用 BeanFactoryImpl.registerBean 方法。把 对象的 BeanDefination 数据结构，存储起来。</p>
<p>当我们调用 getBean() 的方法的时候。会先到 beanMap 里面查找，有没有实例化好的对象。如果没有，就会qubeanDefineMap查找这个对象对应的 BeanDefination。再利用DeanDefination去实例化一个对象。</p>
<p>对象实例化成功以后，我们还需要注入相应的参数，调用 populatebean()这个方法。在 populateBean 这个方法中，会扫描对象里面的Field，如果对象中的 Field 是我们IoC容器管理的对象，那就会调用 我们上文实现的 ReflectionUtils.injectField来注入对象。</p>
<p>一切准备妥当之后，我们对象就完成了整个 IoC 流程。最后这个对象放入 beanMap 中,方便下一次使用。</p>
<p>所以我们可以知道 BeanFactory 是管理和生成对象的地方。</p>
<h4 id="4-容器"><a href="#4-容器" class="headerlink" title="4. 容器"></a>4. 容器</h4><p>我们所谓的容器，就是对BeanFactory的扩展，负责管理 BeanFactory。我们的这个IoC 框架使用 Json 作为配置文件，所以我们容器就命名为 JsonApplicationContext。当然之后你愿意实现 XML 作为配置文件的容器你就可以自己写一个 XmlApplicationContext，如果基于注解的容器就可以叫AnnotationApplcationContext。这些实现留个大家去完成。</p>
<p>我们看看 ApplicationContext 的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class JsonApplicationContext extends BeanFactoryImpl&#123;</div><div class="line">    private String fileName;</div><div class="line">    public JsonApplicationContext(String fileName) &#123;</div><div class="line">        this.fileName = fileName;</div><div class="line">    &#125;</div><div class="line">    public void init()&#123;</div><div class="line">        loadFile();</div><div class="line">    &#125;</div><div class="line">    private void loadFile()&#123;</div><div class="line">        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);</div><div class="line">        List&lt;BeanDefinition&gt; beanDefinitions = JsonUtils.readValue(is,new TypeReference&lt;List&lt;BeanDefinition&gt;&gt;()&#123;&#125;);</div><div class="line">        if(beanDefinitions != null &amp;&amp; !beanDefinitions.isEmpty()) &#123;</div><div class="line">            for (BeanDefinition beanDefinition : beanDefinitions) &#123;</div><div class="line">                registerBean(beanDefinition.getName(), beanDefinition);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个容器的作用就是 读取配置文件。将配置文件转换为容器能够理解的 BeanDefination。然后使用 registerBean 方法。注册这个对象。</p>
<p>至此，一个简单版的 IoC 框架就完成。</p>
<h4 id="5-框架的使用"><a href="#5-框架的使用" class="headerlink" title="5. 框架的使用"></a>5. 框架的使用</h4><p>我们写一个测试类来看看我们这个框架怎么使用：</p>
<p>首先我们有三个对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Hand &#123;</div><div class="line">    public void waveHand()&#123;</div><div class="line">        System.out.println(&quot;挥一挥手&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Mouth &#123;</div><div class="line">    public void speak()&#123;</div><div class="line">        System.out.println(&quot;say hello world&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Robot &#123;</div><div class="line">    //需要注入 hand 和 mouth </div><div class="line">    private Hand hand;</div><div class="line">    private Mouth mouth;</div><div class="line"></div><div class="line">    public void show()&#123;</div><div class="line">        hand.waveHand();</div><div class="line">        mouth.speak();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们需要为我们的 Robot 机器人注入 hand 和 mouth。</p>
<p>配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;robot&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.ioc.entity.Robot&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;hand&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.ioc.entity.Hand&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;mouth&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.ioc.entity.Mouth&quot;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>这个时候写一个测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        JsonApplicationContext applicationContext = new JsonApplicationContext(&quot;application.json&quot;);</div><div class="line">        applicationContext.init();</div><div class="line">        Robot aiRobot = (Robot) applicationContext.getBean(&quot;robot&quot;);</div><div class="line">        aiRobot.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行以后输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">挥一挥手</div><div class="line">say hello world</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>可以看到我们成功的给我的 aiRobot 注入了 hand 和 mouth。</p>
<p>至此我们 Ioc 框架开发完成。</p>
<blockquote>
<p>引用<a href="https://www.xilidou.com/2018/01/08/spring-ioc/" target="_blank" rel="external">https://www.xilidou.com/2018/01/08/spring-ioc/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在开头&quot;&gt;&lt;a href=&quot;#写在开头&quot; class=&quot;headerlink&quot; title=&quot;写在开头&quot;&gt;&lt;/a&gt;写在开头&lt;/h3&gt;&lt;p&gt;Spring 作为 J2ee 开发事实上的标准，是每个Java开发人员都需要了解的框架。但是Spring 的 IoC 和 A
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PHP|正则表达式</title>
    <link href="http://yoursite.com/2018/02/10/PHP-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/02/10/PHP-正则表达式/</id>
    <published>2018-02-10T09:46:44.000Z</published>
    <updated>2018-02-10T02:42:20.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（基础篇）正则表达式的语法汇总与详细介绍"><a href="#（基础篇）正则表达式的语法汇总与详细介绍" class="headerlink" title="（基础篇）正则表达式的语法汇总与详细介绍"></a>（基础篇）正则表达式的语法汇总与详细介绍</h3><p>正则表达式是个好东西啊，可以让我们在一堆数据中找到我们需要的数据，这一点在爬虫中能很好的体现，还有就是能帮助我们检查数据。用好正则表达式往往会起到事半功倍的效果，以下是对PHP正则表达式的语法汇总和详细介绍。</p>
<p>首先，让我们看看两个特别的字符：<strong>‘^’ 和 ‘$’</strong> 他们是分别用来匹配字符串的开始和结束，一下分别举例说明</p>
<ul>
<li>“^The”: 匹配以 “The”开头的字符串;</li>
<li>“of despair$”: 匹配以 “of despair” 结尾的字符串;</li>
<li>“^abc$”: 匹配以abc开头和以abc结尾的字符串，实际上是只有abc与之匹配</li>
<li>“notice”: 匹配包含notice的字符串</li>
</ul>
<p>你可以看见如果你没有用我们提到的两个字符（最后一个例子），就是说 模式（正则表达式） 可以出现在被检验字符串的任何地方，你没有把他锁定到两边</p>
<p><strong>这里还有几个字符 ‘*’, ‘+’,和 ‘?’,</strong></p>
<p>他们用来表示一个字符可以出现的次数或者顺序. 他们分别表示：”zero or more”, “one or more”, and “zero or one.” 这里是一些例子:</p>
<ul>
<li>“ab*”: 匹配字符串a和0个或者更多b组成的字符串(“a”, “ab”, “abbb”, etc.);</li>
<li>“ab+”: 和上面一样，但最少有一个b (“ab”, “abbb”, etc.);</li>
<li>“ab?”:匹配0个或者一个b;</li>
<li>“a?b+$”: 匹配以一个或者0个a再加上一个以上的b结尾的字符串.</li>
</ul>
<p><strong>你也可以在大括号里面限制字符出现的个数，比如</strong></p>
<ul>
<li>“ab{2}”: 匹配一个a后面跟两个b（一个也不能少）(“abb”);</li>
<li>“ab{2,}”: 最少更两个b(“abb”, “abbbb”, etc.);</li>
<li>“ab{3,5}”: 3－5个b(“abbb”, “abbbb”, or “abbbbb”).</li>
</ul>
<p>你还要注意到你必须总是指定 (i.e, “{0,2}”, not “{,2}”.同样，你必须注意到, ‘*’, ‘+’, 和’?’ 分别和一下三个范围标注是一样的，”{0,}”, “{1,}”, 和 “{0,1}”。</p>
<p><strong>现在把一定数量的字符放到小括号里，比如:</strong></p>
<ul>
<li>“a(bc)*”: 匹配 a 后面跟0个或者一个”bc”;</li>
<li>“a(bc){1,5}”: 一个到5个 “bc.”</li>
</ul>
<p><strong>还有一个字符 ‘│’, 相当于OR 操作:</strong></p>
<ul>
<li>“hi│hello”: 匹配含有”hi” 或者 “hello” 的 字符串;</li>
<li>“(b│cd)ef”: 匹配含有 “bef” 或者 “cdef”的字符串;</li>
<li>“(a│b)*c”: 匹配含有这样 - 多个（包括0个）a或b，后面跟一个c</li>
</ul>
<p>的字符串 的字符串;</p>
<p><strong>一个点(‘.’)可以代表所有的 单一字符:</strong></p>
<ul>
<li>“a.[0-9]”: 一个a跟一个字符再跟一个数字的 （含有这样一个字符串的字符串将被匹配，以后省略此括号）</li>
<li>“^.{3}$”: 以三个字符结尾 .</li>
</ul>
<p><strong>中括号括住的内容只匹配一个 单一的字符</strong></p>
<ul>
<li>“[ab]”: 匹配单个的 a 或者 b ( 和 “a│b” 一样);</li>
<li>“[a-d]”: 匹配’a’ 到’d’的单个字符 (和”a│b│c│d” 还有 “[abcd]”效果一样);</li>
<li>“^[a-zA-Z]”: 匹配以字母开头的字符串</li>
<li>“[0-9]%”: 匹配含有 形如 x％ 的字符串</li>
<li>“,[a-zA-Z0-9]$”: 匹配以逗号在加一个数字或字母结尾的字符串</li>
</ul>
<p>你也可以把你不想要得字符列在中括号里，你只需要在总括号里面使用’^’ 作为开头 (i.e., “%[^a-zA-Z]%” 匹配含有 两个百分号里面有一个非字母 的字符串).</p>
<p>为了能够解释，但”^.[$()│*+?{/“作为有特殊意义的字符的时候，你必须在这些字符面前加’’, 还有在php3中你应该避免在模式的最前面使用/, 比如说,正则表达式 “(/$│?[0-9]+” 应该这样调用 ereg(“(//$│?[0-9]+”, $str) (不知道php4是不是一样)</p>
<p>不要忘记在中括号里面的字符是这条规路的例外—在中括号里面, 所有的特殊字符，包括(‘’), 都将失去他们的特殊性质(i.e., “[*/+?{}.]”匹配含有这些字符的字符串). 还有,正如regx的手册告诉我们: “如果列表里含有 ‘]’, 最好把它作为列表里的第一个字符(可能跟在’^’后面). 如果含有’-‘, 最好把它放在最前面或者最后面, or 或者一个范围的第二个结束点(i.e. [a-d-0-9]中间的‘-‘将有效.</p>
<p>为了完整, 我应该涉及到 collating sequences, character classes, 同埋 equivalence classes. 但我在这些方面不想讲的太详细, 这些在下面的文章仲都不需要涉及到. 你们可以在regex man pages 那里得到更多消息.</p>
<h3 id="如何构建一个模式来匹配-货币数量-的输入"><a href="#如何构建一个模式来匹配-货币数量-的输入" class="headerlink" title="如何构建一个模式来匹配 货币数量 的输入"></a>如何构建一个模式来匹配 货币数量 的输入</h3><p>好了，现在我们要用我们所学的来干一些有用的事：构建一个匹配模式去检查输入的信息是否为一个表示money的数字。我们认为一个表示money的数量有四种方式： “10000.00” 和 “10,000.00”,或者没有小数部分, “10000” and “10,000”. 现在让我们开始构建这个匹配模式:</p>
<p>^[1-9][0-9]*$</p>
<p>这是所变量必须以非0的数字开头.但这也意味着 单一的 “0” 也不能通过测试. 以下是解决的方法:</p>
<p>^(0│[1-9][0-9]*)$</p>
<p>“只有0和不以0开头的数字与之匹配”，我们也可以允许一个负号再数字之前:</p>
<p>^(0│-?[1-9][0-9]*)$</p>
<p>这就是: “0 或者 一个以0开头可能有一个负号在前面的数字.” 好了, 好了现在让我们别那么严谨，允许以0开头.现在让我们放弃负号, 因为我们在表示钱币的时候并不需要用到. 我们现在指定模式 用来匹配小数部分:</p>
<p>^[0-9]+(/.[0-9]+)?$</p>
<p>这暗示匹配的字符串必须最少以一个阿拉伯数字开头. 但是注意，在上面模式中 “10.” 是不匹配的, 只有 “10” 和 “10.2” 才可以. （你知道为什么吗）</p>
<p>^[0-9]+(/.[0-9]{2})?$</p>
<p>我们上面指定小数点后面必须有两位小数.如果你认为这样太苛刻,你可以改成:</p>
<p>^[0-9]+(/.[0-9]{1,2})?$</p>
<p>这将允许小数点后面有一到两个字符. 现在我们加上用来增加可读性的逗号（每隔三位）, 我们可以这样表示:</p>
<p>^[0-9]{1,3}(,[0-9]{3})*(/.[0-9]{1,2})?$</p>
<p>不要忘记加号 ‘+’ 可以被乘号 ‘*’ 替代如果你想允许空白字符串被输入话 (为什么?). 也不要忘记反斜杆 ‘/‘ 在php字符串中可能会出现错误 (很普遍的错误). 现在，我们已经可以确认字符串了, 我们现在把所有逗号都去掉 str_replace(“,”, “”, $money) 然后在把类型看成 double然后我们就可以通过他做数学计算了.</p>
<h3 id="构造检查email的正则表达式"><a href="#构造检查email的正则表达式" class="headerlink" title="构造检查email的正则表达式"></a>构造检查email的正则表达式</h3><p>好,让我们继续讨论怎么验证一个email地址. 在一个完整的email地址中有三个部分: POP3 用户名 (在 ‘@’ 左边的一切), ‘@’, 服务器名(就是剩下那部分). 用户名可以含有大小写字母阿拉伯数字,句号 (‘.’), 减号(‘-‘), and 下划线 (‘_’). 服务器名字也是符合这个规则,当然下划线除外.</p>
<p>现在, 用户名的开始和结束都不能是句点. 服务器也是这样. 还有你不能有两个连续的句点他们之间至少存在一个字符，好现在我们来看一下怎么为用户名写一个匹配模式:</p>
<p>^[_a-zA-Z0-9-]+$</p>
<p>现在还不能允许句号的存在. 我们把它加上:</p>
<p>^[_a-zA-Z0-9-]+(/.[_a-zA-Z0-9-]+)*$</p>
<p>上面的意思就是说: “以至少一个规范字符（除.外）开头,后面跟着0个或者多个以点开始的字符串.”</p>
<p>简单化一点, 我们可以用 eregi()取代 ereg().eregi()对大小写不敏感, 我们就不需要指定两个范围 “a-z” 和 “A-Z” – 只需要指定一个就可以了:</p>
<p>^[_a-z0-9-]+(/.[_a-z0-9-]+)*$</p>
<p>后面的服务器名字也是一样,但要去掉下划线:</p>
<p>^[a-z0-9-]+(/.[a-z0-9-]+)*$</p>
<p>Done. 现在只需要用”@”把两部分连接:</p>
<p>^[_a-z0-9-]+(/.[_a-z0-9-]+)<em>@[a-z0-9-]+(/.[a-z0-9-]+)</em>$</p>
<p>这就是完整的email认证匹配模式了,只需要调用</p>
<p>eregi(‘^[_a-z0-9-]+(/.[_a-z0-9-]+)<em>@[a-z0-9-]+(/.[a-z0-9-]+)</em>$ ‘,$eamil)</p>
<p>就可以得到是否为email了</p>
<h3 id="校验是否全由数字组成"><a href="#校验是否全由数字组成" class="headerlink" title="校验是否全由数字组成"></a>校验是否全由数字组成</h3><p>/^[0-9]{1,20}$/</p>
<p>^ 表示打头的字符要匹配紧跟^后面的规则</p>
<p>$ 表示打头的字符要匹配紧靠$前面的规则</p>
<p>[ ] 中的内容是可选字符集</p>
<p>[0-9] 表示要求字符范围在0-9之间</p>
<p>{1,20}表示数字字符串长度合法为1到20，即为[0-9]中的字符出现次数的范围是1到20次。</p>
<p>/^ 和 $/成对使用应该是表示要求整个字符串完全匹配定义的规则，而不是只匹配字符串中的一个子串。</p>
<h3 id="校验登录名：只能输入5-20个以字母开头、可带数字、“-”、“-”的字串"><a href="#校验登录名：只能输入5-20个以字母开头、可带数字、“-”、“-”的字串" class="headerlink" title="校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串"></a>校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串</h3><p>/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$/</p>
<p>^[a-zA-Z]{1} 表示第一个字符要求是字母。</p>
<p>([a-zA-Z0-9]|[.<em>]){4,19} 表示从第二位开始（因为它紧跟在上个表达式后面）的一个长度为4到9位的字符串，它要求是由大小写字母、数字或者特殊字符集[.</em>]组成。</p>
<h3 id="校验用户姓名：只能输入1-30个以字母开头的字串"><a href="#校验用户姓名：只能输入1-30个以字母开头的字串" class="headerlink" title="校验用户姓名：只能输入1-30个以字母开头的字串"></a>校验用户姓名：只能输入1-30个以字母开头的字串</h3><p>/^[a-zA-Z]{1,30}$/</p>
<h3 id="校验密码：只能输入6-20个字母、数字、下划线"><a href="#校验密码：只能输入6-20个字母、数字、下划线" class="headerlink" title="校验密码：只能输入6-20个字母、数字、下划线"></a>校验密码：只能输入6-20个字母、数字、下划线</h3><p>/^(\w){6,20}$/</p>
<p>\w：用于匹配字母，数字或下划线字符</p>
<h3 id="校验普通电话、传真号码：可以“-”或数字开头，可含有“-”-和-“-”"><a href="#校验普通电话、传真号码：可以“-”或数字开头，可含有“-”-和-“-”" class="headerlink" title="校验普通电话、传真号码：可以“+”或数字开头，可含有“-” 和 “ ”"></a>校验普通电话、传真号码：可以“+”或数字开头，可含有“-” 和 “ ”</h3><p>/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/</p>
<p>\d：用于匹配从0到9的数字；</p>
<p>“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次</p>
<p>可以匹配的字符串如：+123 -999 999 ； +123-999 999 ；123 999 999 ；+123 999999等</p>
<h3 id="校验URL"><a href="#校验URL" class="headerlink" title="校验URL"></a>校验URL</h3><p>/^http[s]{0,1}:\/\/.+$/ 或 /^http[s]{0,1}:\/\/.{1,n}$/ (表示url串的长度为length(“https://”) + n )</p>
<p>\ / ：表示字符“/”。</p>
<p>. 表示所有字符的集</p>
<ul>
<li>等同于{1,}，就是1到正无穷吧。</li>
</ul>
<h3 id="校验纯中文字符"><a href="#校验纯中文字符" class="headerlink" title="校验纯中文字符"></a>校验纯中文字符</h3><p>/^[\u4E00-\u9FA5]+$/</p>
<p>[\u4E00-\u9FA5] ：估计是中文字符集的范围吧</p>
<h3 id="正则表达式的其他用法"><a href="#正则表达式的其他用法" class="headerlink" title="正则表达式的其他用法"></a>正则表达式的其他用法</h3><h4 id="提取字符串"><a href="#提取字符串" class="headerlink" title="提取字符串"></a>提取字符串</h4><p>ereg() and eregi() 有一个特性是允许用户通过正则表达式去提取字符串的一部分(具体用法你可以阅读手册). 比如说,我们想从 path/URL 提取文件名 – 下面的代码就是你需要:</p>
<p>ereg(“([^///]*)$”, $pathOrUrl, $regs);</p>
<p>echo $regs[1];</p>
<h4 id="高级的代换"><a href="#高级的代换" class="headerlink" title="高级的代换"></a>高级的代换</h4><p>ereg_replace() 和 eregi_replace()也是非常有用的: 假如我们想把所有的间隔负号都替换成逗号:</p>
<p>ereg_replace(“[ /n/r/t]+”, “,”, trim($str));  </p>
<p>PHP被大量的应用于Web的后台CGI开发，通常是在用户数据数据之后得出某种结果，但是如果用户输入的数据不正确，就会出现问题，比如说某人的生日是”2月30日”！那应该怎么样来检验暑假是否正确呢？ 在PHP中加入了正则表达式的支持，让我们可以十分方便的进行数据匹配。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;（基础篇）正则表达式的语法汇总与详细介绍&quot;&gt;&lt;a href=&quot;#（基础篇）正则表达式的语法汇总与详细介绍&quot; class=&quot;headerlink&quot; title=&quot;（基础篇）正则表达式的语法汇总与详细介绍&quot;&gt;&lt;/a&gt;（基础篇）正则表达式的语法汇总与详细介绍&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP|curl爬虫入门</title>
    <link href="http://yoursite.com/2018/02/09/PHP-curl%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/02/09/PHP-curl爬虫入门/</id>
    <published>2018-02-08T19:29:59.000Z</published>
    <updated>2018-02-08T13:47:58.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-curl"><a href="#What-is-curl" class="headerlink" title="What is curl"></a>What is curl</h3><blockquote>
<p>PHP supports libcurl, a library created by Daniel Stenberg, that allows you to connect and communicate to many different types of servers with many different types of protocols. libcurl currently supports the http, https, ftp, gopher, telnet, dict, file, and ldap protocols. libcurl also supports HTTPS certificates, HTTP POST, HTTP PUT, FTP uploading (this can also be done with PHP’s ftp extension), HTTP form based upload, proxies, cookies, and user+password authentication.</p>
</blockquote>
<p>这是PHP对于curl的一个解释，简单地说就是，curl是一个库，能让你通过URL和许多不同种的服务器进行勾搭、搭讪和深入交流，并且还支持许多协议。并且人家还说了curl可以支持https认证、http post、ftp上传、代理、cookies、简单口令认证等等功能啦。</p>
<p>说了那么多其实没什么感觉吧，在应用中才有感觉，我起初也是需要在服务器端向另一个服务器发起一个POST请求才开始接触curl的，然后才有了感觉。</p>
<p>在正式讲怎么用之前啊，先提一句，你得先在你的PHP环境中安装和启用curl模块，具体方式我就不讲了，不同系统不同安装方式，可以google查一下，或者查阅PHP官方的文档，还挺简单的。</p>
<h3 id="初始牛刀"><a href="#初始牛刀" class="headerlink" title="初始牛刀"></a>初始牛刀</h3><blockquote>
<p>工具到手，先要把玩，试试顺不顺手，不然一拿来就用，把你自己的代码搞得乌烟瘴气还怎么去撩服务器呢？</p>
</blockquote>
<p>比如我们以著名的“测试网络是否连接”的网站——百度为例，来尝试下curl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    // create curl resource </div><div class="line">   $ch = curl_init(); </div><div class="line"></div><div class="line">   // set url </div><div class="line">   curl_setopt($ch, CURLOPT_URL, &quot;baidu.com&quot;); </div><div class="line"></div><div class="line">   //return the transfer as a string </div><div class="line">   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">   // $output contains the output string </div><div class="line">   $output = curl_exec($ch); </div><div class="line"></div><div class="line">    //echo output</div><div class="line">    echo $output;</div><div class="line"></div><div class="line">   // close curl resource to free up system resources </div><div class="line">   curl_close($ch);      </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>当你在本地环境浏览器打开这个php文件时，页面出现的是百度的首页，特么我刚才输入的“localhost”呢？</p>
<p>上面的代码和注释已经充分说明了这段代码在干啥。</p>
<p>$ch = curl_init()，创建了一个curl会话资源，成功返回一个句柄；<br>curl_setopt($ch, CURLOPT_URL, “baidu.com”)，设置URL，不用说；</p>
<p>上面两句可以合起来变一句$ch = curl_init(“baidu.com”)；</p>
<p>curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0)这是设置是否将响应结果存入变量，1是存入，0是直接echo出；</p>
<p>$output = curl_exec($ch)执行，然后将响应结果存入$output变量，供下面echo；</p>
<p>curl_close($ch)关闭这个curl会话资源。</p>
<p>PHP中使用curl大致就是这么一个形式，其中第二步，通过curl_setopt方法来设置参数是最复杂也是最重要的，感兴趣可以去看官方的关于可设置参数的详细参考，长地让你看得想吐，还是根据需要熟能生巧吧。</p>
<p>小结一下，php中curl用法就是：创建curl会话 -&gt; 配置参数 -&gt; 执行 -&gt; 关闭会话。</p>
<p>下面我们来看一些常用的情景，我们需要如何“打扮自己”（配置参数）才能正确“撩妹”（正确撩到服务器）。</p>
<h3 id="打个招呼——GET和POST请求以及HTTPS协议处理"><a href="#打个招呼——GET和POST请求以及HTTPS协议处理" class="headerlink" title="打个招呼——GET和POST请求以及HTTPS协议处理"></a>打个招呼——GET和POST请求以及HTTPS协议处理</h3><p>先和服务器打个招呼吧，给服务器发个Hello看她怎么回，这里最方便的方式就是向服务器发出GET请求，当然POST这种小纸条也OK咯。</p>
<h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>我们以“在某著名同性交友网站github中搜索关键词”为例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//通过curl进行GET请求的案例</div><div class="line">&lt;?php </div><div class="line">    // create curl resource </div><div class="line">   $ch = curl_init(); </div><div class="line"></div><div class="line">   // set url </div><div class="line">   curl_setopt($ch, CURLOPT_URL, &quot;https://github.com/search?q=react&quot;); </div><div class="line"></div><div class="line">   //return the transfer as a string </div><div class="line">   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">   // $output contains the output string </div><div class="line">   $output = curl_exec($ch); </div><div class="line"></div><div class="line">   //echo output</div><div class="line">   echo $output;</div><div class="line"></div><div class="line">   // close curl resource to free up system resources </div><div class="line">   curl_close($ch);      </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>好像和之前那个例子没啥差别，但这里有2个可以提的点： </p>
<ul>
<li>默认请求方式是GET，所以不需要显式指定GET方式； </li>
<li>https请求，非http请求，可能有人在各个地方看到过HTTPS请求需要加几行代码绕过SSL证书的检查等方式来成功请求到资源，但是这里好像并不需要，原因是什么？</li>
</ul>
<blockquote>
<p>The two Curl options are defined as:<br>CURLOPT_SSL_VERIFYPEER - verify the peer’s SSL certificate<br>CURLOPT_SSL_VERIFYHOST - verify the certificate’s name against host</p>
<p>They both default to true in Curl, and shouldn’t be disabled unless you’ve got a good reason. Disabling them is generally only needed if you’re sending requests to servers with invalid or self-signed certificates, which is only usually an issue in development. Any publicly-facing site should be presenting a valid certificate, and by disabling these options you’re potentially opening yourself up to security issues.</p>
</blockquote>
<p>即，除非用了非法或者自制的证书，这大多数出现在开发环境中，你才将这两行设置为false以避开ssl证书检查，否者不需要这么做，这么做是不安全的做法。</p>
<h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>那如何进行POST请求呢？为了测试，先在某个测试服务器传了一个接收POST的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//testRespond.php</div><div class="line">&lt;?php  </div><div class="line">    $phpInput=file_get_contents(&apos;php://input&apos;);</div><div class="line">    echo urldecode($phpInput);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>发送普通数据<br>然后在本地写一个请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $data=array(</div><div class="line">    &quot;name&quot; =&gt; &quot;Lei&quot;,</div><div class="line">    &quot;msg&quot; =&gt; &quot;Are you OK?&quot;</div><div class="line">    );</div><div class="line"></div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://测试服务器的IP马赛克/testRespond.php&quot;); </div><div class="line">    curl_setopt($ch, CURLOPT_POST, 1);</div><div class="line">    //The number of seconds to wait while trying to connect. Use 0 to wait indefinitely.</div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS , http_build_query($data));</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line"></div><div class="line">    echo $output;</div><div class="line"></div><div class="line">    curl_close($ch);      </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>浏览器运行结果是：</p>
<blockquote>
<p>name=Lei&amp;msg=Are you OK?</p>
</blockquote>
<p>这里我们是构造了一个数组作为POST数据传给服务器：</p>
<p>curl_setopt($ch, CURLOPT_POST, 1)表明是POST请求；</p>
<p>curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60)设置一个最长的可忍受的连接时间，秒为单位，总不能一直等下去变成木乃伊吧；</p>
<p>curl_setopt($ch, CURLOPT_POSTFIELDS , http_build_query($data))设置POST的数据域，因为这里是数组数据形式的（等会来讲json格式），所以用http_build_query处理一下。</p>
<h4 id="对于json数据呢，又怎么进行POST请求呢？"><a href="#对于json数据呢，又怎么进行POST请求呢？" class="headerlink" title="对于json数据呢，又怎么进行POST请求呢？"></a>对于json数据呢，又怎么进行POST请求呢？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $data=&apos;&#123;&quot;name&quot;:&quot;Lei&quot;,&quot;msg&quot;:&quot;Are you OK?&quot;&#125;&apos;;</div><div class="line"></div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://测试服务器的IP马赛克/testRespond.php&quot;); </div><div class="line">    curl_setopt($ch, CURLOPT_POST, 1);</div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_HTTPHEADER, array(&apos;Content-Type: application/json&apos;, &apos;Content-Length:&apos; . strlen($data)));</div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS , $data);</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line"></div><div class="line">    echo $output;</div><div class="line"></div><div class="line">    curl_close($ch);      </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>浏览器执行，显示：</p>
<blockquote>
<p>{“name”:”Lei”,”msg”:”Are you OK?”}</p>
</blockquote>
<h3 id="如何上传和下载文件"><a href="#如何上传和下载文件" class="headerlink" title="如何上传和下载文件"></a>如何上传和下载文件</h3><p>已经和服务器勾搭上了，这时候得要个照片来看一看了吧，你也得把自己的照片发上去让人看一看了，虽然两个人在一起外貌不重要，但是男俊女靓总是最棒的。</p>
<h4 id="传一张自己的照片过去表表诚意-——-POST上传文件"><a href="#传一张自己的照片过去表表诚意-——-POST上传文件" class="headerlink" title="传一张自己的照片过去表表诚意 —— POST上传文件"></a>传一张自己的照片过去表表诚意 —— POST上传文件</h4><p>同样远程服务器端我们先传好一个接收脚本,接收图片并且保存到本地，注意文件和文件夹权限问题，需要有写入权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    if($_FILES)&#123;</div><div class="line">        $filename = $_FILES[&apos;upload&apos;][&apos;name&apos;];</div><div class="line">          $tmpname = $_FILES[&apos;upload&apos;][&apos;tmp_name&apos;];</div><div class="line">          //保存图片到当前脚本所在目录</div><div class="line">          if(move_uploaded_file($tmpname,dirname(__FILE__).&apos;/&apos;.$filename))&#123;</div><div class="line">            echo (&apos;上传成功&apos;);</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>然后我们再来写我们本地服务器的php curl部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $data = array(&apos;name&apos;=&gt;&apos;boy&apos;, &quot;upload&quot;=&gt;&quot;@boy.png&quot;);</div><div class="line"></div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://远程服务器地址马赛克/testRespond.php&quot;); </div><div class="line">    curl_setopt($ch, CURLOPT_POST, 1);</div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS , $data);</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line"></div><div class="line">    echo $output;</div><div class="line"></div><div class="line">    curl_close($ch);         </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>浏览器中运行一下，什么都米有，去看一眼远程的服务器，还是什么都没有，并没有上传成功。</p>
<p>为什么会这样呢？上面的代码应该是大家搜索curl php POST图片最常见的代码，这是因为我现在用的是PHP5.6以上版本，@符号在PHP5.6之后就弃用了，PHP5.3依旧可以用，所以有些同学发现能执行啊，有些发现不能执行，大抵是因为PHP版本的不同，而且curl在这两版本中实现是不兼容的，上面是PHP5.3的实现。</p>
<p>下面来讲PHP5.6及以后的实现，：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $data = array(&apos;name&apos;=&gt;&apos;boy&apos;, &quot;upload&quot;=&gt;&quot;&quot;);</div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    $data[&apos;upload&apos;]=new CURLFile(realpath(getcwd().&apos;/boy.png&apos;));</div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://115.29.247.189/test/testRespond.php&quot;);</div><div class="line">    curl_setopt($ch, CURLOPT_POST, 1);</div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS , $data);</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line"></div><div class="line">    echo $output;</div><div class="line"></div><div class="line">    curl_close($ch);         </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>这里引入了一个CURLFile对象进行实现，关于此的具体可查阅文档进行了解。这时候再去远程服务器目录下看看，发现有了一张图片了，而且确实是我们刚才上传的图片。</p>
<h4 id="获取远程服务器妹子的照片-——-抓取图片"><a href="#获取远程服务器妹子的照片-——-抓取图片" class="headerlink" title="获取远程服务器妹子的照片 —— 抓取图片"></a>获取远程服务器妹子的照片 —— 抓取图片</h4><p>服务器妹子也挺实诚的，看了照骗觉得我长得挺慈眉善目的，就大方得拿出了她自己的照片，但是有点害羞的是，她不愿意主动拿过来，得我们自己去取。</p>
<p>远程服务器在她自己的目录下存放了一个图片叫girl.jpg，地址是她的web服务器根目录/girl.jpg，现在我要去获取这张照片。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    $fp=fopen(&apos;./girl.jpg&apos;, &apos;w&apos;);</div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://远程服务器地址马赛克/girl.jpg&quot;); </div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_FILE, $fp); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line">    $info = curl_getinfo($ch);</div><div class="line"></div><div class="line">    fclose($fp);</div><div class="line"></div><div class="line">    $size = filesize(&quot;./girl.jpg&quot;);</div><div class="line">    if ($size != $info[&apos;size_download&apos;]) &#123;</div><div class="line">        echo &quot;下载的数据不完整，请重新下载&quot;;</div><div class="line">    &#125; else &#123;</div><div class="line">        echo &quot;下载数据完整&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    curl_close($ch);    </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>现在，在我们当前目录下就有了一张刚拿到的照片啦，是不是很激动呢！</p>
<p>这里值得一说的是curl_getinfo方法，这是一个获取本次请求相关信息的方法，对于调试很有帮助，要善用。</p>
<h3 id="HTTP认证怎么搞"><a href="#HTTP认证怎么搞" class="headerlink" title="HTTP认证怎么搞"></a>HTTP认证怎么搞</h3><p>这个时候呢，服务器的家长说这个我们女儿还太小，不能找对象，就将她女儿关了起来，并且上了一个密码锁，所谓的HTTP认证，服务器呢偷偷托信鸽将HTTP认证的用户名和密码给了你，要你去见她，带她私奔。</p>
<p>那么拿到了用户名和密码，我们怎么通过PHP CURL搞定HTTP认证呢？</p>
<p>PS:这里偷懒就不去搭HTTP认证去试了，直接放一段代码，我们分析下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function curl_auth($url,$user,$passwd)&#123;</div><div class="line">    $ch = curl_init();</div><div class="line">    curl_setopt_array($ch, [</div><div class="line">        CURLOPT_USERPWD =&gt; $user.&apos;:&apos;.$passwd,</div><div class="line">        CURLOPT_URL     =&gt; $url,</div><div class="line">        CURLOPT_RETURNTRANSFER =&gt; true</div><div class="line">    ]);</div><div class="line">    $result = curl_exec($ch);</div><div class="line">    curl_close($ch);</div><div class="line">    return $result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$authurl = &apos;http://要请求HTTP认证的地址&apos;;</div><div class="line"></div><div class="line">echo curl_auth($authurl,&apos;vace&apos;,&apos;passwd&apos;);</div></pre></td></tr></table></figure>
<p>这里有一个地方比较有意思： </p>
<blockquote>
<p>curl_setopt_array </p>
</blockquote>
<p>这个方法可以通过数组一次性地设置多个参数，防止有些需要多处设置的出现密密麻麻的curl_setopt方法。</p>
<h3 id="利用cookie模拟登陆"><a href="#利用cookie模拟登陆" class="headerlink" title="利用cookie模拟登陆"></a>利用cookie模拟登陆</h3><p>这时你成功见到了服务器妹子，想带她私奔，但是无奈没有盘缠走不远，服务器妹子说，她妈服务器上有金库，可以登陆上去搞一点下来。</p>
<p>首先我们先来分析一下，这个事情分两步，一是去登陆界面通过账号密码登陆，然后获取cookie，二是去利用cookie模拟登陆到信息页面获取信息，大致的框架是这样的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">  //设置post的数据  </div><div class="line">  $post = array ( </div><div class="line">    &apos;email&apos; =&gt; &apos;账户&apos;, </div><div class="line">    &apos;pwd&apos; =&gt; &apos;密码&apos;</div><div class="line">  ); </div><div class="line">  //登录地址  </div><div class="line">  $url = &quot;登陆地址&quot;;  </div><div class="line">  //设置cookie保存路径  </div><div class="line">  $cookie = dirname(__FILE__) . &apos;/cookie.txt&apos;;  </div><div class="line">  //登录后要获取信息的地址  </div><div class="line">  $url2 = &quot;登陆后要获取信息的地址&quot;;  </div><div class="line">  //模拟登录 </div><div class="line">  login_post($url, $cookie, $post);  </div><div class="line">  //获取登录页的信息  </div><div class="line">  $content = get_content($url2, $cookie);  </div><div class="line">  //删除cookie文件 </div><div class="line">  @ unlink($cookie);</div><div class="line">     </div><div class="line">  var_dump($content);    </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>然后我们思考下下面两个方法的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">login_post($url, $cookie, $post)</div><div class="line"></div><div class="line">get_content($url2, $cookie)</div><div class="line"></div><div class="line">//模拟登录  </div><div class="line">function login_post($url, $cookie, $post) &#123; </div><div class="line">    $curl = curl_init();</div><div class="line">    curl_setopt($curl, CURLOPT_URL, $url);</div><div class="line">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class="line">    curl_setopt($curl, CURLOPT_COOKIEJAR, $cookie);</div><div class="line">    curl_setopt($curl, CURLOPT_POST, 1);</div><div class="line">    curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($post));</div><div class="line">    curl_exec($curl); </div><div class="line">    curl_close($curl);</div><div class="line">&#125; </div><div class="line">//登录成功后获取数据  </div><div class="line">function get_content($url, $cookie) &#123; </div><div class="line">    $ch = curl_init(); </div><div class="line">    curl_setopt($ch, CURLOPT_URL, $url); </div><div class="line">    curl_setopt($ch, CURLOPT_HEADER, 0); </div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line">    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie); </div><div class="line">    $rs = curl_exec($ch); </div><div class="line">    curl_close($ch); </div><div class="line">    return $rs; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，总算是模拟登陆成功，一切顺利啦，通过php CURL“撩”服务器就是这么简单。</p>
<p>当然，CURL的能力远不止于此，本文仅希望就后端PHP开发中最常用的几种场景做一个整理和归纳。最后一句话，具体问题具体分析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-curl&quot;&gt;&lt;a href=&quot;#What-is-curl&quot; class=&quot;headerlink&quot; title=&quot;What is curl&quot;&gt;&lt;/a&gt;What is curl&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;PHP supports libc
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java|Jersey入门实践</title>
    <link href="http://yoursite.com/2018/02/03/Java-Jersey%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/02/03/Java-Jersey入门实践/</id>
    <published>2018-02-03T10:34:34.000Z</published>
    <updated>2018-02-12T01:44:39.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jersey简介"><a href="#Jersey简介" class="headerlink" title="Jersey简介"></a>Jersey简介</h3><p>Jersey是JAX-RS（JSR311）开源参考实现用于构建RESTful Web service，它包含三个部分：</p>
<ul>
<li><p>核心服务器（Core Server）：通过提供JSR 311中标准化的注释和API标准化，可以用直观的方式开发RESTful Web服务。</p>
</li>
<li><p>核心客户端(Core Client)：Jersey客户端API能够帮助开发者与RESTful服务轻松通信；</p>
</li>
<li><p>集成（Integration)：Jersey还提供可以轻松继承Spring、Guice、Apache Abdera的库。</p>
</li>
</ul>
<h3 id="来个小demo"><a href="#来个小demo" class="headerlink" title="来个小demo"></a>来个小demo</h3><p>学习技术嘛，看多少理论书籍，都不如来个小Demo学的快。在这里，我们主要介绍如何使用Jersey创建Web  Service：</p>
<p>环境：</p>
<ul>
<li>Maven 3.2.1</li>
<li>Idea</li>
<li>Java  JDK 1.8</li>
<li>Tomcat 7.0</li>
</ul>
<h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">    &lt;groupId&gt;net.jianxi.tutorials.jerseyws&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jerseyDemo&lt;/artifactId&gt;</div><div class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line">    &lt;version&gt;1.0&lt;/version&gt;</div><div class="line">    &lt;name&gt;jerseywstest Maven Webapp&lt;/name&gt;</div><div class="line">    &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;!--jersey--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jersey-container-servlet-core&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;2.0&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--JAXB API--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;javax.xml.ws&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jaxws-api&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;2.1&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!-- Json支持 --&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jackson-core-asl&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.9.12&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.9.12&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jackson-jaxrs&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.9.12&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>在pom.xml中，我们引入了Jersey的依赖包，同时也引入了Json的依赖包，因为在这里主要用Json的格式来传输数据。</p>
<h4 id="写一个Model"><a href="#写一个Model" class="headerlink" title="写一个Model"></a>写一个Model</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    </div><div class="line">    String id;</div><div class="line">    </div><div class="line">    String name;</div><div class="line">   </div><div class="line">    String school;</div><div class="line"></div><div class="line">    public String getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(String id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSchool() &#123;</div><div class="line">        return school;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSchool(String school) &#123;</div><div class="line">        this.school = school;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写过Java应用的，都知道这个类是干嘛的，在这里就不多说了。</p>
<h4 id="创建服务UserService"><a href="#创建服务UserService" class="headerlink" title="创建服务UserService"></a>创建服务UserService</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Path(&quot;User&quot;)</div><div class="line">public class UserService &#123;</div><div class="line"></div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public User getUser()&#123;</div><div class="line">        User u = new User();</div><div class="line">        u.setId(&quot;1234556&quot;);</div><div class="line">        u.setName(&quot;小智e&quot;);</div><div class="line">        u.setSchool(&quot;湖南大学&quot;);</div><div class="line"></div><div class="line">        return u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @POST</div><div class="line">    @Produces(&#123; MediaType.APPLICATION_JSON + &quot;;charset=UTF-8&quot; &#125;)</div><div class="line">    public User addUser(@BeanParam User user) &#123;</div><div class="line">        return user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码稍后讲解。</p>
<h4 id="写APIApplication"><a href="#写APIApplication" class="headerlink" title="写APIApplication"></a>写APIApplication</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class APIApplication extends ResourceConfig &#123;</div><div class="line">    public APIApplication() &#123;</div><div class="line"></div><div class="line">        //资源包|提供服务的包   即UserServce所在的包名</div><div class="line">        packages(true, &quot;jersey.rest&quot;);</div><div class="line"></div><div class="line">        //注册数据转换器</div><div class="line">        register(JacksonJsonProvider.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最后一步-写web-xml"><a href="#最后一步-写web-xml" class="headerlink" title="最后一步 写web.xml"></a>最后一步 写web.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</div><div class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</div><div class="line">         version=&quot;3.1&quot;&gt;</div><div class="line">    &lt;welcome-file-list&gt;</div><div class="line">        &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;</div><div class="line">    &lt;/welcome-file-list&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;JerseyServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;jersey.rest.APIApplication&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line"></div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;JerseyServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><p>测试get方法</p>
<p><img src="/images/Jersey-get.png" alt="用postman测试" title="Jersey-get"></p>
<p>测试post方法</p>
<p><img src="/images/Jsersey-Post.png" alt="用postman测试" title="Jsersey-Post"></p>
<p>这里需要注意的是，我们用的是@BeanParam的注解来注入参数，User模板类要改成这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    @FormParam(&quot;id&quot;)</div><div class="line">    String id;</div><div class="line">    @FormParam(&quot;name&quot;)</div><div class="line">    String name;</div><div class="line">    @FormParam(&quot;school&quot;)</div><div class="line">    String school;</div><div class="line"></div><div class="line">    public String getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(String id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSchool() &#123;</div><div class="line">        return school;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSchool(String school) &#123;</div><div class="line">        this.school = school;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同时，发送过来的数据格式应该是 x-www-form-urlencoded 的格式。至于为什么要用@BeanParam 来接收前端数据，个人觉得这样挺方便，映射成了Java世界里的对象，更好更方便地处理数据。</p>
<p>现在回过头来看 UserService,就不难理解了。@Path(“User”)指的是路径，@GET、@POST指的是方法，(对于HTTP动词，可查看相关资料)。@Produces(MediaType.APPLICATION_JSON) 表示的是返回的数据格式。更多注解方式可查看官方文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Path(&quot;User&quot;)</div><div class="line">public class UserService &#123;</div><div class="line"></div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public User getUser()&#123;</div><div class="line">        User u = new User();</div><div class="line">        u.setId(&quot;1234556&quot;);</div><div class="line">        u.setName(&quot;小智e&quot;);</div><div class="line">        u.setSchool(&quot;湖南大学&quot;);</div><div class="line"></div><div class="line">        return u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @POST</div><div class="line">    @Produces(&#123; MediaType.APPLICATION_JSON + &quot;;charset=UTF-8&quot; &#125;)</div><div class="line">    public User addUser(@BeanParam User user) &#123;</div><div class="line">        return user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，入门教程就结束了。</p>
<h4 id="加入Hibernate处理数据层"><a href="#加入Hibernate处理数据层" class="headerlink" title="加入Hibernate处理数据层"></a>加入Hibernate处理数据层</h4><p>需要加入的依赖包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!-- MySQL database driver --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.1.9&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;!-- hibernate 4.3.0 start --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.3.0.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate.javax.persistence&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-jpa-2.0-api&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.0.1.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-ehcache&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.3.0.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.1.0.Alpha1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate.common&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.0.4.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!-- hibernate 4.3.0 end --&gt;</div></pre></td></tr></table></figure>
<p>加入Hibernate来处理对象持久化，开发Wervice就方便多了。</p>
<h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>在Stock的服务中，我们需要StockDao来进行数据库操作，那怎么来弄这个依赖注入呢？</p>
<ul>
<li>首先，要添加@Inject</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Path(&quot;stock&quot;)</div><div class="line">public class StockService &#123;</div><div class="line">    @Inject    //依赖注入？</div><div class="line">    private StockDao dao;</div><div class="line"></div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public List getUser()&#123;</div><div class="line">        List l = dao.getAll();</div><div class="line">        return  l;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @POST</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public Stock saveStock(@BeanParam Stock s)&#123;</div><div class="line">        Stock stock = s;</div><div class="line">        dao.saveStock(stock);</div><div class="line">        return s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后，添加MyApplicationBinder</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class MyApplicationBinder extends AbstractBinder &#123;</div><div class="line">    @Override</div><div class="line">    protected void configure() &#123;</div><div class="line">        bind(StockDao.class).to(StockDao.class);    //依赖注入</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后，配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class APIApplication extends ResourceConfig &#123;</div><div class="line">    public APIApplication() &#123;</div><div class="line"></div><div class="line">        packages(true, &quot;jersey.rest&quot;);</div><div class="line"></div><div class="line">        //注册数据转换器</div><div class="line">        register(JacksonJsonProvider.class);</div><div class="line"></div><div class="line">        //依赖注入</div><div class="line">        register(new MyApplicationBinder());</div><div class="line"></div><div class="line">        //注册 MultiPart</div><div class="line">        register(MultiPartFeature.class);</div><div class="line"></div><div class="line">        // Logging.</div><div class="line">        register(LoggingFilter.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置Web-xml的两种方式"><a href="#配置Web-xml的两种方式" class="headerlink" title="配置Web.xml的两种方式"></a>配置Web.xml的两种方式</h3><h4 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;web-app version=&quot;2.5&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;Jersey Web Application&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;jersey.config.server.provider.packages&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;com.waylau.rest&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;Jersey Web Application&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/webapi/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<p>其中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;init-param&gt;</div><div class="line">    &lt;param-name&gt;jersey.config.server.provider.packages&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;com.waylau.rest&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div></pre></td></tr></table></figure>
<p>这段说的是，如果配置属性无需设置，要部署应用程序只包括存储在特定的包的资源和提供者，那么你可以指示 Jersey 自动扫描这些包，这样就能自动注册找到的任何资源和提供者,这样就能找到了 com.waylau.rest包下的 MyResource 资源并且注册。</p>
<h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>当需要更多的配置，上述方法显然不能满足。可以重写 Application 类。也就是上述我们在Demo里用的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.waylau.rest;</div><div class="line"></div><div class="line">import org.glassfish.jersey.server.ResourceConfig;</div><div class="line">/**</div><div class="line"> * REST 主应用</div><div class="line"> * </div><div class="line"> * @author waylau.com</div><div class="line"> * 2015年3月3日</div><div class="line"> */</div><div class="line">public class RestApplication extends ResourceConfig &#123;</div><div class="line"></div><div class="line">    public RestApplication() &#123;</div><div class="line">        //资源类所在的包路径  </div><div class="line">        packages(&quot;com.waylau.rest&quot;); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终，RestApplication 在 web.xml 配置是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;init-param&gt;</div><div class="line">    &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;com.waylau.rest.RestApplication&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div></pre></td></tr></table></figure>
<h3 id="Encoding-Format-处理编码问题"><a href="#Encoding-Format-处理编码问题" class="headerlink" title="Encoding Format 处理编码问题"></a>Encoding Format 处理编码问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private final static String CHARSET_UTF_8 = &quot;charset=utf-8&quot;;</div><div class="line"></div><div class="line">@GET</div><div class="line">@Path(&quot;pojoxml&quot;)</div><div class="line">@Produces(MediaType.APPLICATION_XML + &quot;;&quot; + CHARSET_UTF_8)</div><div class="line">public MyBean getPojoXml() &#123;</div><div class="line">    MyBean pojo = new MyBean();</div><div class="line">    pojo.setName(&quot;欢迎光临：waylau.com&quot;);</div><div class="line">    pojo.setAge(28);</div><div class="line">    return pojo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@GET</div><div class="line">@Path(&quot;pojojson&quot;)</div><div class="line">@Produces(MediaType.APPLICATION_JSON + &quot;;&quot; + CHARSET_UTF_8)</div><div class="line">public MyBean getPojoJson() &#123;</div><div class="line">    MyBean pojo = new MyBean();</div><div class="line">    pojo.setName(&quot;欢迎光临：waylau.com&quot;);</div><div class="line">    pojo.setAge(28);</div><div class="line">    return pojo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Parameter-Annotations-常用参数注解"><a href="#Parameter-Annotations-常用参数注解" class="headerlink" title="Parameter Annotations 常用参数注解"></a>Parameter Annotations 常用参数注解</h3><h4 id="PathParam"><a href="#PathParam" class="headerlink" title="@PathParam"></a>@PathParam</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@GET  </div><div class="line">@Path(&quot;&#123;username&quot;&#125;)  </div><div class="line">@Produces(MediaType.APPLICATION_JSON)  </div><div class="line">public User getUser(@PathParam(&quot;username&quot;) String userName) &#123;  </div><div class="line">    ...  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请求url:<a href="http://localhost/user/jack时，userName值为jack" target="_blank" rel="external">http://localhost/user/jack时，userName值为jack</a> </p>
<h4 id="QueryParam"><a href="#QueryParam" class="headerlink" title="@QueryParam"></a>@QueryParam</h4><p>@QueryParam 用于从请求 URL 的查询组件中提取查询参数。我们在 MyResource 里面添加下面的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@PUT</div><div class="line">@Path(&quot;pojo&quot;)</div><div class="line">@Consumes(MediaType.APPLICATION_JSON)  </div><div class="line">@Produces(MediaType.APPLICATION_JSON)</div><div class="line">public MyBean putPojo(@QueryParam(&quot;age&quot;) int age, </div><div class="line">        @QueryParam(&quot;name&quot;) String name) &#123;</div><div class="line">    MyBean pojo = new MyBean();</div><div class="line">    pojo.setName(name);</div><div class="line">    pojo.setAge(age);</div><div class="line">    return pojo;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个 PUT 方法，将会接收从URL 传递过来的参数 age,name ，而后将这些参数赋给对象 MyBean ，并且返回。<br>启动服务，在 RESTClient 里面发送 PUT 请求 <a href="http://localhost:8080/webapi/myresource/pojo?age=28&amp;name=waylau" target="_blank" rel="external">http://localhost:8080/webapi/myresource/pojo?age=28&amp;name=waylau</a> 。成功后就能接收到一个 JSON 数据对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;age&quot;: 28,</div><div class="line">   &quot;name&quot;: &quot;waylau&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="DefaultValue"><a href="#DefaultValue" class="headerlink" title="@DefaultValue"></a>@DefaultValue</h4><p>如果需要为参数设置默认值，可以使用 @DefaultValue，如：<br>我们在 MyResource 里面添加下面的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@POST</div><div class="line">@Path(&quot;pojo&quot;)</div><div class="line">@Consumes(MediaType.APPLICATION_JSON)  </div><div class="line">@Produces(MediaType.APPLICATION_JSON)</div><div class="line">public MyBean postPojoDefault(@DefaultValue(&quot;21&quot;) @QueryParam(&quot;age&quot;) int age, </div><div class="line">        @DefaultValue(&quot;www.waylau.com&quot;)@QueryParam(&quot;name&quot;) String name) &#123;</div><div class="line">    MyBean pojo = new MyBean();</div><div class="line">    pojo.setName(name);</div><div class="line">    pojo.setAge(age);</div><div class="line">    return pojo;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动服务，在 RESTClient 里面发送 POST 请求调用 <a href="http://localhost:8080/webapi/myresource/pojo" target="_blank" rel="external">http://localhost:8080/webapi/myresource/pojo</a> 接口，如果该请求包含参数，则将参数值以对象形式放回，否则，将默认值以对象形式放回<br>例如，当我们的请求是<a href="http://localhost:8080/webapi/myresource/pojo?age=26&amp;name=waylau" target="_blank" rel="external">http://localhost:8080/webapi/myresource/pojo?age=26&amp;name=waylau</a><br>则返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;age&quot;: 26,</div><div class="line">   &quot;name&quot;: &quot;waylau&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我们的请求是<a href="http://localhost:8080/webapi/myresource/pojo" target="_blank" rel="external">http://localhost:8080/webapi/myresource/pojo</a><br>则返回默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;age&quot;: 21,</div><div class="line">   &quot;name&quot;: &quot;www.waylau.com&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="FormParam"><a href="#FormParam" class="headerlink" title="@FormParam"></a>@FormParam</h4><p>@FormParam 顾名思义是处理 HTML表单请求的。要求所请求 MIME 媒体类型为 <strong>application/x-www-form-urlencoded</strong>，并且符合指定的 HTML 编码的形式，此参数提取对于 HTML 表单 POST 请求是非常有用的。比如，我们要处理一个登陆表单，处理如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@POST</div><div class="line">@Consumes(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">@Produces(MediaType.APPLICATION_JSON)</div><div class="line">public Response login(@FormParam(&quot;username&quot;) String username,</div><div class="line">        @FormParam(&quot;password&quot;) String password) &#123;</div><div class="line">    //业务逻辑省略...</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>其他的参数注解还包括</p>
<ul>
<li>@MatrixParam 从 URL 路径提取信息</li>
<li>@HeaderParam 从 HTTP 头部提取信息</li>
<li>@CookieParam从关联在 HTTP 头部的 cookies 里提取信息</li>
<li>@BeanParam 允许注入参数到一个 bean</li>
<li>@Context 一般可以用于获得一个Java类型关联请求或响应的上下文。</li>
</ul>
<h3 id="File-Upload-and-Download-文件上传、下载"><a href="#File-Upload-and-Download-文件上传、下载" class="headerlink" title="File Upload and Download 文件上传、下载"></a>File Upload and Download 文件上传、下载</h3><p>文件上传下载，是一般管理系统中经常会使用的操作。下面介绍下 REST 里面是如何实现的.</p>
<h4 id="FileResource"><a href="#FileResource" class="headerlink" title="FileResource"></a>FileResource</h4><p>我们在com.waylau.rest.resource 目录下创建 FileResource 资源类,在里面写两个路径，filepath 是文件下载路径，serverLocation 是文件上传的目录。当然 “小柳哥.txt” 这个文件是必须存在的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">private static final String filepath = &quot;D:/测试文档/小柳哥.txt&quot;;</div><div class="line">private static final String serverLocation = &quot;D:/测试文档/&quot;;</div></pre></td></tr></table></figure></p>
<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><h5 id="下载服务端"><a href="#下载服务端" class="headerlink" title="下载服务端"></a>下载服务端</h5><p>在 FileResource 资源类中添加 文件下载的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@GET</div><div class="line">@Path(&quot;download&quot;)</div><div class="line">@Consumes(MediaType.APPLICATION_JSON)</div><div class="line">@Produces(MediaType.APPLICATION_OCTET_STREAM)</div><div class="line">public Response downloadFile() &#123;</div><div class="line"></div><div class="line">    File file = new File(filepath);</div><div class="line">    if (file.isFile() &amp;&amp; file.exists()) &#123;</div><div class="line">        String mt = new MimetypesFileTypeMap().getContentType(file);</div><div class="line">        String fileName = file.getName();</div><div class="line"></div><div class="line">        return Response</div><div class="line">                .ok(file, mt)</div><div class="line">                .header(&quot;Content-disposition&quot;,</div><div class="line">                        &quot;attachment;filename=&quot; + fileName)</div><div class="line">                .header(&quot;ragma&quot;, &quot;No-cache&quot;)</div><div class="line">                .header(&quot;Cache-Control&quot;, &quot;no-cache&quot;).build();</div><div class="line"></div><div class="line">    &#125; else &#123;</div><div class="line">        return Response.status(Response.Status.NOT_FOUND)</div><div class="line">                .entity(&quot;下载失败，未找到该文件&quot;).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Produces(MediaType.APPLICATION_OCTET_STREAM) 这里就说明了，文件将会以文件流的形式返回给客户端。</p>
<h5 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h5><p>在 index.jsp 里面添加</p>
<p></p><p><a href="webapi/files/download">Download</a></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>好了，代码写完，我们启动项目测试下。在浏览器中打开localhost:8888/rest/file/download ,此时发现文件名称不见了。</p>
<p><img src="/images/jersey-file.png" alt="测试" title="jersey-file"></p>
<p>这是因为系统解析不了编码导致的。需要将文件名称编码做下转化即可：<br>//处理文件名称编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fileName = new String(fileName.getBytes(&quot;utf-8&quot;),&quot;ISO8859-1&quot;);</div></pre></td></tr></table></figure></p>
<p>再次启动测试：</p>
<p><img src="/images/jersey-file-2_1.png" alt="测试2" title="jersey-file-2"></p>
<p>OK ，下载程序写完。</p>
<h4 id="处理大数量传参下载的问题"><a href="#处理大数量传参下载的问题" class="headerlink" title="处理大数量传参下载的问题"></a>处理大数量传参下载的问题</h4><p>有时难免要传递的参数较大，GET 请求难以胜任，只能用 POST 来请求下载。<br>下面例子就是用一个隐藏的 Form 表单来传参进行文件的下载：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var exportUrl = &apos;rest/files/excel/easyui-datagird&apos;</div><div class="line">var form=$(&quot;&lt;form&gt;&quot;);//定义一个form表单</div><div class="line">form.attr(&quot;style&quot;,&quot;display:none&quot;);</div><div class="line">form.attr(&quot;target&quot;,&quot;&quot;);</div><div class="line">form.attr(&quot;method&quot;,&quot;post&quot;);</div><div class="line">form.attr(&quot;action&quot;,exportUrl);</div><div class="line">var input1=$(&quot;&lt;input&gt;&quot;);</div><div class="line">input1.attr(&quot;type&quot;,&quot;hidden&quot;);</div><div class="line">input1.attr(&quot;name&quot;,&quot;fileName&quot;);</div><div class="line">input1.attr(&quot;value&quot;,fileName);</div><div class="line">var input2=$(&quot;&lt;input&gt;&quot;);</div><div class="line">input2.attr(&quot;type&quot;,&quot;hidden&quot;);</div><div class="line">input2.attr(&quot;name&quot;,&quot;columns&quot;);</div><div class="line">input2.attr(&quot;value&quot;,JSON.stringify(columns));</div><div class="line">var input3=$(&quot;&lt;input&gt;&quot;);</div><div class="line">input3.attr(&quot;type&quot;,&quot;hidden&quot;);</div><div class="line">input3.attr(&quot;name&quot;,&quot;rowsData&quot;);</div><div class="line">input3.attr(&quot;value&quot;,JSON.stringify(rows));</div><div class="line">$(&quot;body&quot;).append(form);//将表单放置在页面中</div><div class="line">form.append(input1);</div><div class="line">form.append(input2);</div><div class="line">form.append(input3);</div><div class="line">form.submit().remove();;//表单提交并</div></pre></td></tr></table></figure>
<p>其中，input 就是用来传递参数的。input 的 name 属性是参数的名称，value 属性是参数的值。<br>服务端要做如下的处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@POST</div><div class="line">@Path(&quot;excel/easyui-datagird&quot;)</div><div class="line">@Consumes(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">@Produces(MediaType.APPLICATION_OCTET_STREAM)</div><div class="line">public Response jsonToExcle(@FormParam(&quot;fileName&quot;) String fileName,</div><div class="line">        @FormParam(&quot;columns&quot;) String columns,</div><div class="line">        @FormParam(&quot;rowsData&quot;) String rowsData) &#123;</div><div class="line">    //这里是处理的业务逻辑代码</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>上传文件稍微要复杂，需要 multipart/form-data 请求。</p>
<p>依赖<br>添加 jersey-media-multipart 到 pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--jersey-media-multipart --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.glassfish.jersey.media&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jersey-media-multipart&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.7&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>并在 RestApplication 里面注册 MultiPart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class RestApplication extends ResourceConfig &#123;</div><div class="line"></div><div class="line">    public RestApplication() &#123;</div><div class="line">        //资源类所在的包路径  </div><div class="line">        packages(&quot;com.waylau.rest.resource&quot;);</div><div class="line"></div><div class="line">        //注册 MultiPart</div><div class="line">        register(MultiPartFeature.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="上传服务端"><a href="#上传服务端" class="headerlink" title="上传服务端"></a>上传服务端</h4><p>在 FileResource 资源类中添加 文件下载的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@POST</div><div class="line">@Path(&quot;upload&quot;)</div><div class="line">@Consumes(MediaType.MULTIPART_FORM_DATA)</div><div class="line">@Produces(&quot;application/json&quot;)</div><div class="line">public Response uploadFile(</div><div class="line">        @FormDataParam(&quot;file&quot;) InputStream fileInputStream,</div><div class="line">        @FormDataParam(&quot;file&quot;) FormDataContentDisposition contentDispositionHeader) </div><div class="line">            throws IOException &#123;</div><div class="line"></div><div class="line">    String fileName = contentDispositionHeader.getFileName();</div><div class="line"></div><div class="line">    File file = new File(serverLocation + fileName); </div><div class="line">    File parent = file.getParentFile(); </div><div class="line">    //判断目录是否存在，不在创建 </div><div class="line">    if(parent!=null&amp;&amp;!parent.exists())&#123; </div><div class="line">        parent.mkdirs(); </div><div class="line">    &#125; </div><div class="line">    file.createNewFile(); </div><div class="line"></div><div class="line">    OutputStream outpuStream = new FileOutputStream(file);</div><div class="line">    int read = 0;</div><div class="line">    byte[] bytes = new byte[1024];</div><div class="line"></div><div class="line">    while ((read = fileInputStream.read(bytes)) != -1) &#123;</div><div class="line">        outpuStream.write(bytes, 0, read);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    outpuStream.flush();</div><div class="line">    outpuStream.close();</div><div class="line"></div><div class="line">    fileInputStream.close();</div><div class="line"></div><div class="line">    return Response.status(Response.Status.OK)</div><div class="line">            .entity(&quot;Upload Success!&quot;).build();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上传客户端<br>在 index.jsp 写一个上传的 Form 表单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;Upload a File&lt;/h3&gt;</div><div class="line">&lt;form action=&quot;webapi/files/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">   &lt;p&gt;</div><div class="line">    Select a file : &lt;input type=&quot;file&quot; name=&quot;file&quot; size=&quot;50&quot; /&gt;</div><div class="line">   &lt;/p&gt;</div><div class="line">   &lt;input type=&quot;submit&quot; value=&quot;Upload It&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Jersey简介&quot;&gt;&lt;a href=&quot;#Jersey简介&quot; class=&quot;headerlink&quot; title=&quot;Jersey简介&quot;&gt;&lt;/a&gt;Jersey简介&lt;/h3&gt;&lt;p&gt;Jersey是JAX-RS（JSR311）开源参考实现用于构建RESTful Web ser
    
    </summary>
    
    
      <category term="Jersey" scheme="http://yoursite.com/tags/Jersey/"/>
    
  </entry>
  
  <entry>
    <title>架构|RESTful API设计</title>
    <link href="http://yoursite.com/2018/01/30/%E6%9E%B6%E6%9E%84-RESTful-API%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/01/30/架构-RESTful-API设计/</id>
    <published>2018-01-30T10:11:57.000Z</published>
    <updated>2018-02-03T03:22:17.456Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RESTful简介"><a href="#RESTful简介" class="headerlink" title="RESTful简介"></a>RESTful简介</h3><p>REST(Representation State Transfer)翻译为表达性状态转移。REST是一种架构风格。在这种架构风格中，对象被视为一种资源（resource)。表达性状态是指资源数据在某个瞬间的状态快照。资源可以有多种表述，表述状态具有描述性，包括资源数据的内容、表述格式（XML、Json…)等信息。</p>
<p>REST的资源是可寻址的，通过HTTP协议的通用动词方法（如GET、PUT、DELETE、POST），同时通过URI协议来唯一标识某一个资源公布出来的接口。</p>
<p>请求一个资源的过程可以理解为访问一个具有指定性和描述性的URI，通过HTTP协议，将资源的表述性从服务器“转移”到客户端或者相反的方向。</p>
<h3 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h3><p>对于资源的具体操作，由HTTP动词表示。</p>
<p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>
<table>
<thead>
<tr>
<th>动词</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET（SELECT）</td>
<td>从服务器取出资源（一项或多项）。</td>
</tr>
<tr>
<td>POST（CREATE）</td>
<td>在服务器新建一个资源。</td>
</tr>
<tr>
<td>PUT（UPDATE）</td>
<td>在服务器更新资源（客户端提供改变后的完整资源）。</td>
</tr>
<tr>
<td>PATCH（UPDATE）</td>
<td>在服务器更新资源（客户端提供改变的属性）。</td>
</tr>
<tr>
<td>DELETE（DELETE）</td>
<td>从服务器删除资源。</td>
</tr>
</tbody>
</table>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><ul>
<li>GET /zoos：列出所有动物园</li>
<li>POST /zoos：新建一个动物园</li>
<li>GET /zoos/ID：获取某个指定动物园的信息</li>
<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li>
<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>
<li>DELETE /zoos/ID：删除某个动物园</li>
<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>
<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>
</ul>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul>
<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（* Idempotent）。</li>
<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>
<li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li>
<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>
<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>
<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>
<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>
<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>
<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>
<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>
<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>
<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。<br>状态码的完全列表参见这里。</li>
</ul>
<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>综合上面的解释，我们总结一下什么是RESTful架构：</p>
<p>　　（1）每一个URI代表一种资源；</p>
<p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p>
<p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>
<h3 id="一些误区"><a href="#一些误区" class="headerlink" title="一些误区"></a>一些误区</h3><p>RESTful架构有一些典型的设计误区。</p>
<p>最常见的一种设计错误，就是URI包含动词。因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p>
<p>举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p>
<p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　POST /accounts/1/transfer/500/to/2</div></pre></td></tr></table></figure>
<p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　POST /transaction HTTP/1.1</div><div class="line">　　Host: 127.0.0.1</div><div class="line">　　</div><div class="line">　　from=1&amp;to=2&amp;amount=500.00</div></pre></td></tr></table></figure>
<p>另一个设计误区，就是在URI中加入版本号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　http://www.example.com/app/1.0/foo</div><div class="line"></div><div class="line">　　http://www.example.com/app/1.1/foo</div><div class="line"></div><div class="line">　　http://www.example.com/app/2.0/foo</div></pre></td></tr></table></figure>
<p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RESTful简介&quot;&gt;&lt;a href=&quot;#RESTful简介&quot; class=&quot;headerlink&quot; title=&quot;RESTful简介&quot;&gt;&lt;/a&gt;RESTful简介&lt;/h3&gt;&lt;p&gt;REST(Representation State Transfer)翻译为表达性状
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java|Restful和Jersey介绍</title>
    <link href="http://yoursite.com/2018/01/28/Java-Restful-%E5%92%8C-Jersey%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/01/28/Java-Restful-和-Jersey介绍/</id>
    <published>2018-01-27T20:38:21.000Z</published>
    <updated>2018-02-03T03:22:19.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>REST 中最重要的概念是资源（resources） ，使用全球 ID（通常使用 URI）标识。client应用程序使用 HTTP 方法（GET/ POST/ PUT/ DELETE ）操作资源或资源集。</p>
<p>RESTful Web 服务是使用 HTTP 和 REST 原理实现的 Web 服务。通常。RESTful Web 服务应该定义下面方面：Web 服务的基/根 URI。比方 <a href="http://host/" target="_blank" rel="external">http://host/</a><appcontext>/resources。支持 MIME 类型的响应数据，包含JSON/XML/ATOM等等。服务支持的操作集合（比如 POST、GET、PUT 或  DELETE)</appcontext></p>
<h3 id="REST-与-JSR（jersey"><a href="#REST-与-JSR（jersey" class="headerlink" title="REST 与 JSR（jersey)"></a>REST 与 JSR（jersey)</h3><p>JSR－311  Java API for RESTful Web Services (JAX-RS) 1.0 and 1.1</p>
<p>JAX-RS是将在JavaEE 6引起的一种新技术。 JAX-RS即Java API for RESTful Web Services。是一个Java编程语言的应用程序接口，支持依照表述性状态转移（REST）架构风格创建Web服务。</p>
<p>JAX-RS使用了Java SE5引入的Java标注来简化Web服务的client和服务端 的开发和部署。包含：</p>
<p>@Path。标注资源类或者方法的相对路径 　　<br>@GET。@PUT。@POST。@DELETE，标注方法是HTTP请求的类型。</p>
<p>　　<br>@Produces，标注返回的MIME媒体类型 　　<br>@Consumes。标注可接受请求的MIME媒体类型<br>@PathParam。@QueryParam。@HeaderParam。@CookieParam，@MatrixParam。@FormParam,分别标注方法的參数来自于HTTP请求的不同位置。比如@PathParam来自于URL的路径，@QueryParam来自于URL的查询參数，@HeaderParam来自于HTTP请求的头信息，@CookieParam来自于HTTP请求的Cookie,@FormParam来自于HTTP请求的post的form格式。</p>
<h3 id="Jersey-jar包简单介绍"><a href="#Jersey-jar包简单介绍" class="headerlink" title="Jersey jar包简单介绍"></a>Jersey jar包简单介绍</h3><p>Jersey 是 JAX-RS 的參考实现，它包括三个主要部分。</p>
<ul>
<li>核心server（CoreServer）：通过提供JSR311中标准化的凝视和API标准化，您能够用直观的方式开发 RESTful Web 服务。</li>
<li>核心client（CoreClient）：JerseyclientAPI帮助您与REST服务轻松通信</li>
<li>集成（Integration）：Jersey 还提供能够轻松集成 Spring、Guice、Apache Abdera 的库。</li>
</ul>
<h3 id="Jersey配置"><a href="#Jersey配置" class="headerlink" title="Jersey配置"></a>Jersey配置</h3><p>从 Jersey 开发包中下面的库为必须：</p>
<ul>
<li>核心服务器：jersey-core.jar。jersey-server.jar。jsr311-api.jar。asm.jar</li>
<li>核心客户端：（用于測试）jersey-client.jar</li>
<li>JAXB 支持：（在高级例子中使用）jaxb-impl.jar，jaxb-api.jar。activation.jar，stax-api.jar，wstx-asl.jar</li>
<li>JSON 支持：（在高级例子中使用）jersey-json.jar</li>
</ul>
<p>(JSON是类似于xml的一种通用。在不同project/语言/平台间传递数据的格式，其比xml更精炼更优良，差点儿全部的语言和框架已经支持了，传递过来的数据再用JSON解码就可以，就像c++struct结构体一样，直接json.xxx就可以訪问。多层的话就json.xxx.xxx)</p>
<p>您须要将全部的 REST 请求发送到 Jersey 容器 —— 在应用程序的 web.xml 文件里定义 servlet 调度程序（參见清单 1）。</p>
<p>除了声明 Jersey servlet 外，它还定义一个初始化參数，指示包括资源的 Java 包。</p>
<p>Web.xml: Xml代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;  </div><div class="line">    &lt;servlet-name&gt;Jersey REST Service&lt;/servlet-name&gt;  </div><div class="line">    &lt;servlet-class&gt;  </div><div class="line">      com.sun.jersey.spi.container.servlet.ServletContainer  </div><div class="line">    &lt;/servlet-class&gt;  </div><div class="line">    &lt;init-param&gt;  </div><div class="line">      &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;  </div><div class="line">      &lt;param-value&gt;sh.cmbchina.pension.resources&lt;/param-value&gt;  </div><div class="line">    &lt;/init-param&gt;  </div><div class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </div><div class="line">&lt;/servlet&gt;  </div><div class="line">&lt;servlet-mapping&gt;  </div><div class="line">    &lt;servlet-name&gt;Jersey REST Service&lt;/servlet-name&gt;  </div><div class="line">    &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;  </div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure></p>
<p>这样，全部在包sh.cmbchina.pension.resources以下的resource类都会被注冊为Restful url的响应处理类。</p>
<h3 id="添加Json支持"><a href="#添加Json支持" class="headerlink" title="添加Json支持"></a>添加Json支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jersey-json&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.18&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;REST 中最重要的概念是资源（resources） ，使用全球 ID（通常使用 URI）标识。client应用程序使用 HTTP 方法（G
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构|树</title>
    <link href="http://yoursite.com/2018/01/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
    <id>http://yoursite.com/2018/01/24/数据结构-树/</id>
    <published>2018-01-24T15:46:20.000Z</published>
    <updated>2018-02-04T03:26:20.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树的简介"><a href="#树的简介" class="headerlink" title="树的简介"></a>树的简介</h3><p>树是一种数据结构，它是n(n&gt;=0)个节点的有限集。n=0时称为空树。n&gt;0时，有限集的元素构成一个具有层次感的数据结构。树是一种典型的一对多的数据结构，类比我们现实生活中的公司分工结构。</p>
<p>区别于线性表一对一的元素关系，树中的节点是一对多的关系。树具有以下特点：</p>
<ul>
<li>n&gt;0时，根节点是唯一的，不可能存在多个根节点。</li>
<li>每个节点有零个至多个子节点；除了根节点外，每个节点有且仅有一个父节点。根节点没有父节点。</li>
</ul>
<p><img src="/images/树-1.png" alt="树" title="树-1"></p>
<p>树有许多相关的术语与概念，在学习树的结构之前，我们要熟悉这些概念。</p>
<table>
<thead>
<tr>
<th>概念</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>子树</td>
<td>除了根节点外，每个子节点都可以分为多个不相交的子树。</td>
</tr>
<tr>
<td>孩子与双亲</td>
<td>若一个结点有子树，那么该结点称为子树根的”双亲”，子树的根是该结点的”孩子”。</td>
</tr>
<tr>
<td>兄弟</td>
<td>具有相同双亲的节点互为兄弟，例如B与H互为兄弟。</td>
</tr>
<tr>
<td>节点的度</td>
<td>一个节点拥有子树的数目。例如A的度为2，B的度为1，C的度为3.</td>
</tr>
<tr>
<td>叶子</td>
<td>没有子树，也即是度为0的节点。</td>
</tr>
<tr>
<td>分支节点</td>
<td>除了叶子节点之外的节点，也即是度不为0的节点。</td>
</tr>
<tr>
<td>内部节点</td>
<td>除了根节点之外的分支节点。</td>
</tr>
<tr>
<td>层次</td>
<td>根节点为第一层，其余节点的层次等于其双亲节点的层次加1.</td>
</tr>
<tr>
<td>树的高度</td>
<td>也称为树的深度，树中节点的最大层次。</td>
</tr>
<tr>
<td>有序树</td>
<td>树中节点各子树之间的次序是重要的，不可以随意交换位置。</td>
</tr>
<tr>
<td>无序树</td>
<td>树种节点各子树之间的次序是不重要的。可以随意交换位置。</td>
</tr>
<tr>
<td>森林</td>
<td>0或多棵互不相交的树的集合。例如图二中的两棵树为森林。</td>
</tr>
</tbody>
</table>
<p><img src="/images/树-2.png" alt="enter description here" title="树-2"></p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>在树中，我们经常用的一般是二叉树这种特殊的树。二叉树或者为空集，或者由一个根节点和两棵互不相交的、分别称为左子树和右子树的二叉树组成。从定义可以看出一棵二叉树：</p>
<ul>
<li>二叉树是有序树，区分左子树与右子树，不可以随意交换子树位置。</li>
<li>一个节点的子树数量取值范围为0，1，2。0代表该节点是叶子节点，1代表该节点只有左子树或只有右子树，2代表该节点有左右子树。</li>
</ul>
<p>根据定义，一棵二叉树有5中基本形态：</p>
<p><img src="/images/树-3.png" alt="enter description here" title="树-3"></p>
<h4 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h4><p>所有节点都只有左子树的二叉树叫做左斜树，所有节点都只有右子树的二叉树叫做右斜树。左斜树和右子树统称为斜树。<br>斜树已经退化成线性结构，二叉树在查找上表现出来优异性能在斜树得不到体现。</p>
<p><img src="/images/树-4.png" alt="斜树" title="树-4"></p>
<h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>满二叉树要满足两个条件：</p>
<ul>
<li>所有的节点都同时具有左子树和右子树。</li>
<li>所有的叶子节点都在同一层上。</li>
</ul>
<p>在同样深度的二叉树中，满二叉树的节点数目是最多的，叶子数也是最多的。</p>
<p><img src="/images/树-5.png" alt="满二叉树" title="树-5"></p>
<h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>在一棵二叉树中，只有最下两层的度可以小于2，并且最下一层的叶子节点集中出现在靠左的若干位置上。</p>
<p>或者这样定义：对一棵具有n个节点的二叉树按层序从左到右编序，二叉树树某个节点的编序与同样位置的满二叉树节点的编序相同如果所有节点都满足这个条件，则二叉树为完全二叉树。</p>
<p>从定义可以看出： 满二叉树一定是完全二叉树；完全二叉树不一定是满二叉树。</p>
<p><img src="/images/树-6.png" alt="完全二叉树" title="树-6"></p>
<h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><p>二叉排序树也称为二叉搜索树或二叉排序树。二叉排序树的节点包含键值key。二叉排序树或者是一棵空树，否则要求：</p>
<ul>
<li>若它的左子树不为空，那么左子树上所有节点的key都小于根节点的key</li>
<li>若它的右子树不为空，那么右子树上所有节点的key都大于根节点的key</li>
<li>它的左右子树也分别为二叉排序树</li>
</ul>
<p>根据定义，二叉查找树中没有重复key的节点，为一个集合。</p>
<p><img src="/images/树-7.png" alt="二叉查找树" title="树-7"></p>
<h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><h4 id="性质一：在二叉树的第i层上至多有2-i-1-个节点-i-gt-1"><a href="#性质一：在二叉树的第i层上至多有2-i-1-个节点-i-gt-1" class="headerlink" title="性质一：在二叉树的第i层上至多有2^(i-1)个节点(i&gt;=1)"></a>性质一：在二叉树的第i层上至多有2^(i-1)个节点(i&gt;=1)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">证明：利用数学归纳法进行证明</div><div class="line"></div><div class="line">当i==1时，第1层节点数目为2^(i-1) = 2^(1-1) = 2^0 = 1。显然成立，此时二叉树只有根节点。</div><div class="line">假设i&gt;1时，第i层的节点数目为2^(i-1)。</div><div class="line">根据假设，只需证明第i+1层节点数为2^i 即可。</div><div class="line">由于二叉树每个节点最多有两个孩子，故第(i+1)层上的节点数最多是第i层的两倍。</div><div class="line">即：第i+1层上节点数最多为: 2* 2^(i-1) = 2 ^ i</div><div class="line">故假设成立，命题得证。</div></pre></td></tr></table></figure>
<h4 id="性质二：深度为k的二叉树至多有2-k-1个节点"><a href="#性质二：深度为k的二叉树至多有2-k-1个节点" class="headerlink" title="性质二：深度为k的二叉树至多有2^k-1个节点"></a>性质二：深度为k的二叉树至多有2^k-1个节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">证明：二叉树节点数最多时，每层的节点树都必须最多。</div><div class="line">根据性质一，深度为k的二叉树的节点数最多为: 2^0 + 2^1 +....+2^(k-1) = 2 ^ k -1</div></pre></td></tr></table></figure>
<h4 id="性质三：对任何一棵二叉树T，如果终端节点数为n0，度为2的节点数为n2-，那么-n0-n2-1"><a href="#性质三：对任何一棵二叉树T，如果终端节点数为n0，度为2的节点数为n2-，那么-n0-n2-1" class="headerlink" title="性质三：对任何一棵二叉树T，如果终端节点数为n0，度为2的节点数为n2 ，那么 n0 = n2 +1"></a>性质三：对任何一棵二叉树T，如果终端节点数为n0，度为2的节点数为n2 ，那么 n0 = n2 +1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">证明：二叉树节点度数最大为2，则 ： n = n0 + n1 + n2 (等式一)</div><div class="line">从孩子个数角度出发： 度为0的节点没有孩子， 度为1的节点没有1个孩子，度为2的节点有2个孩子，孩子总数为 n00 + n11 +n2 2 = n1+2n2；树的所有节点中，只有根不是任何节点的孩 子，因此有 n -1 = n1 + 2* n2 ,即 n = n1 + 2* n2 + 1. （等式二）</div><div class="line">由等式一等式而可以推出 n0 = n2 +1</div></pre></td></tr></table></figure>
<h4 id="性质四：-具有n个节点的完全二叉树的高度为至少为log2-n-1"><a href="#性质四：-具有n个节点的完全二叉树的高度为至少为log2-n-1" class="headerlink" title="性质四： 具有n个节点的完全二叉树的高度为至少为log2(n+1)"></a>性质四： 具有n个节点的完全二叉树的高度为至少为log2(n+1)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">证明：高度为h的二叉树最多有2&#123;h&#125;–1个结点。反之，对于包含n个节点的二叉树的高度至少为log2(n+1)。</div></pre></td></tr></table></figure>
<h4 id="性质五：如果对一棵有n个节点的完全二叉树的节点按层序编号（从第一层开始到最下一层，每一层从左到右编号），对任一节点i有："><a href="#性质五：如果对一棵有n个节点的完全二叉树的节点按层序编号（从第一层开始到最下一层，每一层从左到右编号），对任一节点i有：" class="headerlink" title="性质五：如果对一棵有n个节点的完全二叉树的节点按层序编号（从第一层开始到最下一层，每一层从左到右编号），对任一节点i有："></a>性质五：如果对一棵有n个节点的完全二叉树的节点按层序编号（从第一层开始到最下一层，每一层从左到右编号），对任一节点i有：</h4><ul>
<li>如果i=1 ，则节点为根节点，没有双亲。</li>
<li>如果2 <em> i &gt; n ，则节点i没有左孩子 ；否则其左孩子节点为2</em>i . （n为节点总数）</li>
<li>如果2 <em> i+1&gt;n ，则节点i没有右孩子；否则其右孩子节点为2</em>1+1</li>
</ul>
<h3 id="二叉查找树-1"><a href="#二叉查找树-1" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>二叉查找树的定义我们已经知道。要维护二叉查找树的特性，比较复杂的是删除节点操作，我们将进行重点的解析。不过我们先来看看二叉查找树的节点结构定义与类定义。</p>
<h4 id="节点结构"><a href="#节点结构" class="headerlink" title="节点结构"></a>节点结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//二叉查找树的节点结构</div><div class="line">template &lt;typename T&gt;</div><div class="line">struct BSNode</div><div class="line">&#123;</div><div class="line">    BSNode(T t)</div><div class="line">    : value(t), lchild(nullptr), rchild(nullptr)&#123;&#125;</div><div class="line"> </div><div class="line">    BSNode() = default;</div><div class="line"> </div><div class="line">    T value;</div><div class="line">    BSNode&lt;T&gt;* lchild;</div><div class="line">    BSNode&lt;T&gt;* rchild;</div><div class="line">    BSNode&lt;T&gt;* parent;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">value:节点的值，也即是上文的key，类型由模板参数决定</div><div class="line">lchild :指向节点的左孩子</div><div class="line">rchild:指向节点的右孩子</div><div class="line">parent: 指向节点的双亲</div></pre></td></tr></table></figure>
<h4 id="二叉查找树的抽象数据结构"><a href="#二叉查找树的抽象数据结构" class="headerlink" title="二叉查找树的抽象数据结构"></a>二叉查找树的抽象数据结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">//二叉查找树类</div><div class="line">template &lt;typename T&gt;</div><div class="line">class BSTree</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    BSTree();</div><div class="line">    ~BSTree();</div><div class="line"> </div><div class="line">    void preOrder();    //前序遍历二叉树</div><div class="line">    void inOrder();        //中序遍历二叉树</div><div class="line">    void postOrder();    //后序遍历二叉树</div><div class="line">    void layerOrder();    //层次遍历二叉树</div><div class="line"> </div><div class="line">    BSNode&lt;T&gt;* search_recursion(T key);        //递归地进行查找</div><div class="line">    BSNode&lt;T&gt;* search_Iterator(T key);        //迭代地进行查找</div><div class="line"> </div><div class="line">    T search_minimun(); //查找最小元素</div><div class="line">    T search_maximum(); //查找最大元素</div><div class="line"> </div><div class="line">    BSNode&lt;T&gt;* successor  (BSNode&lt;T&gt;* x);    //查找指定节点的后继节点</div><div class="line">    BSNode&lt;T&gt;* predecessor(BSNode&lt;T&gt;* x);    //查找指定节点的前驱节点</div><div class="line"> </div><div class="line">    void insert(T key);    //插入指定值节点</div><div class="line">    void remove(T key);    //删除指定值节点</div><div class="line">    void destory();        //销毁二叉树</div><div class="line">    void print();        //打印二叉树</div><div class="line"> </div><div class="line"> </div><div class="line">private:</div><div class="line">    BSNode&lt;T&gt;* root; //根节点</div><div class="line">private:</div><div class="line">    BSNode&lt;T&gt;* search(BSNode&lt;T&gt;* &amp; p, T key);</div><div class="line">    void remove(BSNode&lt;T&gt;*  p, T key);         </div><div class="line">    void preOrder(BSNode&lt;T&gt;* p);</div><div class="line">    void inOrder(BSNode&lt;T&gt;* p);</div><div class="line">    void postOrder(BSNode&lt;T&gt;* p);</div><div class="line">    T search_minimun(BSNode&lt;T&gt;* p);</div><div class="line">    T search_maximum(BSNode&lt;T&gt;* p);</div><div class="line">    void destory(BSNode&lt;T&gt;* &amp;p);       </div><div class="line"> </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里我们定义了二叉排序树的类型BSTree。它包含了：</p>
<p>BSTree的根节点root，这是唯一的数据成员操作的外部接口与内部实现接口。例如 preOrder()为提供给用户使用的接口，接口声明为public；而preOrder(AVLTreeNode* pnode)是类内部为了递归操作所使用的接口，接口声明为private。提供的其他接口都有相应的备注说明。</p>
<h4 id="插入新节点"><a href="#插入新节点" class="headerlink" title="插入新节点"></a>插入新节点</h4><p>假设我们要为数组 a[] = {10 ， 5 ， 15 ， 6 ， 4 ， 16 }构建一个二叉排序树，我们按顺序逐个插入元素。</p>
<p><img src="/images/树-8.png" alt="插入新节点" title="树-8"></p>
<p>插入过程是这样的：</p>
<ul>
<li>如果是空树，则创建一个新节点，新节点作为根，因此以元素10构建的* 节点为该二叉查找树的根。</li>
<li>插入5，5比10小，与10的左孩子节点进行比较，10的左孩子节点为空，进行插入。</li>
<li>插入15，15比10大，与10的右孩子节点进行比较，10的右孩子节点为空，进行插入。</li>
<li>插入6，6比10小，与10的左孩子节点5比较；6比5大，与5的右孩子节点进行比较，5的右孩子为空，进行插入。</li>
<li>插入4，4比10小，与10的左孩子节点5比较；4比5小，与5的左孩子节点进行比较，5的左孩子为空，进行插入。</li>
<li>插入16，16比10大，与10的右孩子节点15比较；16比15大，与15的右孩子节点进行比较，15的右孩子为空，进行插入。</li>
</ul>
<p>从这个过程我们可以总结出插入新元素的步骤：</p>
<p>寻找元素合适的插入位置：新元素与当前结点进行比较，若值大于当前结点，则从右子树进行寻找；否则从左子树进行寻找.<br>找到插入位置之后，以元素的值构建新节点，插入二叉排序树中<br>该过程的实现代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/*插入函数*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::insert(T key)</div><div class="line">&#123;</div><div class="line">    BSNode&lt;T&gt;* pparent = nullptr;</div><div class="line">    BSNode&lt;T&gt;* pnode = root;</div><div class="line"> </div><div class="line">    while (pnode != nullptr)        //寻找合适的插入位置</div><div class="line">    &#123;</div><div class="line">        pparent = pnode;</div><div class="line">        if (key &gt; pnode-&gt;value)</div><div class="line">            pnode = pnode-&gt;rchild;</div><div class="line">        else if (key &lt; pnode-&gt;value)</div><div class="line">            pnode = pnode-&gt;lchild;</div><div class="line">        else</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    pnode = new BSNode&lt;T&gt;(key); //以元素的值构建新节点</div><div class="line"></div><div class="line">    if (pparent == nullptr)            //如果是空树</div><div class="line">    &#123;</div><div class="line">        root = pnode;                  //则新节点为根</div><div class="line">    &#125;</div><div class="line">    else                            </div><div class="line">    &#123;</div><div class="line">        if (key  &gt; pparent-&gt;value)   </div><div class="line">        &#123;</div><div class="line">            pparent-&gt;rchild = pnode;//否则新节点为其父节点的左孩</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">            pparent-&gt;lchild = pnode; //或右孩</div><div class="line">    &#125;</div><div class="line">    pnode-&gt;parent = pparent;        //指明新节点的父节点 </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>将构建出来的新节点插入二叉排序树时，需要修改链接指针的指向。</p>
<h4 id="遍历平衡二叉树"><a href="#遍历平衡二叉树" class="headerlink" title="遍历平衡二叉树"></a>遍历平衡二叉树</h4><p>遍历平衡二叉树，就是以某种方式逐个“访问”二叉树的每一个节点。“访问”是指对节点的进行某种操作，例如输出节点的值。<br>平衡二叉树是有序树，严格区分左子树与右子树，如果规定左子树先于右子树的次序，我们有三种方式遍历二叉树：</p>
<ul>
<li>前序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
</ul>
<p>我们以如图的两棵二叉排序树进行遍历的算法演示。</p>
<p><img src="/images/树-9.png" alt="enter description here" title="树-9"></p>
<h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><p>若二叉树为空，则空操作返回，否则先访问根节点，然后前序遍历左子树，再前序遍历右子树。（简记为：VLR）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*前序遍历算法*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::preOrder()</div><div class="line">&#123;</div><div class="line">    preOrder(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::preOrder(BSNode&lt;T&gt; *p)</div><div class="line">&#123;</div><div class="line">    if (p != nullptr)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; p-&gt;value &lt;&lt; endl;</div><div class="line">        preOrder(p-&gt;lchild);</div><div class="line">        preOrder(p-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>前序遍历树a：10 5 4 3 6 15 16<br>前序遍历树b：5 3 2 4 8 7 9</p>
<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>若二叉树为空，则空操作返回，否则从根节点开始，中序遍历根节点的左子树，然后访问根节点，最后中序遍历右子树。（简记为：LVR）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*中序遍历算法*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::inOrder()</div><div class="line">&#123;</div><div class="line">    inOrder(root);</div><div class="line">&#125;;</div><div class="line">template&lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::inOrder(BSNode&lt;T&gt;* p)</div><div class="line">&#123;</div><div class="line">    if (p != nullptr)</div><div class="line">    &#123;</div><div class="line">        inOrder(p-&gt;lchild);</div><div class="line">        cout &lt;&lt; p-&gt;value &lt;&lt; endl;</div><div class="line">        inOrder(p-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>中序遍历树a：3 4 5 6 10 15 16<br>中序遍历树b：2 3 4 5 7 8 9</p>
<p>二叉排序树的中序遍历刚好输出一个非递减的有序序列。</p>
<h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>若树为空，则返回空操作，否则从左到右先叶子后节点的方式遍历访问左右子树，左右子树都访问结束，才访问根节点。（简称LRV）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*后序遍历算法*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::postOrder()</div><div class="line">&#123;</div><div class="line">    postOrder(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::postOrder(BSNode&lt;T&gt;* p)</div><div class="line">&#123;</div><div class="line">    if (p != nullptr)</div><div class="line">    &#123;</div><div class="line">        postOrder(p-&gt;lchild);</div><div class="line">        postOrder(p-&gt;rchild);</div><div class="line">        cout &lt;&lt; p-&gt;value&lt;&lt;endl;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>后序遍历树a：3 4 6 5 16 15 10<br>后序遍历树b：2 4 3 7 9 8 5</p>
<h4 id="前驱与后继"><a href="#前驱与后继" class="headerlink" title="前驱与后继"></a>前驱与后继</h4><p>对于一棵二叉排序树，中序遍历时刚好可以输出一个非递减的序列。例如前序遍历图九树a：3 4 5 6 10 15 16，则可称：</p>
<ul>
<li>4是5 前驱节点，6是5的后继节点</li>
<li>6是10的前驱节点，15是10的后继节点</li>
</ul>
<p>一个节点的前驱节点有3种情况：</p>
<ul>
<li>它有左子树，则左子树根节点为其前驱节点</li>
<li>它没有左子树，且它本身为右子树，则其父节点为其前驱节点</li>
<li>它没有左子树，且它本身为左子树，则它的前驱节点为“第一个拥有右子树的父节点”</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/*寻找其前驱节点*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::predecessor(BSNode&lt;T&gt;* pnode)</div><div class="line">&#123;</div><div class="line">if (pnode-&gt;lchild != nullptr)</div><div class="line">&#123;</div><div class="line">    pnode = pnode-&gt;lchild;</div><div class="line">    while (pnode-&gt;rchild != nullptr)</div><div class="line">    &#123;</div><div class="line">        pnode = pnode-&gt;rchild;</div><div class="line">    &#125;</div><div class="line">    return pnode;</div><div class="line">&#125;</div><div class="line"></div><div class="line">BSNode&lt;T&gt;* pparent = pnode-&gt;parent;</div><div class="line">while (pparent != nullptr &amp;&amp; pparent-&gt;lchild == pnode)//如果进入循环，则是第三种情况；否则为第二种情况</div><div class="line">&#123;</div><div class="line">    pnode = pparent;</div><div class="line">    pparent = pparent-&gt;parent;</div><div class="line">&#125;</div><div class="line">return pparent;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>同样的，一个节点的后继节点也有三种情况：</p>
<ul>
<li>它有右子树；则其后继节点为其右子树的最左节点</li>
<li>它没有右子树，但它本身是一个左孩子，则后继节点为它的双亲</li>
<li>它没有右子树，但它本身是一个右孩子，则其后继节点为“具有左孩子的最近父节点”<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/*寻找其后继节点*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::successor(BSNode&lt;T&gt;* pnode)</div><div class="line">&#123;</div><div class="line">    if (pnode-&gt;rchild != nullptr)</div><div class="line">    &#123;</div><div class="line">        pnode = pnode-&gt;rchild;</div><div class="line">        while (pnode-&gt;lchild != nullptr)</div><div class="line">        &#123;</div><div class="line">            pnode = pnode-&gt;lchild;</div><div class="line">        &#125;</div><div class="line">        return pnode;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    BSNode&lt;T&gt;* pparent = pnode-&gt;parent;</div><div class="line">    while (pparent!=nullptr&amp;&amp; pparent-&gt;rchild == pnode)</div><div class="line">    &#123;</div><div class="line">        pnode = pparent;</div><div class="line">        pparent = pparent-&gt;parent;</div><div class="line">    &#125;</div><div class="line">    return pparent;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>删除二叉排序树的某个节点有三种情况：</p>
<ul>
<li>被删除节点同时有左子树与右子树。</li>
<li>被删除节点只有左子树或只有右子树。</li>
<li>被删除节点没有子树。</li>
</ul>
<p>对于第一种情况，我们的处理方式是将前驱节点的值保存在当前结点，继而删除前驱节点。<br>对于第二种情况，我们直接用子树替换被删节点。<br>对于第三种情况，我们可以直接删除节点。</p>
<p><img src="/images/树-10.png" alt="删除节点" title="树-10"></p>
<p>删除节点的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">/*删除指定节点*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::remove(T key)</div><div class="line">&#123;</div><div class="line">    remove(root, key);</div><div class="line">&#125;;</div><div class="line">/*删除指定节点*/</div><div class="line">/*内部使用函数*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::remove(BSNode&lt;T&gt;* pnode, T key)</div><div class="line">&#123;</div><div class="line">    if (pnode != nullptr)</div><div class="line">    &#123;</div><div class="line">        if (pnode-&gt;value == key)</div><div class="line">        &#123;</div><div class="line">            BSNode&lt;T&gt;* pdel=nullptr;</div><div class="line"> </div><div class="line">            if (pnode-&gt;lchild == nullptr || pnode-&gt;rchild == nullptr)</div><div class="line">                pdel = pnode;                    //情况二、三：被删节点只有左子树或右子树，或没有孩子</div><div class="line">            else</div><div class="line">                pdel = predecessor(pnode);      //情况一：被删节点同时有左右子树，则删除该节点的前驱</div><div class="line"> </div><div class="line">            //此时，被删节点只有一个孩子（或没有孩子）.保存该孩子指针</div><div class="line">            BSNode&lt;T&gt;* pchild=nullptr;</div><div class="line">            if (pdel-&gt;lchild != nullptr)</div><div class="line">                pchild = pdel-&gt;lchild;</div><div class="line">            else</div><div class="line">                pchild = pdel-&gt;rchild;</div><div class="line"> </div><div class="line">            //让孩子指向被删除节点的父节点</div><div class="line">            if (pchild != nullptr)</div><div class="line">                pchild-&gt;parent = pdel-&gt;parent;</div><div class="line"> </div><div class="line">            //如果要删除的节点是头节点，注意更改root的值</div><div class="line">            if (pdel-&gt;parent == nullptr)</div><div class="line">                root = pchild;           </div><div class="line"> </div><div class="line">            //如果要删除的节点不是头节点，要注意更改它的双亲节点指向新的孩子节点</div><div class="line">            else if (pdel-&gt;parent-&gt;lchild==pdel)</div><div class="line">            &#123;</div><div class="line">                pdel-&gt;parent-&gt;lchild = pchild;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                pdel-&gt;parent-&gt;rchild = pchild;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            if (pnode-&gt;value != pdel-&gt;value)</div><div class="line">                pnode-&gt;value = pdel-&gt;value;</div><div class="line">            delete pdel;</div><div class="line">        &#125;</div><div class="line">        //进行递归删除</div><div class="line">        else if (key &gt; pnode-&gt;value)</div><div class="line">        &#123;</div><div class="line">            remove(pnode-&gt;rchild, key);</div><div class="line">        &#125;</div><div class="line">        else remove(pnode-&gt;lchild, key);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>我们可以递归或非递归地进行元素的查找。元素的查找过程与元素的插入过程一致，也是在不断地与当前结点进行比较，若值比当前节点的值大，则在右子树进行查找，若值比当前节点的值小，则在左子树进行查找，可以看到这是一个很适合递归操作的过程。而由于二叉排序树这种左小右大的节点特征，也很容易进行非递归查找。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">/*查找指定元素的节点（非递归）*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::search_Iterator(T key)</div><div class="line">&#123;</div><div class="line">    BSNode&lt;T&gt; * pnode = root;</div><div class="line">    while (pnode != nullptr)</div><div class="line">    &#123;</div><div class="line">        if (key == pnode-&gt;value)    //找到</div><div class="line">            return pnode;</div><div class="line">        if (key &gt; pnode-&gt;value)        //关键字比节点值大，在节点右子树查找</div><div class="line">            pnode = pnode-&gt;rchild;</div><div class="line">        else</div><div class="line">            pnode = pnode-&gt;lchild; //关键字比节点值小，在节点左子树查找</div><div class="line">    &#125;</div><div class="line">    return nullptr;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*查找指定元素的节点（递归）*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::search_recursion(T key)</div><div class="line">&#123;</div><div class="line">    return search(root, key);       </div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*private:search()*/</div><div class="line">/*递归查找的类内部实现*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::search(BSNode&lt;T&gt;* &amp; pnode, T key)</div><div class="line">&#123;</div><div class="line">    if (pnode == nullptr)</div><div class="line">        return nullptr;</div><div class="line">    if (pnode-&gt;value == key)</div><div class="line">        return pnode;</div><div class="line">    //cout &lt;&lt; &quot;--&gt;&quot; &lt;&lt; pnode-&gt;value &lt;&lt; endl; //可以输出查找路径</div><div class="line">    if (key &gt; pnode-&gt;value)</div><div class="line">        return search(pnode-&gt;rchild, key);</div><div class="line">    return search(pnode-&gt;lchild, key);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="查找最值元素"><a href="#查找最值元素" class="headerlink" title="查找最值元素"></a>查找最值元素</h4><p>二叉排序树的最小值位于其最左节点上；最大值位于其最右节点上：</p>
<p><img src="/images/树-11.png" alt="最值元素" title="树-11"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/*寻找最小元素*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">T BSTree&lt;T&gt;::search_minimun()</div><div class="line">&#123;</div><div class="line">    return search_minimun(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">T BSTree&lt;T&gt;::search_minimun(BSNode&lt;T&gt;* p)</div><div class="line">&#123;</div><div class="line">    if (p-&gt;lchild != nullptr)</div><div class="line">        return search_minimun(p-&gt;lchild);</div><div class="line">    return p-&gt;value;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*寻找最大元素*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">T BSTree&lt;T&gt;::search_maximum()</div><div class="line">&#123;</div><div class="line">    return search_maximum(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">T BSTree&lt;T&gt;::search_maximum(BSNode&lt;T&gt;*p)</div><div class="line">&#123;</div><div class="line">    if (p-&gt;rchild != nullptr)</div><div class="line">        return search_maximum(p-&gt;rchild);</div><div class="line">    return p-&gt;value;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="销毁二叉树"><a href="#销毁二叉树" class="headerlink" title="销毁二叉树"></a>销毁二叉树</h4><p>使用后序遍历递归销毁二叉树<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/*销毁二叉树*/</div><div class="line">template&lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::destory()</div><div class="line">&#123;</div><div class="line">    destory(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::destory(BSNode&lt;T&gt;* &amp;p)</div><div class="line">&#123;</div><div class="line">    if (p != nullptr)</div><div class="line">    &#123;</div><div class="line">        if (p-&gt;lchild != nullptr)</div><div class="line">            destory(p-&gt;lchild);</div><div class="line">        if (p-&gt;rchild != nullptr)</div><div class="line">            destory(p-&gt;rchild);</div><div class="line">        delete p;</div><div class="line">        p = nullptr;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    BSTree&lt;int&gt; t;</div><div class="line">    t.insert(62);</div><div class="line">    t.insert(58);</div><div class="line">    t.insert(47);</div><div class="line">    t.insert(51);</div><div class="line">    t.insert(35);</div><div class="line">    t.insert(37);</div><div class="line">    t.insert(88);</div><div class="line">    t.insert(73);</div><div class="line">    t.insert(99);</div><div class="line">    t.insert(93);</div><div class="line">    t.insert(95);</div><div class="line"> </div><div class="line">    cout &lt;&lt; endl &lt;&lt; &quot;中序遍历：&quot; &lt;&lt; endl;</div><div class="line">    t.inOrder();</div><div class="line"> </div><div class="line">    cout &lt;&lt; &quot;最大元素:&quot; &lt;&lt; t.search_maximum() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; &quot;最小元素:&quot; &lt;&lt; t.search_minimun() &lt;&lt; endl;</div><div class="line"> </div><div class="line">    cout &lt;&lt; &quot;删除元素99&quot; &lt;&lt; endl;</div><div class="line">    t.remove(99);</div><div class="line"> </div><div class="line">    cout &lt;&lt; &quot;最大元素:&quot; &lt;&lt; t.search_maximum() &lt;&lt; endl;</div><div class="line"> </div><div class="line">    t.destory();</div><div class="line"> </div><div class="line">    getchar();</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">运行结果：</div><div class="line"></div><div class="line"> </div><div class="line">中序遍历：</div><div class="line">35</div><div class="line">37</div><div class="line">47</div><div class="line">51</div><div class="line">58</div><div class="line">62</div><div class="line">73</div><div class="line">88</div><div class="line">93</div><div class="line">95</div><div class="line">99</div><div class="line">最大元素:99</div><div class="line">最小元素:35</div><div class="line">删除元素99</div><div class="line">最大元素:95</div></pre></td></tr></table></figure>
<blockquote>
<p>转载<a href="http://www.cnblogs.com/QG-whz/p/5168620.html#_label0" target="_blank" rel="external">http://www.cnblogs.com/QG-whz/p/5168620.html#_label0</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;树的简介&quot;&gt;&lt;a href=&quot;#树的简介&quot; class=&quot;headerlink&quot; title=&quot;树的简介&quot;&gt;&lt;/a&gt;树的简介&lt;/h3&gt;&lt;p&gt;树是一种数据结构，它是n(n&amp;gt;=0)个节点的有限集。n=0时称为空树。n&amp;gt;0时，有限集的元素构成一个具有层次感的
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>jquery|Ajax</title>
    <link href="http://yoursite.com/2018/01/24/jquery-Ajax/"/>
    <id>http://yoursite.com/2018/01/24/jquery-Ajax/</id>
    <published>2018-01-24T15:26:56.000Z</published>
    <updated>2018-01-27T08:22:15.016Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">function getData()&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">                url:&quot;../api&quot;,</div><div class="line">                type:&quot;GET&quot;,</div><div class="line">                data:&#123;&quot;page&quot;:&quot;1&quot;&#125;,</div><div class="line">                processData:false,</div><div class="line">                contentType:false,</div><div class="line">                dataType:&quot;json&quot;,</div><div class="line">                success:function(data)&#123;</div><div class="line">                	// console.info(data);</div><div class="line">                	$(&quot;#resText&quot;).html(&quot;状态：&quot;+data.status); </div><div class="line">                &#125;,</div><div class="line">                error:function(e)&#123;</div><div class="line">                    $(&quot;#resText&quot;).html(&quot;发生错误了&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;);    </div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function sendData()&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">                url:&quot;../api/addFindThing&quot;,</div><div class="line">                type:&quot;post&quot;,</div><div class="line">                data:new FormData($(&quot;#form&quot;)[0]),</div><div class="line">                processData:false,</div><div class="line">                contentType:false,</div><div class="line">                dataType:&quot;json&quot;,</div><div class="line">                success:function(data)&#123;</div><div class="line">                	// console.info(data);</div><div class="line">                	$(&quot;#resText&quot;).html(&quot;状态：&quot;+data.status); </div><div class="line">                &#125;,</div><div class="line">                error:function(e)&#123;</div><div class="line">                    $(&quot;#resText&quot;).html(&quot;发生错误了&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;);        </div><div class="line">	&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
  </entry>
  
</feed>
