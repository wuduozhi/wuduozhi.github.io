<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>只为不凡而来</title>
  <subtitle>小智的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-03T03:25:32.878Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wuduozhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java|Jersey入门实践</title>
    <link href="http://yoursite.com/2018/02/03/Java-Jersey%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/02/03/Java-Jersey入门实践/</id>
    <published>2018-02-03T10:34:34.000Z</published>
    <updated>2018-02-03T03:25:32.878Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jersey简介"><a href="#Jersey简介" class="headerlink" title="Jersey简介"></a>Jersey简介</h3><p>Jersey是JAX-RS（JSR311）开源参考实现用于构建RESTful Web service，它包含三个部分：</p>
<ul>
<li><p>核心服务器（Core Server）：通过提供JSR 311中标准化的注释和API标准化，可以用直观的方式开发RESTful Web服务。</p>
</li>
<li><p>核心客户端(Core Client)：Jersey客户端API能够帮助开发者与RESTful服务轻松通信；</p>
</li>
<li><p>集成（Integration)：Jersey还提供可以轻松继承Spring、Guice、Apache Abdera的库。</p>
</li>
</ul>
<h3 id="来个小demo"><a href="#来个小demo" class="headerlink" title="来个小demo"></a>来个小demo</h3><p>学习技术嘛，看多少理论书籍，都不如来个小Demo学的快。在这里，我们主要介绍如何使用Jersey创建Web  Service：</p>
<p>环境：</p>
<ul>
<li>Maven 3.2.1</li>
<li>Idea</li>
<li>Java  JDK 1.8</li>
<li>Tomcat 7.0</li>
</ul>
<h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">    &lt;groupId&gt;net.jianxi.tutorials.jerseyws&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jerseyDemo&lt;/artifactId&gt;</div><div class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line">    &lt;version&gt;1.0&lt;/version&gt;</div><div class="line">    &lt;name&gt;jerseywstest Maven Webapp&lt;/name&gt;</div><div class="line">    &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;!--jersey--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jersey-container-servlet-core&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;2.0&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--JAXB API--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;javax.xml.ws&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jaxws-api&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;2.1&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!-- Json支持 --&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jackson-core-asl&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.9.12&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.9.12&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jackson-jaxrs&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.9.12&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>在pom.xml中，我们引入了Jersey的依赖包，同时也引入了Json的依赖包，因为在这里主要用Json的格式来传输数据。</p>
<h4 id="写一个Model"><a href="#写一个Model" class="headerlink" title="写一个Model"></a>写一个Model</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    </div><div class="line">    String id;</div><div class="line">    </div><div class="line">    String name;</div><div class="line">   </div><div class="line">    String school;</div><div class="line"></div><div class="line">    public String getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(String id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSchool() &#123;</div><div class="line">        return school;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSchool(String school) &#123;</div><div class="line">        this.school = school;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写过Java应用的，都知道这个类是干嘛的，在这里就不多说了。</p>
<h4 id="创建服务UserService"><a href="#创建服务UserService" class="headerlink" title="创建服务UserService"></a>创建服务UserService</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Path(&quot;User&quot;)</div><div class="line">public class UserService &#123;</div><div class="line"></div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public User getUser()&#123;</div><div class="line">        User u = new User();</div><div class="line">        u.setId(&quot;1234556&quot;);</div><div class="line">        u.setName(&quot;小智e&quot;);</div><div class="line">        u.setSchool(&quot;湖南大学&quot;);</div><div class="line"></div><div class="line">        return u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @POST</div><div class="line">    @Produces(&#123; MediaType.APPLICATION_JSON + &quot;;charset=UTF-8&quot; &#125;)</div><div class="line">    public User addUser(@BeanParam User user) &#123;</div><div class="line">        return user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码稍后讲解。</p>
<h4 id="写APIApplication"><a href="#写APIApplication" class="headerlink" title="写APIApplication"></a>写APIApplication</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class APIApplication extends ResourceConfig &#123;</div><div class="line">    public APIApplication() &#123;</div><div class="line"></div><div class="line">        //资源包|提供服务的包   即UserServce所在的包名</div><div class="line">        packages(true, &quot;jersey.rest&quot;);</div><div class="line"></div><div class="line">        //注册数据转换器</div><div class="line">        register(JacksonJsonProvider.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最后一步-写web-xml"><a href="#最后一步-写web-xml" class="headerlink" title="最后一步 写web.xml"></a>最后一步 写web.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</div><div class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</div><div class="line">         version=&quot;3.1&quot;&gt;</div><div class="line">    &lt;welcome-file-list&gt;</div><div class="line">        &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;</div><div class="line">    &lt;/welcome-file-list&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;JerseyServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;jersey.rest.APIApplication&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line"></div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;JerseyServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><p>测试get方法</p>
<p><img src="/images/Jersey-get.png" alt="用postman测试" title="Jersey-get"></p>
<p>测试post方法</p>
<p><img src="/images/Jsersey-Post.png" alt="用postman测试" title="Jsersey-Post"></p>
<p>这里需要注意的是，我们用的是@BeanParam的注解来注入参数，User模板类要改成这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    @FormParam(&quot;id&quot;)</div><div class="line">    String id;</div><div class="line">    @FormParam(&quot;name&quot;)</div><div class="line">    String name;</div><div class="line">    @FormParam(&quot;school&quot;)</div><div class="line">    String school;</div><div class="line"></div><div class="line">    public String getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(String id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSchool() &#123;</div><div class="line">        return school;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSchool(String school) &#123;</div><div class="line">        this.school = school;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同时，发送过来的数据格式应该是 x-www-form-urlencoded 的格式。至于为什么要用@BeanParam 来接收前端数据，个人觉得这样挺方便，映射成了Java世界里的对象，更好更方便地处理数据。</p>
<p>现在回过头来看 UserService,就不难理解了。@Path(“User”)指的是路径，@GET、@POST指的是方法，(对于HTTP动词，可查看相关资料)。@Produces(MediaType.APPLICATION_JSON) 表示的是返回的数据格式。更多注解方式可查看官方文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Path(&quot;User&quot;)</div><div class="line">public class UserService &#123;</div><div class="line"></div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public User getUser()&#123;</div><div class="line">        User u = new User();</div><div class="line">        u.setId(&quot;1234556&quot;);</div><div class="line">        u.setName(&quot;小智e&quot;);</div><div class="line">        u.setSchool(&quot;湖南大学&quot;);</div><div class="line"></div><div class="line">        return u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @POST</div><div class="line">    @Produces(&#123; MediaType.APPLICATION_JSON + &quot;;charset=UTF-8&quot; &#125;)</div><div class="line">    public User addUser(@BeanParam User user) &#123;</div><div class="line">        return user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，入门教程就结束了。</p>
<h4 id="加入Hibernate处理数据层"><a href="#加入Hibernate处理数据层" class="headerlink" title="加入Hibernate处理数据层"></a>加入Hibernate处理数据层</h4><p>需要加入的依赖包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!-- MySQL database driver --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.1.9&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;!-- hibernate 4.3.0 start --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.3.0.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate.javax.persistence&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-jpa-2.0-api&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.0.1.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-ehcache&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.3.0.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.1.0.Alpha1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate.common&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.0.4.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!-- hibernate 4.3.0 end --&gt;</div></pre></td></tr></table></figure>
<p>加入Hibernate来处理对象持久化，开发Wervice就方便多了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Jersey简介&quot;&gt;&lt;a href=&quot;#Jersey简介&quot; class=&quot;headerlink&quot; title=&quot;Jersey简介&quot;&gt;&lt;/a&gt;Jersey简介&lt;/h3&gt;&lt;p&gt;Jersey是JAX-RS（JSR311）开源参考实现用于构建RESTful Web ser
    
    </summary>
    
    
      <category term="Jersey" scheme="http://yoursite.com/tags/Jersey/"/>
    
  </entry>
  
  <entry>
    <title>架构|RESTful API设计</title>
    <link href="http://yoursite.com/2018/01/30/%E6%9E%B6%E6%9E%84-RESTful-API%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/01/30/架构-RESTful-API设计/</id>
    <published>2018-01-30T10:11:57.000Z</published>
    <updated>2018-02-03T03:22:17.456Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RESTful简介"><a href="#RESTful简介" class="headerlink" title="RESTful简介"></a>RESTful简介</h3><p>REST(Representation State Transfer)翻译为表达性状态转移。REST是一种架构风格。在这种架构风格中，对象被视为一种资源（resource)。表达性状态是指资源数据在某个瞬间的状态快照。资源可以有多种表述，表述状态具有描述性，包括资源数据的内容、表述格式（XML、Json…)等信息。</p>
<p>REST的资源是可寻址的，通过HTTP协议的通用动词方法（如GET、PUT、DELETE、POST），同时通过URI协议来唯一标识某一个资源公布出来的接口。</p>
<p>请求一个资源的过程可以理解为访问一个具有指定性和描述性的URI，通过HTTP协议，将资源的表述性从服务器“转移”到客户端或者相反的方向。</p>
<h3 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h3><p>对于资源的具体操作，由HTTP动词表示。</p>
<p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>
<table>
<thead>
<tr>
<th>动词</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET（SELECT）</td>
<td>从服务器取出资源（一项或多项）。</td>
</tr>
<tr>
<td>POST（CREATE）</td>
<td>在服务器新建一个资源。</td>
</tr>
<tr>
<td>PUT（UPDATE）</td>
<td>在服务器更新资源（客户端提供改变后的完整资源）。</td>
</tr>
<tr>
<td>PATCH（UPDATE）</td>
<td>在服务器更新资源（客户端提供改变的属性）。</td>
</tr>
<tr>
<td>DELETE（DELETE）</td>
<td>从服务器删除资源。</td>
</tr>
</tbody>
</table>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><ul>
<li>GET /zoos：列出所有动物园</li>
<li>POST /zoos：新建一个动物园</li>
<li>GET /zoos/ID：获取某个指定动物园的信息</li>
<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li>
<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>
<li>DELETE /zoos/ID：删除某个动物园</li>
<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>
<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>
</ul>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul>
<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（* Idempotent）。</li>
<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>
<li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li>
<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>
<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>
<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>
<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>
<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>
<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>
<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>
<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>
<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。<br>状态码的完全列表参见这里。</li>
</ul>
<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>综合上面的解释，我们总结一下什么是RESTful架构：</p>
<p>　　（1）每一个URI代表一种资源；</p>
<p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p>
<p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>
<h3 id="一些误区"><a href="#一些误区" class="headerlink" title="一些误区"></a>一些误区</h3><p>RESTful架构有一些典型的设计误区。</p>
<p>最常见的一种设计错误，就是URI包含动词。因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p>
<p>举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p>
<p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　POST /accounts/1/transfer/500/to/2</div></pre></td></tr></table></figure>
<p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　POST /transaction HTTP/1.1</div><div class="line">　　Host: 127.0.0.1</div><div class="line">　　</div><div class="line">　　from=1&amp;to=2&amp;amount=500.00</div></pre></td></tr></table></figure>
<p>另一个设计误区，就是在URI中加入版本号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　http://www.example.com/app/1.0/foo</div><div class="line"></div><div class="line">　　http://www.example.com/app/1.1/foo</div><div class="line"></div><div class="line">　　http://www.example.com/app/2.0/foo</div></pre></td></tr></table></figure>
<p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RESTful简介&quot;&gt;&lt;a href=&quot;#RESTful简介&quot; class=&quot;headerlink&quot; title=&quot;RESTful简介&quot;&gt;&lt;/a&gt;RESTful简介&lt;/h3&gt;&lt;p&gt;REST(Representation State Transfer)翻译为表达性状
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java|Restful和Jersey介绍</title>
    <link href="http://yoursite.com/2018/01/28/Java-Restful-%E5%92%8C-Jersey%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/01/28/Java-Restful-和-Jersey介绍/</id>
    <published>2018-01-27T20:38:21.000Z</published>
    <updated>2018-02-03T03:22:19.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>REST 中最重要的概念是资源（resources） ，使用全球 ID（通常使用 URI）标识。client应用程序使用 HTTP 方法（GET/ POST/ PUT/ DELETE ）操作资源或资源集。</p>
<p>RESTful Web 服务是使用 HTTP 和 REST 原理实现的 Web 服务。通常。RESTful Web 服务应该定义下面方面：Web 服务的基/根 URI。比方 <a href="http://host/" target="_blank" rel="external">http://host/</a><appcontext>/resources。支持 MIME 类型的响应数据，包含JSON/XML/ATOM等等。服务支持的操作集合（比如 POST、GET、PUT 或  DELETE)</appcontext></p>
<h3 id="REST-与-JSR（jersey"><a href="#REST-与-JSR（jersey" class="headerlink" title="REST 与 JSR（jersey)"></a>REST 与 JSR（jersey)</h3><p>JSR－311  Java API for RESTful Web Services (JAX-RS) 1.0 and 1.1</p>
<p>JAX-RS是将在JavaEE 6引起的一种新技术。 JAX-RS即Java API for RESTful Web Services。是一个Java编程语言的应用程序接口，支持依照表述性状态转移（REST）架构风格创建Web服务。</p>
<p>JAX-RS使用了Java SE5引入的Java标注来简化Web服务的client和服务端 的开发和部署。包含：</p>
<p>@Path。标注资源类或者方法的相对路径 　　<br>@GET。@PUT。@POST。@DELETE，标注方法是HTTP请求的类型。</p>
<p>　　<br>@Produces，标注返回的MIME媒体类型 　　<br>@Consumes。标注可接受请求的MIME媒体类型<br>@PathParam。@QueryParam。@HeaderParam。@CookieParam，@MatrixParam。@FormParam,分别标注方法的參数来自于HTTP请求的不同位置。比如@PathParam来自于URL的路径，@QueryParam来自于URL的查询參数，@HeaderParam来自于HTTP请求的头信息，@CookieParam来自于HTTP请求的Cookie,@FormParam来自于HTTP请求的post的form格式。</p>
<h3 id="Jersey-jar包简单介绍"><a href="#Jersey-jar包简单介绍" class="headerlink" title="Jersey jar包简单介绍"></a>Jersey jar包简单介绍</h3><p>Jersey 是 JAX-RS 的參考实现，它包括三个主要部分。</p>
<ul>
<li>核心server（CoreServer）：通过提供JSR311中标准化的凝视和API标准化，您能够用直观的方式开发 RESTful Web 服务。</li>
<li>核心client（CoreClient）：JerseyclientAPI帮助您与REST服务轻松通信</li>
<li>集成（Integration）：Jersey 还提供能够轻松集成 Spring、Guice、Apache Abdera 的库。</li>
</ul>
<h3 id="Jersey配置"><a href="#Jersey配置" class="headerlink" title="Jersey配置"></a>Jersey配置</h3><p>从 Jersey 开发包中下面的库为必须：</p>
<ul>
<li>核心服务器：jersey-core.jar。jersey-server.jar。jsr311-api.jar。asm.jar</li>
<li>核心客户端：（用于測试）jersey-client.jar</li>
<li>JAXB 支持：（在高级例子中使用）jaxb-impl.jar，jaxb-api.jar。activation.jar，stax-api.jar，wstx-asl.jar</li>
<li>JSON 支持：（在高级例子中使用）jersey-json.jar</li>
</ul>
<p>(JSON是类似于xml的一种通用。在不同project/语言/平台间传递数据的格式，其比xml更精炼更优良，差点儿全部的语言和框架已经支持了，传递过来的数据再用JSON解码就可以，就像c++struct结构体一样，直接json.xxx就可以訪问。多层的话就json.xxx.xxx)</p>
<p>您须要将全部的 REST 请求发送到 Jersey 容器 —— 在应用程序的 web.xml 文件里定义 servlet 调度程序（參见清单 1）。</p>
<p>除了声明 Jersey servlet 外，它还定义一个初始化參数，指示包括资源的 Java 包。</p>
<p>Web.xml: Xml代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;  </div><div class="line">    &lt;servlet-name&gt;Jersey REST Service&lt;/servlet-name&gt;  </div><div class="line">    &lt;servlet-class&gt;  </div><div class="line">      com.sun.jersey.spi.container.servlet.ServletContainer  </div><div class="line">    &lt;/servlet-class&gt;  </div><div class="line">    &lt;init-param&gt;  </div><div class="line">      &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;  </div><div class="line">      &lt;param-value&gt;sh.cmbchina.pension.resources&lt;/param-value&gt;  </div><div class="line">    &lt;/init-param&gt;  </div><div class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </div><div class="line">&lt;/servlet&gt;  </div><div class="line">&lt;servlet-mapping&gt;  </div><div class="line">    &lt;servlet-name&gt;Jersey REST Service&lt;/servlet-name&gt;  </div><div class="line">    &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;  </div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure></p>
<p>这样，全部在包sh.cmbchina.pension.resources以下的resource类都会被注冊为Restful url的响应处理类。</p>
<h3 id="添加Json支持"><a href="#添加Json支持" class="headerlink" title="添加Json支持"></a>添加Json支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jersey-json&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.18&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;REST 中最重要的概念是资源（resources） ，使用全球 ID（通常使用 URI）标识。client应用程序使用 HTTP 方法（G
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构|树</title>
    <link href="http://yoursite.com/2018/01/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
    <id>http://yoursite.com/2018/01/24/数据结构-树/</id>
    <published>2018-01-24T15:46:20.000Z</published>
    <updated>2018-01-30T03:19:03.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树的简介"><a href="#树的简介" class="headerlink" title="树的简介"></a>树的简介</h3><p>树是一种数据结构，它是n(n&gt;=0)个节点的有限集。n=0时称为空树。n&gt;0时，有限集的元素构成一个具有层次感的数据结构。树是一种典型的一对多的数据结构，类比我们现实生活中的公司分工结构。</p>
<p>区别于线性表一对一的元素关系，树中的节点是一对多的关系。树具有以下特点：</p>
<ul>
<li>n&gt;0时，根节点是唯一的，不可能存在多个根节点。</li>
<li>每个节点有零个至多个子节点；除了根节点外，每个节点有且仅有一个父节点。根节点没有父节点。</li>
</ul>
<p><img src="/images/树-1.png" alt="树" title="树-1"></p>
<p>树有许多相关的术语与概念，在学习树的结构之前，我们要熟悉这些概念。<br>|概念|解释|<br>|—-|—-|<br>|子树|除了根节点外，每个子节点都可以分为多个不相交的子树。|<br>|孩子与双亲|若一个结点有子树，那么该结点称为子树根的”双亲”，子树的根是该结点的”孩子”。|<br>|兄弟|具有相同双亲的节点互为兄弟，例如B与H互为兄弟。|<br>|节点的度|一个节点拥有子树的数目。例如A的度为2，B的度为1，C的度为3.|<br>|叶子|没有子树，也即是度为0的节点。|<br>|分支节点|除了叶子节点之外的节点，也即是度不为0的节点。|<br>|内部节点|除了根节点之外的分支节点。|<br>|层次|根节点为第一层，其余节点的层次等于其双亲节点的层次加1.|<br>|树的高度|也称为树的深度，树中节点的最大层次。|<br>|有序树|树中节点各子树之间的次序是重要的，不可以随意交换位置。|<br>|无序树|树种节点各子树之间的次序是不重要的。可以随意交换位置。|<br>|森林|0或多棵互不相交的树的集合。例如图二中的两棵树为森林。|</p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>在树中，我们经常用的一般是二叉树这种特殊的树。二叉树或者为空集，或者由一个根节点和两棵互不相交的、分别称为左子树和右子树的二叉树组成。从定义可以看出一棵二叉树：</p>
<ul>
<li>二叉树是有序树，区分左子树与右子树，不可以随意交换子树位置。</li>
<li>一个节点的子树数量取值范围为0，1，2。0代表该节点是叶子节点，1代表该节点只有左子树或只有右子树，2代表该节点有左右子树。</li>
</ul>
<p>根据定义，一棵二叉树有5中基本形态：</p>
<p><img src="/images/树-2.png" alt="enter description here" title="树-2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;树的简介&quot;&gt;&lt;a href=&quot;#树的简介&quot; class=&quot;headerlink&quot; title=&quot;树的简介&quot;&gt;&lt;/a&gt;树的简介&lt;/h3&gt;&lt;p&gt;树是一种数据结构，它是n(n&amp;gt;=0)个节点的有限集。n=0时称为空树。n&amp;gt;0时，有限集的元素构成一个具有层次感的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jquery|Ajax</title>
    <link href="http://yoursite.com/2018/01/24/jquery-Ajax/"/>
    <id>http://yoursite.com/2018/01/24/jquery-Ajax/</id>
    <published>2018-01-24T15:26:56.000Z</published>
    <updated>2018-01-27T08:22:15.016Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">function getData()&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">                url:&quot;../api&quot;,</div><div class="line">                type:&quot;GET&quot;,</div><div class="line">                data:&#123;&quot;page&quot;:&quot;1&quot;&#125;,</div><div class="line">                processData:false,</div><div class="line">                contentType:false,</div><div class="line">                dataType:&quot;json&quot;,</div><div class="line">                success:function(data)&#123;</div><div class="line">                	// console.info(data);</div><div class="line">                	$(&quot;#resText&quot;).html(&quot;状态：&quot;+data.status); </div><div class="line">                &#125;,</div><div class="line">                error:function(e)&#123;</div><div class="line">                    $(&quot;#resText&quot;).html(&quot;发生错误了&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;);    </div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function sendData()&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">                url:&quot;../api/addFindThing&quot;,</div><div class="line">                type:&quot;post&quot;,</div><div class="line">                data:new FormData($(&quot;#form&quot;)[0]),</div><div class="line">                processData:false,</div><div class="line">                contentType:false,</div><div class="line">                dataType:&quot;json&quot;,</div><div class="line">                success:function(data)&#123;</div><div class="line">                	// console.info(data);</div><div class="line">                	$(&quot;#resText&quot;).html(&quot;状态：&quot;+data.status); </div><div class="line">                &#125;,</div><div class="line">                error:function(e)&#123;</div><div class="line">                    $(&quot;#resText&quot;).html(&quot;发生错误了&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;);        </div><div class="line">	&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>总结|我的大二.上</title>
    <link href="http://yoursite.com/2018/01/24/%E6%80%BB%E7%BB%93-%E6%88%91%E7%9A%84%E5%A4%A7%E4%BA%8C-%E4%B8%8A/"/>
    <id>http://yoursite.com/2018/01/24/总结-我的大二-上/</id>
    <published>2018-01-24T09:33:17.000Z</published>
    <updated>2018-01-30T03:19:07.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的大二"><a href="#我的大二" class="headerlink" title="我的大二"></a>我的大二</h3><p>不得不说，大二的上学期一转眼就过了，让人触不及防，可以说大学生活已经过了一半了。现在都流行搞年度总结，像支付宝会出年度账单、网易云音乐会出年度歌单…那我也来个 <strong>小智年度总结吧</strong></p>
<h4 id="加入找实习的大军"><a href="#加入找实习的大军" class="headerlink" title="加入找实习的大军"></a>加入找实习的大军</h4><p>这是在刚开学那会，弄着玩的，但自己还真的有想过要找份实习的。在写了自己的第一份简历后，有学长学长的推荐，或者看到一些招聘信息，就一股脑的投了简历了。当时也没多想，毕竟年轻嘛，目的性也不是很强，成是最好，不成就当是练手了。当时也参加了一些笔试，可能自己还没认真钻研过数据结构和算法这些很基础的内容吧，只是知道个大概，所以笔试的时候并不能发挥的很好，因此往往总是在笔试后就止步不前了。不过，这一段经历还是挺好玩的，毕竟是以一种试一试与学习的心态去参加的，没有那么多压力，很轻松。同时，也发现了自己的很多问题吧。</p>
<h4 id="学习数据结构"><a href="#学习数据结构" class="headerlink" title="学习数据结构"></a>学习数据结构</h4><p>学校开了数据结构的这门课，但是自己从来没有认真听过一节课，因为自己总感觉不是自己想要的那种上课形式，但是自己也不知道自己想要的形式是什么。哎，那就靠自己吧。自己就在书上看理论，然后网上找了一些好的博客，看看别人是怎么实现的。编程这东西，理论开起来简单，但是要一步步写代码来实现还是有难度的。不得不说，数据结构这门课还是很重要，借助这个工具，我们能更好更合理地组织数据在内存或硬盘中的存储方式，更好的适应我们的应用场景。</p>
<h4 id="学习数字逻辑"><a href="#学习数字逻辑" class="headerlink" title="学习数字逻辑"></a>学习数字逻辑</h4><p>之前就听学长说数字逻辑这门课我们搞软件的用不上，我半信半疑，先不说其他的，个人觉得上课的胡红平老师听nice的，有耐心说话又好听，有点像高中的老师。我觉得不管搞什么方向，只要跟计算机相关的，还是要必要知道这些逻辑门的东西，这些底层的东西虽然在开发的时候用不上，但是能帮助我们更好地理解程序的运行，帮助我们写出漂亮的代码。</p>
<p>这门课还有个大作业，就是用VHDL设计一个模型机，也可以说是一个简单的CPU吧，就是可以完成一些指令，比如说加、减、移位…这些操作。自己弄了一个星期，没成功，借助了某位学霸的杰作去验收，认识学霸还是很有必要的。验收完后，自己又继续搞了两天吧，把自己的完成了，还是很有成就感的。</p>
<h4 id="近红外数据库开发"><a href="#近红外数据库开发" class="headerlink" title="近红外数据库开发"></a>近红外数据库开发</h4><p>记得是小学期的时候，课挺少的，仕祺学长发了个大数据分享，自己觉得无聊就去了。到哪之后，勇哥(咖啡厅老板)就问我做过项目没有呀？有没有实习的打算啊？当时自己也有这个打算，就说有，然后也简单了解了他那边的情况，说是陈浩老师手下的团队，就加入了，简单点说就是如果有什么项目，自己可以加入开发，然后增加自己的项目经历。</p>
<p>大概过了一两个月吧，就有项目来了。项目是要搞一个方便农大的实验室进行的近红外的研究，给他们一个存储数据的平台，然后方便进行大数据分析。这个项目还是很好玩的，跟陈浩老师的研究生和两个大三的学长一起组成一个团队，我能得到的只有需求，剩下的一切都要我们自己完成。</p>
<p>我们就一起讨论需求，然后确定需求，接着画项目的流程图，然后是原型图。再接着就是根据原型图设计数据库，等数据库设计好后就是开发了。这中间自己只参与了需求的讨论、数据库的设计以及后台的开发，当然，其他的一些部分自己也了解了一下，知道这个步骤是要干什么。在这过程中，自己也学到了一些东西吧。技术上就是了解了Java的SpringMVC框架，但更受益的是团队管理与团队协作中的一些知识：</p>
<ul>
<li>每个人要有周报，汇总自己解决的问题与遇到的问题</li>
<li>团队之间的沟通与重要通知推荐用邮件啊</li>
<li>开会要有会议记录啊</li>
<li>要有项目计划表来推动项目的推进啊</li>
</ul>
<h4 id="弦歌微湖大公众号的后台开发"><a href="#弦歌微湖大公众号的后台开发" class="headerlink" title="弦歌微湖大公众号的后台开发"></a>弦歌微湖大公众号的后台开发</h4><p>经过暑假新生宝典的洗礼，自己可以说是入门Web开发了，知道前后端的数据交互以及各自的工作流程了。这学期就接了一些实际的锅：</p>
<h5 id="知湖3-0的改版-微湖大的内部接口"><a href="#知湖3-0的改版-微湖大的内部接口" class="headerlink" title="知湖3.0的改版|微湖大的内部接口"></a>知湖3.0的改版|微湖大的内部接口</h5><p>这相当与重写了之前用户版的知湖了。之前是用基本的PHP和纯过程思想来写的，很难维护与扩展。过程中，也没需要什么难题，但是总是在加需求，想到什么好的点子就加，然后还不是很确定最终版本，进度就一直拖，所以到现在还不上线。不过自己倒是琢磨了一波微信公众号的一些接口规则，可以说基本掌握了微信的那一套吧。</p>
<h5 id="失物招领"><a href="#失物招领" class="headerlink" title="失物招领"></a>失物招领</h5><p>这应该是老大的一个硬需求吧。然后张惟丰就让我负责这个项目的进行，刚开始是我们自己想的很简单的实现，但是后来产品经理李畅加了加了匹配的功能。确实，这个功能是很有必要的，毕竟我们有学生的一些基本信息，要让这些信息发生价值，不然这些信息就全都是摆设了。</p>
<p>说到信息，自己也深有体会。记得有问过胡哥，为什么敲代码的叫做码农，胡哥说因为信息就向土壤，搞IT的就是在信息的基础上做加工，然后对外提供服务，所以码农就出现了。信息也被马云爸爸称做资源，也是很对的。</p>
<h4 id="联想比赛"><a href="#联想比赛" class="headerlink" title="联想比赛"></a>联想比赛</h4><p>这是联想俱乐部举办的一个比赛，主要看创新，看Idea怎么样。自己和队友（黄卫江、黄智威）想的是一个可以全方位为旅游出行者提供方便，提供实时的天气、景区信息等…同时能根据预算、兴趣等标签进行个性化推荐。想法应该还可以吧，接着就是怎么把这个想法在答辩的时候完美呈现给举办方。我们分工做PPT和进行答辩前的练习，但是在做PPT和上台答辩这两方面都是自己的短处，自己也没帮上什么忙。自己唯一出力的就是决赛的那个原型设计了。最卖力的还是黄智威吧，ppt大部分都是他搞得，上台答辩也是他，他确实是能说，这一点自己真的比不上。一个团队确实是需要不同的人才，需要有技术上的、管理上的…缺一不可。</p>
<h4 id="未来畅想"><a href="#未来畅想" class="headerlink" title="未来畅想"></a>未来畅想</h4><p>这一学期，自己感觉过得好快，一眨眼的功夫就期末考试了，就要回家过年了。这学期感觉自己也挺忙的，但仔细想想也没做什么实际性的东西出来，都是在弄一些增删改查的东西。这些是不需要动脑，有点基础都能完成的工作，完全没有挑战。自己也在想自己的竞争力在哪？对哇，自己还是要选择一个方向，机器学习？区块链？…然后深究的，这有这些东西才是所谓的竞争力。</p>
<p>下学期还是要学习一下新的东西，不能在原地踏步了，现在想想可以弄一下这些事：</p>
<ul>
<li>爬虫</li>
<li>机器学习</li>
<li>区块链</li>
<li>……</li>
</ul>
<p>总之，要学习一些别人不懂的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我的大二&quot;&gt;&lt;a href=&quot;#我的大二&quot; class=&quot;headerlink&quot; title=&quot;我的大二&quot;&gt;&lt;/a&gt;我的大二&lt;/h3&gt;&lt;p&gt;不得不说，大二的上学期一转眼就过了，让人触不及防，可以说大学生活已经过了一半了。现在都流行搞年度总结，像支付宝会出年度账单、
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>工具|Maven工具的使用</title>
    <link href="http://yoursite.com/2018/01/24/%E5%B7%A5%E5%85%B7-Maven%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/24/工具-Maven工具的使用/</id>
    <published>2018-01-23T21:43:25.000Z</published>
    <updated>2018-01-27T08:22:16.698Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h3><p>Apache Maven 是一种用作软件项目管理和理解工具。它基于项目对象模型（POM）的概念，可以管理一个项目的构建、报告以及从项目核心信息中生成文档。</p>
<p>Maven是一种项目管理和理解工具。Maven向开发者提供了一个完整的构建生命周期框架。开发团队几乎不用花时间就可以使用自动化构建项目的基础框架，因为 Maven使用了一套标准的目录结构和默认的构建生命周期。</p>
<p>Maven提供给开发者管理如下过程的方法：</p>
<ul>
<li>项目构建(Builds)</li>
<li>文档(Documentation)</li>
<li>报告(Reporting)</li>
<li>项目依赖(Dependencies)</li>
<li>软件配置管理(SCMs)</li>
<li>发布(Releases)</li>
<li>分发(Distribution)</li>
<li>邮件列表(mailing list)</li>
</ul>
<p>总的来说，Maven简化和统一了项目构建的过程。它无缝地处理项目编译，分发，文档，团队合作和其他任务，增加了任务处理的重用性，并可以处理大多数构建相关的任务。</p>
<h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul>
<li>mvn -v //查看版本  </li>
<li>mvn archetype:create //创建 Maven 项目  </li>
<li>mvn compile //编译源代码  </li>
<li>mvn test-compile //编译测试代码  </li>
<li>mvn test //运行应用程序中的单元测试  </li>
<li>mvn site //生成项目相关信息的网站  </li>
<li>mvn package //依据项目生成 jar 文件  </li>
<li>mvn install //在本地 Repository 中安装 jar  </li>
<li>mvn -Dmaven.test.skip=true //忽略测试文档编译  </li>
<li>mvn clean //清除目标目录中的生成结果  </li>
<li>mvn clean compile //将.java类编译为.class文件  </li>
<li>mvn clean package //进行打包  </li>
<li>mvn clean test //执行单元测试  </li>
<li>mvn clean deploy //部署到版本仓库  </li>
<li>mvn clean install</li>
<li>//使其他项目使用这个jar,会安装到maven本地仓库中  </li>
<li>mvn archetype:generate //创建项目架构  </li>
<li>mvn dependency:list //查看已解析依赖  </li>
<li>mvn dependency:tree //看到依赖树  </li>
<li>mvn dependency:analyze //查看依赖的工具  </li>
<li>mvn help:system //从中央仓库下载文件至本地仓库  </li>
<li>mvn help:active-profiles //查看当前激活的profiles  </li>
<li>mvn help:all-profiles //查看所有profiles  </li>
<li>mvn help:effective -pom //查看完整的pom信息  </li>
</ul>
<h3 id="修改默认jdk库"><a href="#修改默认jdk库" class="headerlink" title="修改默认jdk库"></a>修改默认jdk库</h3><p>修改maven的setting.xml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;profile&gt;</div><div class="line">      &lt;id&gt;jdk-1.8&lt;/id&gt;</div><div class="line"></div><div class="line">      &lt;activation&gt;</div><div class="line">          &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</div><div class="line">        &lt;jdk&gt;1.8&lt;/jdk&gt;</div><div class="line">      &lt;/activation&gt;</div><div class="line"></div><div class="line">      &lt;repositories&gt;</div><div class="line">          &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</div><div class="line">        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</div><div class="line">        &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</div><div class="line">      &lt;/repositories&gt;</div><div class="line">    &lt;/profile&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Maven简介&quot;&gt;&lt;a href=&quot;#Maven简介&quot; class=&quot;headerlink&quot; title=&quot;Maven简介&quot;&gt;&lt;/a&gt;Maven简介&lt;/h3&gt;&lt;p&gt;Apache Maven 是一种用作软件项目管理和理解工具。它基于项目对象模型（POM）的概念，可以
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java|POI的简单用</title>
    <link href="http://yoursite.com/2018/01/23/Java-POI%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/23/Java-POI的简单用/</id>
    <published>2018-01-22T23:37:27.000Z</published>
    <updated>2018-01-22T17:06:58.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Apache-POI"><a href="#什么是Apache-POI" class="headerlink" title="什么是Apache POI"></a>什么是Apache POI</h3><p>Apache POI是一种流行的API，允许程序员使用Java程序创建，修改和显示MS Office文件。它是由Apache Software Foundation开发和分发的开源库，用于使用Java程序设计或修改Microsoft Office文件。它包含将用户输入数据或文件解码为MS Office文档的类和方法。</p>
<h3 id="Apache-POI的组件"><a href="#Apache-POI的组件" class="headerlink" title="Apache POI的组件"></a>Apache POI的组件</h3><p>Apache POI包含用于处理MS Office的所有OLE2复合文档的类和方法。此API的组件列表如下。</p>
<ul>
<li><p>POIFS（Poor Obfuscation Implementation File System） ：该组件是所有其他POI元素的基本要素。它用于显式读取不同的文件。</p>
</li>
<li><p>HSSF（Horrible Spreadsheet Format） ：用于读取和写入MS-Excel文件的xls格式。</p>
</li>
<li><p>XSSF（XML Spreadsheet Format） ：用于MS-Excel的xlsx文件格式。</p>
</li>
<li><p>HPSF（Horrible Property Set Format） ：用于提取MS-Office文件的属性集。</p>
</li>
<li><p>HWPF（Horrible Word Processor Format） ：用于读取和写入MS-Word的文档扩展文件。</p>
</li>
<li><p>XWPF（XML Word Processor Format） ：用于读取和写入MS-Word的docx扩展文件。</p>
</li>
<li><p>HSLF（Horrible Slide Layout Format） ：用于阅读，创建和编辑PowerPoint演示文稿。</p>
</li>
<li><p>HDGF（Horrible DiaGram Format） ：它包含MS-Visio二进制文件的类和方法。</p>
</li>
<li><p>HPBF（Horrible PuBlisher Format） ：用于读取和写入MS-Publisher文件。</p>
</li>
</ul>
<h3 id="先用了再说"><a href="#先用了再说" class="headerlink" title="先用了再说"></a>先用了再说</h3><h4 id="创建工作簿（“工作簿”是指Microsoft-Excel文件）"><a href="#创建工作簿（“工作簿”是指Microsoft-Excel文件）" class="headerlink" title="创建工作簿（“工作簿”是指Microsoft Excel文件）"></a>创建工作簿（“工作簿”是指Microsoft Excel文件）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import org.apache.poi.xssf.usermodel.*;</div><div class="line">public class CreateWorkBook </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      //Create Blank workbook</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      //Create file system using specific name</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;createworkbook.xlsx&quot;));</div><div class="line">      //write operation workbook using file out object </div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;</div><div class="line">      createworkbook.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打开现有工作簿"><a href="#打开现有工作簿" class="headerlink" title="打开现有工作簿"></a>打开现有工作簿</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import org.apache.poi.xssf.usermodel.*;</div><div class="line">public class OpenWorkBook</div><div class="line">&#123;</div><div class="line">   public static void main(String args[])throws Exception</div><div class="line">   &#123; </div><div class="line">      File file = new File(&quot;openworkbook.xlsx&quot;);</div><div class="line">      FileInputStream fIP = new FileInputStream(file);</div><div class="line">      //Get the workbook instance for XLSX file </div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(fIP);</div><div class="line">      if(file.isFile() &amp;&amp; file.exists())</div><div class="line">      &#123;</div><div class="line">         System.out.println(</div><div class="line">         &quot;openworkbook.xlsx file open successfully.&quot;);</div><div class="line">      &#125;</div><div class="line">      else</div><div class="line">      &#123;</div><div class="line">         System.out.println(</div><div class="line">         &quot;Error to open openworkbook.xlsx file.&quot;);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="创建电子表格"><a href="#创建电子表格" class="headerlink" title="创建电子表格"></a>创建电子表格</h4><p>电子表格是Excel文件中的一个页面;它包含具有特定名称的行和列。电子表格具有网格布局。行和列用特定名称标识。列用字母和数字的行标识。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Set;</div><div class="line">import java.util.TreeMap;</div><div class="line">import org.apache.poi.ss.usermodel.Cell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class Writesheet </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args) throws Exception </div><div class="line">   &#123;</div><div class="line">      //Create blank workbook</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      //Create a blank sheet</div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet( </div><div class="line">      &quot; Employee Info &quot;);</div><div class="line">      //Create row object</div><div class="line">      XSSFRow row;</div><div class="line">      //This data needs to be written (Object[])</div><div class="line">      Map &lt; String, Object[] &gt; empinfo =  new TreeMap &lt; String, Object[] &gt;();</div><div class="line">      empinfo.put( &quot;1&quot;, new Object[] &#123; &quot;EMP ID&quot;, &quot;EMP NAME&quot;, &quot;DESIGNATION&quot; &#125;);</div><div class="line">      empinfo.put( &quot;2&quot;, new Object[] &#123; &quot;tp01&quot;, &quot;Gopal&quot;, &quot;Technical Manager&quot; &#125;);</div><div class="line">      empinfo.put( &quot;3&quot;, new Object[] &#123; &quot;tp02&quot;, &quot;Manisha&quot;, &quot;Proof Reader&quot; &#125;);</div><div class="line">      empinfo.put( &quot;4&quot;, new Object[] &#123; &quot;tp03&quot;, &quot;Masthan&quot;, &quot;Technical Writer&quot; &#125;);</div><div class="line">      empinfo.put( &quot;5&quot;, new Object[] &#123; &quot;tp04&quot;, &quot;Satish&quot;, &quot;Technical Writer&quot; &#125;);</div><div class="line">      empinfo.put( &quot;6&quot;, new Object[] &#123; &quot;tp05&quot;, &quot;Krishna&quot;, &quot;Technical Writer&quot; &#125;);</div><div class="line">      //Iterate over data and write to sheet</div><div class="line">      Set &lt; String &gt; keyid = empinfo.keySet();</div><div class="line">      int rowid = 0;</div><div class="line">      for (String key : keyid)</div><div class="line">      &#123;</div><div class="line">         row = spreadsheet.createRow(rowid++);</div><div class="line">         Object [] objectArr = empinfo.get(key);</div><div class="line">         int cellid = 0;</div><div class="line">         for (Object obj : objectArr)</div><div class="line">         &#123;</div><div class="line">            Cell cell = row.createCell(cellid++);</div><div class="line">            cell.setCellValue((String)obj);</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      //Write the workbook in file system</div><div class="line">      FileOutputStream out = new FileOutputStream( new File(&quot;Writesheet.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println( &quot;Writesheet.xlsx written successfully&quot; );</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="从电子表格阅读"><a href="#从电子表格阅读" class="headerlink" title="从电子表格阅读"></a>从电子表格阅读</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.util.Iterator;</div><div class="line">import org.apache.poi.ss.usermodel.Cell;</div><div class="line">import org.apache.poi.ss.usermodel.Row;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class Readsheet </div><div class="line">&#123;</div><div class="line">   static XSSFRow row;</div><div class="line">   public static void main(String[] args) throws Exception </div><div class="line">   &#123;</div><div class="line">      FileInputStream fis = new FileInputStream(</div><div class="line">      new File(&quot;WriteSheet.xlsx&quot;));</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(fis);</div><div class="line">      XSSFSheet spreadsheet = workbook.getSheetAt(0);</div><div class="line">      Iterator &lt; Row &gt; rowIterator = spreadsheet.iterator();</div><div class="line">      while (rowIterator.hasNext()) </div><div class="line">      &#123;</div><div class="line">         row = (XSSFRow) rowIterator.next();</div><div class="line">         Iterator &lt; Cell &gt; cellIterator = row.cellIterator();</div><div class="line">         while ( cellIterator.hasNext()) </div><div class="line">         &#123;</div><div class="line">            Cell cell = cellIterator.next();</div><div class="line">            switch (cell.getCellType()) </div><div class="line">            &#123;</div><div class="line">               case Cell.CELL_TYPE_NUMERIC:</div><div class="line">               System.out.print( </div><div class="line">               cell.getNumericCellValue() + &quot; \t\t &quot; );</div><div class="line">               break;</div><div class="line">               case Cell.CELL_TYPE_STRING:</div><div class="line">               System.out.print(</div><div class="line">               cell.getStringCellValue() + &quot; \t\t &quot; );</div><div class="line">               break;</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">         System.out.println();</div><div class="line">      &#125;</div><div class="line">      fis.close();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="操作单元格"><a href="#操作单元格" class="headerlink" title="操作单元格"></a>操作单元格</h4><p>您输入电子表格的任何数据始终存储在单元格中。我们使用行和列的标签来标识单元格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.util.Date;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class TypesofCells </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;cell types&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow((short) 2);</div><div class="line">      row.createCell(0).setCellValue(&quot;Type of Cell&quot;);</div><div class="line">      row.createCell(1).setCellValue(&quot;cell value&quot;);</div><div class="line">      row = spreadsheet.createRow((short) 3);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type BLANK&quot;);</div><div class="line">      row.createCell(1);</div><div class="line">      row = spreadsheet.createRow((short) 4);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type BOOLEAN&quot;);</div><div class="line">      row.createCell(1).setCellValue(true);</div><div class="line">      row = spreadsheet.createRow((short) 5);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type ERROR&quot;);</div><div class="line">      row.createCell(1).setCellValue(XSSFCell.CELL_TYPE_ERROR );</div><div class="line">      row = spreadsheet.createRow((short) 6);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type date&quot;);</div><div class="line">      row.createCell(1).setCellValue(new Date());</div><div class="line">      row = spreadsheet.createRow((short) 7);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type numeric&quot; );</div><div class="line">      row.createCell(1).setCellValue(20 );</div><div class="line">      row = spreadsheet.createRow((short) 8);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type string&quot;);</div><div class="line">      row.createCell(1).setCellValue(&quot;A String&quot;);</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;typesofcells.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;typesofcells.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h4><p>在这里，您可以学习如何进行单元格格式化，并应用不同的样式，例如合并相邻单元格，添加边框，设置单元格对齐和填充颜色。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.hssf.util.HSSFColor;</div><div class="line">import org.apache.poi.ss.usermodel.IndexedColors;</div><div class="line">import org.apache.poi.ss.util.CellRangeAddress;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class CellStyle </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;cellstyle&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow((short) 1);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      XSSFCell cell = (XSSFCell) row.createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;test of merging&quot;);</div><div class="line">      //MEARGING CELLS </div><div class="line">      //this statement for merging cells</div><div class="line">      spreadsheet.addMergedRegion(new CellRangeAddress(</div><div class="line">      1, //first row (0-based)</div><div class="line">      1, //last row (0-based)</div><div class="line">      1, //first column (0-based)</div><div class="line">      4 //last column (0-based)</div><div class="line">      ));</div><div class="line">      //CELL Alignment</div><div class="line">      row = spreadsheet.createRow(5); </div><div class="line">      cell = (XSSFCell) row.createCell(0);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      // Top Left alignment </div><div class="line">      XSSFCellStyle style1 = workbook.createCellStyle();</div><div class="line">      spreadsheet.setColumnWidth(0, 8000);</div><div class="line">      style1.setAlignment(XSSFCellStyle.ALIGN_LEFT);</div><div class="line">      style1.setVerticalAlignment(XSSFCellStyle.VERTICAL_TOP);</div><div class="line">      cell.setCellValue(&quot;Top Left&quot;);</div><div class="line">      cell.setCellStyle(style1);</div><div class="line">      row = spreadsheet.createRow(6); </div><div class="line">      cell = (XSSFCell) row.createCell(1);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      // Center Align Cell Contents </div><div class="line">      XSSFCellStyle style2 = workbook.createCellStyle();</div><div class="line">      style2.setAlignment(XSSFCellStyle.ALIGN_CENTER);</div><div class="line">      style2.setVerticalAlignment( </div><div class="line">      XSSFCellStyle.VERTICAL_CENTER);</div><div class="line">      cell.setCellValue(&quot;Center Aligned&quot;); </div><div class="line">      cell.setCellStyle(style2);</div><div class="line">      row = spreadsheet.createRow(7); </div><div class="line">      cell = (XSSFCell) row.createCell(2);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      // Bottom Right alignment </div><div class="line">      XSSFCellStyle style3 = workbook.createCellStyle();</div><div class="line">      style3.setAlignment(XSSFCellStyle.ALIGN_RIGHT);</div><div class="line">      style3.setVerticalAlignment( </div><div class="line">      XSSFCellStyle.VERTICAL_BOTTOM);</div><div class="line">      cell.setCellValue(&quot;Bottom Right&quot;);</div><div class="line">      cell.setCellStyle(style3);</div><div class="line">      row = spreadsheet.createRow(8);</div><div class="line">      cell = (XSSFCell) row.createCell(3);</div><div class="line">      // Justified Alignment </div><div class="line">      XSSFCellStyle style4 = workbook.createCellStyle();</div><div class="line">      style4.setAlignment(XSSFCellStyle.ALIGN_JUSTIFY);</div><div class="line">      style4.setVerticalAlignment(</div><div class="line">      XSSFCellStyle.VERTICAL_JUSTIFY);</div><div class="line">      cell.setCellValue(&quot;Contents are Justified in Alignment&quot;); </div><div class="line">      cell.setCellStyle(style4);</div><div class="line">      //CELL BORDER</div><div class="line">      row = spreadsheet.createRow((short) 10);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      cell = (XSSFCell) row.createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;BORDER&quot;);</div><div class="line">      XSSFCellStyle style5 = workbook.createCellStyle();</div><div class="line">      style5.setBorderBottom(XSSFCellStyle.BORDER_THICK);</div><div class="line">      style5.setBottomBorderColor(</div><div class="line">      IndexedColors.BLUE.getIndex());</div><div class="line">      style5.setBorderLeft(XSSFCellStyle.BORDER_DOUBLE);</div><div class="line">      style5.setLeftBorderColor( </div><div class="line">      IndexedColors.GREEN.getIndex());</div><div class="line">      style5.setBorderRight(XSSFCellStyle.BORDER_HAIR);</div><div class="line">      style5.setRightBorderColor( </div><div class="line">      IndexedColors.RED.getIndex());</div><div class="line">      style5.setBorderTop(XSSFCellStyle.BIG_SPOTS);</div><div class="line">      style5.setTopBorderColor( </div><div class="line">      IndexedColors.CORAL.getIndex());</div><div class="line">      cell.setCellStyle(style5);</div><div class="line">      //Fill Colors</div><div class="line">      //background color</div><div class="line">      row = spreadsheet.createRow((short) 10 );</div><div class="line">      cell = (XSSFCell) row.createCell((short) 1);</div><div class="line">      XSSFCellStyle style6 = workbook.createCellStyle();</div><div class="line">      style6.setFillBackgroundColor(</div><div class="line">      HSSFColor.LEMON_CHIFFON.index );</div><div class="line">      style6.setFillPattern(XSSFCellStyle.LESS_DOTS);</div><div class="line">      style6.setAlignment(XSSFCellStyle.ALIGN_FILL);</div><div class="line">      spreadsheet.setColumnWidth(1,8000);</div><div class="line">      cell.setCellValue(&quot;FILL BACKGROUNG/FILL PATTERN&quot;);</div><div class="line">      cell.setCellStyle(style6);</div><div class="line">      //Foreground color</div><div class="line">      row = spreadsheet.createRow((short) 12);</div><div class="line">      cell = (XSSFCell) row.createCell((short) 1);</div><div class="line">      XSSFCellStyle style7=workbook.createCellStyle();</div><div class="line">      style7.setFillForegroundColor(HSSFColor.BLUE.index);</div><div class="line">      style7.setFillPattern( XSSFCellStyle.LESS_DOTS);</div><div class="line">      style7.setAlignment(XSSFCellStyle.ALIGN_FILL);</div><div class="line">      cell.setCellValue(&quot;FILL FOREGROUND/FILL PATTERN&quot;);</div><div class="line">      cell.setCellStyle(style7);</div><div class="line">      FileOutputStream out = new FileOutputStream(new File(&quot;cellstyle.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;cellstyle.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="操作字体"><a href="#操作字体" class="headerlink" title="操作字体"></a>操作字体</h4><p>每个系统都捆绑了大量的字体集合，如Arial，Impact，Times New Roman等。如果需要，还可以使用新的字体更新该集合。类似地，可以显示字体的各种风格，例如粗体，斜体，下划线，敲击等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.hssf.util.HSSFColor;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFFont;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class FontStyle </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;Fontstyle&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow(2);</div><div class="line">      //Create a new font and alter it.</div><div class="line">      XSSFFont font = workbook.createFont();</div><div class="line">      font.setFontHeightInPoints((short) 30);</div><div class="line">      font.setFontName(&quot;IMPACT&quot;);</div><div class="line">      font.setItalic(true);</div><div class="line">      font.setColor(HSSFColor.BRIGHT_GREEN.index);</div><div class="line">      //Set font into style</div><div class="line">      XSSFCellStyle style = workbook.createCellStyle();</div><div class="line">      style.setFont(font);</div><div class="line">      // Create a cell with a value and set style to it.</div><div class="line">      XSSFCell cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;Font Style&quot;);</div><div class="line">      cell.setCellStyle(style);</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;fontstyle.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(</div><div class="line">      &quot;fontstyle.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="操作文字方向"><a href="#操作文字方向" class="headerlink" title="操作文字方向"></a>操作文字方向</h4><p>在这里，您可以学习如何设置不同角度的文字方向。通常，细胞内容从左到右以00角水平显示;但是，如果需要，您可以使用以下代码旋转文本方向。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class TextDirection </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(</div><div class="line">      &quot;Text direction&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow(2);</div><div class="line">      XSSFCellStyle myStyle = workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 0);</div><div class="line">      XSSFCell cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;0D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //30 degrees</div><div class="line">      myStyle=workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 30);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;30D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //90 degrees</div><div class="line">      myStyle=workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 90);</div><div class="line">      cell = row.createCell(5);</div><div class="line">      cell.setCellValue(&quot;90D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //120 degrees</div><div class="line">      myStyle=workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 120);</div><div class="line">      cell = row.createCell(7);</div><div class="line">      cell.setCellValue(&quot;120D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //270 degrees</div><div class="line">      myStyle = workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 270);</div><div class="line">      cell = row.createCell(9);</div><div class="line">      cell.setCellValue(&quot;270D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //360 degrees</div><div class="line">      myStyle=workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 360);</div><div class="line">      cell = row.createCell(12);</div><div class="line">      cell.setCellValue(&quot;360D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;textdirection.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println( </div><div class="line">      &quot;textdirection.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="操作公式"><a href="#操作公式" class="headerlink" title="操作公式"></a>操作公式</h4><p>本章将介绍使用Java编程在单元格上应用不同公式的过程。 Excel应用程序的基本目的是通过在其上应用公式来维护数值数据。</p>
<p>在公式中，我们传递Excel表中值的动态值或位置。执行此公式时，您将获得所需的结果。下表列出了Excel中经常使用的几个基本公式。</p>
<table>
<thead>
<tr>
<th>运算</th>
<th>句法</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>统计多个数字|    = SUM（Loc1：Locn）或= SUM（n1，n2，）|<br>计数    |= COUNT（Loc1：Locn）或= COUNT（n1，n2，）|<br>两个数字的力量    |= POWER（Loc1，Loc2）或= POWER（数字，功率）|<br>最多的多个数字    |= MAX（Loc1：Locn）或= MAX（n1，n2，）|<br>产品    |= PRODUCT（Loc1：Locn）或= PRODUCT（n1，n2，）|<br>阶乘    |= FACT（Locn）或= FACT（number）|<br>绝对数    |= ABS（位置）或= ABS（数字）|<br>当天日期    |= TODAY（）|<br>转换为小写    |= LOWER（Locn）或= LOWER（文字）|<br>平方根    |= SQRT（locn）或= SQRT（number）|</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class Formula </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;formula&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow(1);</div><div class="line">      XSSFCell cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;A =&quot; );</div><div class="line">      cell = row.createCell(2);</div><div class="line">      cell.setCellValue(2);</div><div class="line">      row = spreadsheet.createRow(2);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;B =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      cell.setCellValue(4);</div><div class="line">      row = spreadsheet.createRow(3);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;Total =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      // Create SUM formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;SUM(C2:C3)&quot; );</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;SUM(C2:C3)&quot;);</div><div class="line">      row = spreadsheet.createRow(4);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;POWER =&quot;);</div><div class="line">      cell=row.createCell(2);</div><div class="line">      // Create POWER formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;POWER(C2,C3)&quot;);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;POWER(C2,C3)&quot;);</div><div class="line">      row = spreadsheet.createRow(5);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;MAX =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      // Create MAX formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;MAX(C2,C3)&quot;);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;MAX(C2,C3)&quot;);</div><div class="line">      row = spreadsheet.createRow(6);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;FACT =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      // Create FACT formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;FACT(C3)&quot;);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;FACT(C3)&quot;);</div><div class="line">      row = spreadsheet.createRow(7);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;SQRT =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      // Create SQRT formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;SQRT(C5)&quot;);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;SQRT(C5)&quot;);</div><div class="line">      workbook.getCreationHelper()</div><div class="line">      .createFormulaEvaluator()</div><div class="line">      .evaluateAll();</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;formula.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;fromula.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><p>本章介绍如何在单元格中添加超链接到内容。通常，超链接用于访问任何Web URL，电子邮件或外部文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.common.usermodel.Hyperlink;</div><div class="line">import org.apache.poi.hssf.util.HSSFColor;</div><div class="line">import org.apache.poi.ss.usermodel.CreationHelper;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFFont;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFHyperlink;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class HyperlinkEX </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args) throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook</div><div class="line">      .createSheet(&quot;Hyperlinks&quot;);</div><div class="line">      XSSFCell cell;</div><div class="line">      CreationHelper createHelper = workbook</div><div class="line">      .getCreationHelper();</div><div class="line">      XSSFCellStyle hlinkstyle = workbook.createCellStyle();</div><div class="line">      XSSFFont hlinkfont = workbook.createFont();</div><div class="line">      hlinkfont.setUnderline(XSSFFont.U_SINGLE);</div><div class="line">      hlinkfont.setColor(HSSFColor.BLUE.index);</div><div class="line">      hlinkstyle.setFont(hlinkfont);</div><div class="line">      //URL Link</div><div class="line">      cell = spreadsheet.createRow(1)</div><div class="line">      .createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;URL Link&quot;);</div><div class="line">      XSSFHyperlink link = (XSSFHyperlink)createHelper</div><div class="line">      .createHyperlink(Hyperlink.LINK_URL);</div><div class="line">      link.setAddress(&quot;http://www.tutorialspoint.com/&quot; );</div><div class="line">      cell.setHyperlink((XSSFHyperlink) link);</div><div class="line">      cell.setCellStyle(hlinkstyle);</div><div class="line">      //Hyperlink to a file in the current directory</div><div class="line">      cell = spreadsheet.createRow(2)</div><div class="line">      .createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;File Link&quot;);</div><div class="line">      link = (XSSFHyperlink)createHelper</div><div class="line">      .createHyperlink(Hyperlink.LINK_FILE);</div><div class="line">      link.setAddress(&quot;cellstyle.xlsx&quot;);</div><div class="line">      cell.setHyperlink(link);</div><div class="line">      cell.setCellStyle(hlinkstyle);</div><div class="line">      //e-mail link</div><div class="line">      cell = spreadsheet.createRow(3)</div><div class="line">      .createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;Email Link&quot;);</div><div class="line">      link = (XSSFHyperlink)createHelper</div><div class="line">      .createHyperlink(Hyperlink.LINK_EMAIL);</div><div class="line">      link.setAddress( </div><div class="line">      &quot;mailto:contact@tutorialspoint.com?&quot;</div><div class="line">      +&quot;subject=Hyperlink&quot;);</div><div class="line">      cell.setHyperlink(link);</div><div class="line">      cell.setCellStyle(hlinkstyle);</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;hyperlink.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;hyperlink.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="POI-打印区域"><a href="#POI-打印区域" class="headerlink" title="POI 打印区域"></a>POI 打印区域</h4><p>本章介绍如何在电子表格中设置打印区域。通常的打印区域是Excel电子表格的左上角和右下角。打印区域可根据您的要求定制。这意味着您可以从整个电子表格打印特定范围的单元格，自定义纸张尺寸，打开网格线打开内容等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFPrintSetup;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class PrintArea </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;Print Area&quot;);</div><div class="line">      //set print area with indexes</div><div class="line">      workbook.setPrintArea(</div><div class="line">          0, //sheet index</div><div class="line">          0, //start column</div><div class="line">          5, //end column</div><div class="line">          0, //start row</div><div class="line">          5 //end row</div><div class="line">      );</div><div class="line">      //set paper size</div><div class="line">      spreadsheet.getPrintSetup().setPaperSize(</div><div class="line">      XSSFPrintSetup.A4_PAPERSIZE);</div><div class="line">      //set display grid lines or not</div><div class="line">      spreadsheet.setDisplayGridlines(true);</div><div class="line">     //set print grid lines or not</div><div class="line">     spreadsheet.setPrintGridlines(true);</div><div class="line">     FileOutputStream out = new FileOutputStream(</div><div class="line">     new File(&quot;printarea.xlsx&quot;));</div><div class="line">     workbook.write(out);</div><div class="line">     out.close();</div><div class="line">     System.out.println(&quot;printarea.xlsx written successfully&quot;); </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>借助JDBC，您可以从数据库检索数据，并使用POI库将该数据插入到电子表格中。让我们考虑MySQL数据库的SQL操作。</p>
<h5 id="从数据库写入Excel"><a href="#从数据库写入Excel" class="headerlink" title="从数据库写入Excel"></a>从数据库写入Excel</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.Statement;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class ExcelDatabase </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args) throws Exception </div><div class="line">   &#123;</div><div class="line">      Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</div><div class="line">      Connection connect = DriverManager.getConnection( </div><div class="line">      &quot;jdbc:mysql://localhost:3306/test&quot; , </div><div class="line">      &quot;root&quot; , </div><div class="line">      &quot;root&quot;</div><div class="line">      );</div><div class="line">      Statement statement = connect.createStatement();</div><div class="line">      ResultSet resultSet = statement</div><div class="line">      .executeQuery(&quot;select * from emp_tbl&quot;);</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook</div><div class="line">      .createSheet(&quot;employe db&quot;);</div><div class="line">      XSSFRow row=spreadsheet.createRow(1);</div><div class="line">      XSSFCell cell;</div><div class="line">      cell=row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;EMP ID&quot;);</div><div class="line">      cell=row.createCell(2);</div><div class="line">      cell.setCellValue(&quot;EMP NAME&quot;);</div><div class="line">      cell=row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;DEG&quot;);</div><div class="line">      cell=row.createCell(4);</div><div class="line">      cell.setCellValue(&quot;SALARY&quot;);</div><div class="line">      cell=row.createCell(5);</div><div class="line">      cell.setCellValue(&quot;DEPT&quot;);</div><div class="line">      int i=2;</div><div class="line">      while(resultSet.next())</div><div class="line">      &#123;</div><div class="line">         row=spreadsheet.createRow(i);</div><div class="line">         cell=row.createCell(1);</div><div class="line">         cell.setCellValue(resultSet.getInt(&quot;eid&quot;));</div><div class="line">         cell=row.createCell(2);</div><div class="line">         cell.setCellValue(resultSet.getString(&quot;ename&quot;));</div><div class="line">         cell=row.createCell(3);</div><div class="line">         cell.setCellValue(resultSet.getString(&quot;deg&quot;));</div><div class="line">         cell=row.createCell(4);</div><div class="line">         cell.setCellValue(resultSet.getString(&quot;salary&quot;));</div><div class="line">         cell=row.createCell(5);</div><div class="line">         cell.setCellValue(resultSet.getString(&quot;dept&quot;));</div><div class="line">         i++;</div><div class="line">      &#125;</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;exceldatabase.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(</div><div class="line">      &quot;exceldatabase.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考<a href="https://www.54yhr.com/apache_poi/index.htm" target="_blank" rel="external">https://www.54yhr.com/apache_poi/index.htm</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Apache-POI&quot;&gt;&lt;a href=&quot;#什么是Apache-POI&quot; class=&quot;headerlink&quot; title=&quot;什么是Apache POI&quot;&gt;&lt;/a&gt;什么是Apache POI&lt;/h3&gt;&lt;p&gt;Apache POI是一种流行的API，允许程序员使
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据结构|图</title>
    <link href="http://yoursite.com/2018/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/01/18/数据结构-图/</id>
    <published>2018-01-18T14:43:37.000Z</published>
    <updated>2018-01-18T09:30:35.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>图这种数据结构，是对现实中人们常说的地图的一种抽象，在数据结构中，图有点和边构成，每两个点之间如果有关系，就用一条边将这两个点连起来，这样就形成了类似于地图的图。图是个好东西啊，可以用于对现实世界中的很多问题进行抽象建模:</p>
<ul>
<li>为计算机之间的互联与通信网络之间的互联建立模型</li>
<li>把一张地图表示为一组位置点，以及位置点之间的关系，求两个点之间的最短路径（这不就是导航吗）</li>
<li>为交通网络的流量状态建模</li>
<li>为一个复杂的活动找到一个可以接受的各个子任务完成的先后顺序，例如大型建筑工程的建设任务分解</li>
<li>为家族、商业或军事组织和自然科学分类中的各种相互关系建模 </li>
</ul>
<p>其实，讲到底，在多对多的关系中，几乎都能用图来表示其关系，最形象的就是人的关系网。我们前面学的线性表是一对一的关系，树是一对多的关系，现在讲的图是多对多的关系。</p>
<h4 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h4><p>我们先来解决第一个问题，怎么表示在计算机中存储图，也就是要怎么表示图。容易想到的是用二位数组，a[i][j],i与j表示两个点，如果a[i][j]为 1 就表示 i , j 之间有关系，否则就没有关系，书上称之为邻接矩阵表示法。还有一种是邻接表表示法，即数组与链表相结合的存储方法。具体是这样的：</p>
<ul>
<li>图中顶点用一个一维数组存储，另外，对于顶点数组中，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。</li>
<li>图中每个顶点vi的所有邻接点构成一个线性表，由于邻接点的个数不定，所以用单链表存储，无向图称为顶点vi的边表，有向图称为顶点vi作为弧尾的出边表。</li>
</ul>
<p><img src="/images/图1.jpg" alt="图的表示" title="图1"></p>
<p><img src="/images/图2.jpg" alt="图的表示" title="图2"></p>
<p>值得一提的是，这两种表示法的各有各的优缺点，一般来说，如果图的边较少的情况下，我们一般选用邻接表，这样开销较小，因为如果用邻接矩阵的话，整个二维数组里就有很多空间没有用到，浪费空间；如果是边较多的时候，也就是我们所说的稠密图，选用邻接矩阵是个好的选择。</p>
<h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><p>确定从一个指定的顶点可以到达其他哪些顶点。这是经常对图执行的操作。我们可能想通过地图了解到从一个城镇到另一个城镇有哪些路，或者从一个机场到其他机场有哪些航班。</p>
<p>图的遍历方法一般有两种：</p>
<ul>
<li>深度遍历</li>
<li>广度遍历</li>
</ul>
<h5 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h5><p>深度优先搜索DFS遍历类似于树的前序遍历。其基本思路是：</p>
<ul>
<li><p>a) 假设初始状态是图中所有顶点都未曾访问过，则可从图G中任意一顶点v为初始出发点，首先访问出发点v，并将其标记为已访问过。</p>
</li>
<li><p>b)然后依次从v出发搜索v的每个邻接点w，若w未曾访问过，则以w作为新的出发点出发，继续进行深度优先遍历，直到图中所有和v有路径相通的顶点都被访问到。</p>
</li>
<li><p>c) 若此时图中仍有顶点未被访问，则另选一个未曾访问的顶点作为起点，重复上述步骤，直到图中所有顶点都被访问到为止。</p>
</li>
</ul>
<p>简单的来说，深度优先搜索包括从一条路径的起始点开始追溯，直到到达最后一个顶点，然后回溯，继续追溯下一条路径，直到到达最后的顶点，如此往复，直到没有路径为止。不好听地说，就是先一条路走到黑，只到无路可走，然后退回上一个顶点，在一直走，重复此操作。</p>
<p><img src="/images/图-深度遍历.jpg" alt="图的深度优先遍历" title="图-深度遍历"></p>
<p>注：红色数字代表遍历的先后顺序，所以图(e)无向图的深度优先遍历的顶点访问序列为：V0，V1，V2，V5，V4，V6，V3，V7，V8</p>
<p>深度优先搜索的算法比较简单： 访问一个没有访问过的顶点，将它标记为已访问，再递归地去访问在起始点的邻接表中其他没有访问过的顶点。</p>
<h4 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h4><p>广度优先搜索遍历BFS类似于树的按层次遍历。其基本思路是：</p>
<ul>
<li>a) 首先访问出发点Vi</li>
<li>b) 接着依次访问Vi的所有未被访问过的邻接点Vi1，Vi2，Vi3，…，Vit并均标记为已访问过。</li>
<li>c) 然后再按照Vi1，Vi2，… ，Vit的次序，访问每一个顶点的所有未曾访问过的顶点并均标记为已访问过，依此类推，直到图中所有和初始出发点Vi有路径相通的顶点都被访问过为止。</li>
</ul>
<p><img src="/images/图-广度遍历.jpg" alt="图的广度优先遍历" title="图-广度遍历"></p>
<p>因此，图(f)采用广义优先搜索遍历以V0为出发点的顶点序列为：V0，V1，V3，V4，V2，V6，V8，V5，V7</p>
<p>简单的来说，广度优先搜索从一个顶点开始，尝试访问尽可能靠近它的顶点。本质上这种搜索在图上是逐层移动的，首先检查最靠近第一个顶点的层，再逐渐向下移动到离起始顶点最远的层。就想警察进山抓贼一样，层层逼近，逐渐缩小包围圈。</p>
<p>要实现广度优先搜索，我们自然会想到用队列来存储我们找到过得顶点，当遍历完一个当前顶点的所关联点后，就从队列中弹出一个新的顶点，访问其还没被访问的关联顶点，直到队列为空。</p>
<h4 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h4><p>在图论中，拓扑排序（Topological Sorting）是一个有向无环图（DAG, Directed Acyclic Graph）的所有顶点的线性序列。<br>该序列必须满足下面两个条件：</p>
<ul>
<li>每个顶点出现且只出现一次</li>
<li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面</li>
</ul>
<p><img src="/images/拓扑排序1.png" alt="enter description here" title="拓扑排序1"></p>
<p>它是一个 DAG 图，那么如何写出它的拓扑排序呢？这里说一种比较常用的方法：</p>
<ul>
<li>从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出。</li>
<li>从图中删除该顶点和所有以它为起点的有向边。</li>
<li>重复 1 和 2 直到当前的 DAG 图为空或当前图中不存在无前驱的顶点为止。后一种情况说明有向图中必然存在环。</li>
</ul>
<p><img src="/images/拓扑排序2.png" alt="拓扑排序" title="拓扑排序2"></p>
<p>于是，得到拓扑排序后的结果是 { 1, 2, 4, 3, 5 }。</p>
<p>值得一提的是，一个有向无环图是可以有一个或多个拓扑排序序列的。</p>
<h6 id="拓扑排序的应用"><a href="#拓扑排序的应用" class="headerlink" title="拓扑排序的应用"></a>拓扑排序的应用</h6><p>拓扑排序通常用来“排序”具有依赖关系的任务。比如学校对我们的课程安排，一些课程是需要学生先去修特定的课程后才能开课的，所以可以用一个有向图来表示这些课程的关系，然后得到该图的拓扑排序排序，就能得到我们的课程先后关系，进而安排大一修什么课，大二修什么课…还有就是一些生产工艺，有些工序之间也是有关系的，也能用图将其建模，得出它的拓扑排序序列，更好地安排生产顺序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h3&gt;&lt;p&gt;图这种数据结构，是对现实中人们常说的地图的一种抽象，在数据结构中，图有点和边构成，每两个点之间如果有关系，就用一条边将这两个点连起来，这样就形成了类
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构|排序算法浅谈</title>
    <link href="http://yoursite.com/2018/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B5%85%E8%B0%88/"/>
    <id>http://yoursite.com/2018/01/18/数据结构-排序算法浅谈/</id>
    <published>2018-01-17T23:13:38.000Z</published>
    <updated>2018-01-18T06:47:35.661Z</updated>
    
    <content type="html"><![CDATA[<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p>经过大一到大二的洗礼，自己对自己专业的认识也越来越深，从最开始认为自己是学软件工程的，然后认为自己是学计算机的，再到现在认为自己是搞互联网的，可能还会有更深的认识。学习，不仅是要学习专业知识，更要知道行业的发展趋势和发展方向，两者缺一不可。这个行业说到底还是对信息进行处理，那么排序就是最重要的处理方式之一。</p>
<p>排序算法有很多种，现在我们主要谈谈常见的几种：</p>
<ul>
<li>插入排序</li>
<li>冒泡排序</li>
<li>选择排序</li>
<li>shell排序</li>
<li>归并排序</li>
<li>快速排序</li>
</ul>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序，就是我们打扑克是所用的伎俩，我们抽到一张牌，然后从手里的牌中寻找合适的位置插入，这个寻找的过程就是插入排序。</p>
<p><img src="/images/插入排序.gif" alt="enter description here" title="插入排序"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">	A[]  待排序列</div><div class="line">	n    元素个数</div><div class="line">*/</div><div class="line">void inssort(int A[],int n)&#123;</div><div class="line">	for(int i=1;i&lt;n;i++)&#123;</div><div class="line">		for(int j=i;j&gt;0;j--)&#123;</div><div class="line">			if(A[j]&lt;A[j-1])&#123;</div><div class="line">				int temp = A[j];</div><div class="line">				A[j] = A[j-1];</div><div class="line">				A[j-1] = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序也挺好理解，就是没每趟比较相邻的两个数，把小的数往后移，每一趟都把待排序列中最小的数往后移，重复n-1此操作就能让待排序列有序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">	A[]  待排序列</div><div class="line">	n    元素个数</div><div class="line">*/</div><div class="line">void bubSort(int A[],int n)&#123;</div><div class="line">	for(int i=1;i&lt;n;i++)&#123;</div><div class="line">		for(int j=0;j&lt;n-i;j++)&#123;</div><div class="line">			if(A[j]&lt;A[j+1])&#123;</div><div class="line">				int temp = A[j];</div><div class="line">				A[j] = A[j+1];</div><div class="line">				A[j+1] = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理如下，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<p><img src="/images/选择排序.gif" alt="enter description here" title="选择排序"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">	A[]  待排序列</div><div class="line">	n    元素个数</div><div class="line">*/</div><div class="line">void choSort(int A[],int n)&#123;</div><div class="line">	for(int i=0;i&lt;n-1;i++)&#123;</div><div class="line">		for(int j=i;j&lt;n;j++)&#123;</div><div class="line">			int index = i;</div><div class="line">			if(A[j]&lt;A[index])&#123;</div><div class="line">				index = j;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		int temp = A[i];</div><div class="line">		A[i] = A[index];</div><div class="line">		A[index] = temp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="一点干货"><a href="#一点干货" class="headerlink" title="一点干货"></a>一点干货</h4><p>上面三种排序方法的时间复杂度都是 n2;通过比较我们可以发现它们都有一个共同的瓶颈：都是只比较相邻的两个数，这是个致命的缺点，只到后来人们找到了分组比较的方法，得以让排序算法的复杂度降低了。接下来，咱们讨论更高级的排序算法。</p>
<h4 id="Shell排序"><a href="#Shell排序" class="headerlink" title="Shell排序"></a>Shell排序</h4><p>Shell排序讲到底还是插入排序，不过它先把待排序列分成了许多组，先分组用插入排序，这样做到目的是先将待排序列变成基本有序，然后在用一次完整的插入排序。我们都知道，如果序列是基本有序的，插入排序的效率还是挺高的。Shell的特点就在于：它的作法不是每次一个元素挨一个元素的比较。而是初期选用大跨步（增量较大）间隔比较，使记录跳跃式接近它的排序位置；然后增量缩小；最后增量为 1 ，这样记录移动次数大大减少，提高了排序效率。</p>
<p>假设有数组 array = [80, 93, 60, 12, 42, 30, 68, 85, 10]，首先取 d1 = 4，将数组分为 4 组，如下图中相同颜色代表一组：<br><img src="/images/shell-sort-step1.1.png" alt="enter description here" title="shell-sort-step1.1"><br>然后分别对 4 个小组进行插入排序，排序后的结果为：<br><img src="/images/shell-sort-step1.2.png" alt="enter description here" title="shell-sort-step1.2"><br>然后，取 d2 = 2，将原数组分为 2 小组，如下图：<br><img src="/images/shell-sort-step2.1.png" alt="enter description here" title="shell-sort-step2.1"><br>然后分别对 2 个小组进行插入排序，排序后的结果为：<br><img src="/images/shell-sort-step2.2.png" alt="enter description here" title="shell-sort-step2.2"><br>最后，取 d3 = 1，进行插入排序后得到最终结果：<br><img src="/images/shell-sort-step3.png" alt="enter description here" title="shell-sort-step3"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">void shell_sort(int a[], int n)&#123;</div><div class="line">    int i,j,gap;</div><div class="line">    //gap为步长，每次减为原来的一半</div><div class="line">    for(gap = n/2;gap&gt;0;gap/=2)&#123;</div><div class="line">        // 共gap个组，对每一组都执行直接插入排序</div><div class="line">        for(i = 0;i&lt;gap;i++)&#123;</div><div class="line">            for(j = i+gap;j&lt;n;j+=gap)&#123;</div><div class="line">                // 如果a[j] &lt; a[j-gap]，则寻找a[j]位置，并将后面数据的位置都后移。</div><div class="line">                if (a[j] &lt; a[j - gap]) </div><div class="line">                &#123;</div><div class="line">                    int tmp = a[j];</div><div class="line">                    int k = j - gap;</div><div class="line">                    while (k &gt;= 0 &amp;&amp; a[k] &gt; tmp)</div><div class="line">                    &#123;</div><div class="line">                        a[k + gap] = a[k];</div><div class="line">                        k -= gap;</div><div class="line">                    &#125;</div><div class="line">                    a[k + gap] = tmp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并操作(Merge)，也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。归并排序有多路归并排序、两路归并排序 , 可用于内排序，也可以用于外排序。这里仅对内排序的两路归并方法进行讨论。</p>
<p>算法思路：</p>
<ul>
<li>把 n 个记录看成 n 个长度为 l 的有序子表</li>
<li>进行两两归并使记录关键字有序，得到 n/2 个长度为 2 的有序子表</li>
<li>重复第 2 步直到所有记录归并成一个长度为 n 的有序表为止。</li>
</ul>
<p>先讲讲归并吧，就是将两个有序个数据合并成一个新的有序数组。看代码吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 将一个数组中的两个相邻有序区间合并成一个</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     a -- 包含两个有序区间的数组</div><div class="line"> *     start -- 第1个有序区间的起始地址。</div><div class="line"> *     mid   -- 第1个有序区间的结束地址。也是第2个有序区间的起始地址。</div><div class="line"> *     end   -- 第2个有序区间的结束地址。</div><div class="line"> */</div><div class="line">void merge(int* a, int start, int mid, int end)</div><div class="line">&#123;</div><div class="line">    int *tmp = new int[end-start+1];    // tmp是汇总2个有序区的临时区域</div><div class="line">    int i = start;            // 第1个有序区的索引</div><div class="line">    int j = mid + 1;        // 第2个有序区的索引</div><div class="line">    int k = 0;                // 临时区域的索引</div><div class="line"></div><div class="line">    while(i &lt;= mid &amp;&amp; j &lt;= end)</div><div class="line">    &#123;</div><div class="line">        if (a[i] &lt;= a[j])</div><div class="line">            tmp[k++] = a[i++];</div><div class="line">        else</div><div class="line">            tmp[k++] = a[j++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    while(i &lt;= mid)</div><div class="line">        tmp[k++] = a[i++];</div><div class="line"></div><div class="line">    while(j &lt;= end)</div><div class="line">        tmp[k++] = a[j++];</div><div class="line"></div><div class="line">    // 将排序后的元素，全部都整合到数组a中。</div><div class="line">    for (i = 0; i &lt; k; i++)</div><div class="line">        a[start + i] = tmp[i];</div><div class="line"></div><div class="line">    delete[] tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是我们的归并排序算法啦，刚刚讲到是用分而治之的办法，那就是要用到递归了，先看代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 归并排序(从上往下)</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     a -- 待排序的数组</div><div class="line"> *     start -- 数组的起始地址</div><div class="line"> *     end -- 数组的结束地址</div><div class="line"> */</div><div class="line"></div><div class="line">void mergeSortUp2Down(int* a, int start, int end)&#123;</div><div class="line">    </div><div class="line">    if(a==NULL || start &gt;= end)</div><div class="line">        return ;</div><div class="line"></div><div class="line">    int mid = (end + start)/2;</div><div class="line">    mergeSortUp2Down(a, start, mid); // 递归排序a[start...mid]</div><div class="line">    mergeSortUp2Down(a, mid+1, end); // 递归排序a[mid+1...end]</div><div class="line"></div><div class="line">    // a[start...mid] 和 a[mid...end]是两个有序空间，</div><div class="line">    // 将它们排序成一个有序空间a[start...end]</div><div class="line">    merge(a, start, mid, end);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/归并排序.gif" alt="归并排序动画演示" title="归并排序"></p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序与归并排序的思想是一致的，都是 采用的分而治之的办法，但这个分的方法不一样，归并算法是相邻的两个分，快速排序是选择一个基准，然后通过比较将小于基准的数放在其左边，大于基准的数放在右边，这个操作叫做分区操作，然后对基准左边和右边的数进行同样的操作。</p>
<p>利用分治法可将快速排序的分为三步：</p>
<ul>
<li>在数据集之中，选择一个元素作为”基准”（pivot）。</li>
<li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。这个操作称为分区 (partition) 操作，分区操作结束后，基准元素所处的位置就是最终排序后它的位置。</li>
<li>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li>
</ul>
<p><img src="/images/快速排序.gif" alt="快速排序" title="快速排序"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 快速排序</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     a -- 待排序的数组</div><div class="line"> *     l -- 数组的左边界(例如，从起始位置开始排序，则l=0)</div><div class="line"> *     r -- 数组的右边界(例如，排序截至到数组末尾，则r=a.length-1)</div><div class="line"> */</div><div class="line"></div><div class="line">void quickSort(int *a ,int l,int r)&#123; </div><div class="line">    if(l&lt;r)&#123;</div><div class="line">        int i,j,x;</div><div class="line">        i=l;</div><div class="line">        j=r;</div><div class="line">        x = a[i];</div><div class="line">        while(i&lt;j)&#123;</div><div class="line">            while(i&lt;j &amp;&amp; a[j]&gt;x)&#123;</div><div class="line">                j--; // 从右向左找第一个小于x的数</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if(i&lt;j)&#123;</div><div class="line">                a[i] = a[j];</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            while(i&lt;j &amp;&amp; a[i]&lt;x)&#123;</div><div class="line">                i++;   // 从左向右找第一个大于x的数</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if(i&lt;j)&#123;</div><div class="line">                a[j] = a[i];</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        a[i] = x;</div><div class="line">        quickSort(a,l,i-1);</div><div class="line">        quickSort(a,i+1,r);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h3&gt;&lt;p&gt;经过大一到大二的洗礼，自己对自己专业的认识也越来越深，从最开始认为自己是学软件工程的，然后认为自己是学计算机的，再到现在认为
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>VHDL与数字逻辑的一些坑</title>
    <link href="http://yoursite.com/2018/01/09/VHDL%E4%B8%8E%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://yoursite.com/2018/01/09/VHDL与数字逻辑的一些坑/</id>
    <published>2018-01-08T23:24:03.000Z</published>
    <updated>2018-01-08T15:45:23.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于VHDL"><a href="#关于VHDL" class="headerlink" title="关于VHDL"></a>关于VHDL</h3><p>来了大二，学习数字逻辑电路后才知道VHDL的，用来写数字逻辑的实验。刚开始接触的时候，也并不知道它是用来干什么的，经过一个学期的琢磨，才搞清楚它是用来干嘛的。简单点说，就是用来描述电路的，就像我们常说的芯片，它都有自己的功能，这些功能的实现都是内部封装好了的，只留下一些外部接口给我们，VHDL这门语言呢，就是用来描述这些芯片的内部功能的。用代码设计电路，想不到吧。更不可思议的是，IDE工具还能根据写的代码，帮我们把电路实现。</p>
<h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p>VHDL跟我们所学习的C语言这些差不多，也有if、else这些逻辑语句，但毕竟是描述电路的，还是有一些区别的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于VHDL&quot;&gt;&lt;a href=&quot;#关于VHDL&quot; class=&quot;headerlink&quot; title=&quot;关于VHDL&quot;&gt;&lt;/a&gt;关于VHDL&lt;/h3&gt;&lt;p&gt;来了大二，学习数字逻辑电路后才知道VHDL的，用来写数字逻辑的实验。刚开始接触的时候，也并不知道它是用来干什
    
    </summary>
    
      <category term="VHDL" scheme="http://yoursite.com/categories/VHDL/"/>
    
    
      <category term="VHDL" scheme="http://yoursite.com/tags/VHDL/"/>
    
  </entry>
  
  <entry>
    <title>Java|Hibernate入门</title>
    <link href="http://yoursite.com/2017/12/24/Java-Hibernate%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/12/24/Java-Hibernate入门/</id>
    <published>2017-12-24T09:39:28.000Z</published>
    <updated>2017-12-24T01:54:11.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate简介"><a href="#Hibernate简介" class="headerlink" title="Hibernate简介"></a>Hibernate简介</h3><h4 id="为什么要有Hiernate"><a href="#为什么要有Hiernate" class="headerlink" title="为什么要有Hiernate"></a>为什么要有Hiernate</h4><p>我们都知道，现在主流的编程语言大多是面向对象的，如Java、C++，但是现在的主流数据库产品又是关系型的数据，在面向对象的世界里，对关系型数据库的访问与操作都是相当麻烦的。这时候ORM（Object/Relation Mapping,对象/关系数据库映射)出现了，可以说它是一种规范，完成了面向对象编程语言到关系数据库的映射。</p>
<p><img src="./images/ORM.gif" alt="ORM工具作用示意图" title="ORM"></p>
<p>Hibernate是ORM框架的一种，也是目前最流行的ORM框架。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate简介&quot;&gt;&lt;a href=&quot;#Hibernate简介&quot; class=&quot;headerlink&quot; title=&quot;Hibernate简介&quot;&gt;&lt;/a&gt;Hibernate简介&lt;/h3&gt;&lt;h4 id=&quot;为什么要有Hiernate&quot;&gt;&lt;a href=&quot;#为什么要
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PHP||文件操作</title>
    <link href="http://yoursite.com/2017/12/16/PHP-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/12/16/PHP-文件操作/</id>
    <published>2017-12-16T08:29:56.000Z</published>
    <updated>2017-12-16T17:18:58.161Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP文件操作"><a href="#PHP文件操作" class="headerlink" title="PHP文件操作"></a>PHP文件操作</h3><p>今天来记录一下PHP的文件操作，由于之前没怎么用过，导致需要用的时候也是需要查看文档，不如就记录下来，不然下次还需要查看文档。</p>
<p>当然，文件的操作，还是一样的步骤：</p>
<ul>
<li>打开文件</li>
<li>获取数据流</li>
<li>进行操作</li>
<li>关闭文件</li>
</ul>
<h4 id="文件创建-打开"><a href="#文件创建-打开" class="headerlink" title="文件创建/打开"></a>文件创建/打开</h4><p>PHP Open File - fopen() </p>
<p>打开文件的更好的方法是通过 fopen() 函数。此函数为您提供比 readfile() 函数更多的选项。open() 的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。如果 fopen() 函数未能打开指定的文件，下面的例子会生成一段消息：</p>
<p>webdictionary.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AJAX = Asynchronous JavaScript and XML</div><div class="line">CSS = Cascading Style Sheets</div><div class="line">HTML = Hyper Text Markup Language</div><div class="line">PHP = PHP Hypertext Preprocessor</div><div class="line">SQL = Structured Query Language</div><div class="line">SVG = Scalable Vector Graphics</div><div class="line">XML = EXtensible Markup Language</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$myfile = fopen(&quot;webdictionary.txt&quot;, &quot;r&quot;) or die(&quot;Unable to open file!&quot;);</div><div class="line">echo fread($myfile,filesize(&quot;webdictionary.txt&quot;));</div><div class="line">fclose($myfile);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AJAX = Asynchronous JavaScript and XML CSS = Cascading Style Sheets HTML = Hyper Text Markup Language PHP = PHP Hypertext Preprocessor SQL = Structured Query Language SVG = Scalable Vector Graphics XML = EXtensible Markup Language</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>打开文件为只读。文件指针在文件的开头开始。</td>
<td></td>
</tr>
<tr>
<td>w</td>
<td>打开文件为只写。删除文件的内容或创建一个新的文件，如果它不存在。文件指针在文件的开头开始。</td>
<td></td>
</tr>
<tr>
<td>a</td>
<td>打开文件为只写。文件中的现有数据会被保留。文件指针在文件结尾开始。创建新的文件，如果文件不存在。</td>
<td></td>
</tr>
<tr>
<td>x</td>
<td>创建新文件为只写。返回 FALSE 和错误，如果文件已存在。</td>
<td></td>
</tr>
<tr>
<td>r+</td>
<td>打开文件为读/写、文件指针在文件开头开始。</td>
<td></td>
</tr>
<tr>
<td>w+</td>
<td>打开文件为读/写。删除文件内容或创建新文件，如果它不存在。文件指针在文件开头开始。</td>
<td></td>
</tr>
<tr>
<td>a+</td>
<td>打开文件为读/写。文件中已有的数据会被保留。文件指针在文件结尾开始。创建新文件，如果它不存在。</td>
<td></td>
</tr>
<tr>
<td>x+</td>
<td>创建新文件为读/写。返回 FALSE 和错误，如果文件已存在。</td>
</tr>
</tbody>
</table>
<h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><ul>
<li>fwrite：向文件写入内容，可安全用于二进制文件 。</li>
<li>file_put_contents：向文件写入内容，等同依次调用 fopen，fwrite 以及 fclose 函数。</li>
</ul>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><ul>
<li>fread：读取文件，可安全用于二进制文件。</li>
<li>fgets：从文件中读取 一行 数据，并将文件指针指向下一行。</li>
<li>feof:函数是用来检测文件是否结束的。该函数唯一参数就是文件指针（即$fp对应打开的文件）</li>
<li>fgetc：从文件中 逐字 读取文件数据，直到文件结束。</li>
<li>file_get_contents：把 整个文件 读入一个字符串。</li>
<li>file：把 整个文件 读入一个数组中，数组中的每个单元都是文件中相应的一行。</li>
</ul>
<h3 id="检查文件是否存在"><a href="#检查文件是否存在" class="headerlink" title="检查文件是否存在"></a>检查文件是否存在</h3><ul>
<li>file_exists：检查文件或目录是否存在。</li>
</ul>
<h4 id="检查文件是否可读写执行"><a href="#检查文件是否可读写执行" class="headerlink" title="检查文件是否可读写执行"></a>检查文件是否可读写执行</h4><ul>
<li>is_readable：检查文件是否可读。</li>
<li>is_writable：检查文件是否是否可写入。</li>
<li>is_executable：检查文件是否可执行。</li>
</ul>
<h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><p>copy：拷贝文件。</p>
<h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>unlink：删除文件。</p>
<h3 id="取得文件大小、类型、修改时间信息"><a href="#取得文件大小、类型、修改时间信息" class="headerlink" title="取得文件大小、类型、修改时间信息"></a>取得文件大小、类型、修改时间信息</h3><ul>
<li>filesize：取得文件大小。</li>
<li>filetype：取得文件类型。</li>
<li>filemtime：取得文件修改时间。</li>
</ul>
<h3 id="文件指针函数"><a href="#文件指针函数" class="headerlink" title="文件指针函数"></a>文件指针函数</h3><ul>
<li>fclose：关闭文件指针。</li>
<li>feof：测试文件指针是否到了文件结束的位置。</li>
<li>fseek：在文件指针中定位。</li>
<li>rewind：倒回文件指针的位置。</li>
<li>ftell：返回文件指针读/写的位置</li>
</ul>
<h3 id="测试Demo"><a href="#测试Demo" class="headerlink" title="测试Demo"></a>测试Demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">const FILE_NAME = &quot;file_info.dat&quot;;</div><div class="line"></div><div class="line">class file_info</div><div class="line">&#123;</div><div class="line">    public $file_name;</div><div class="line">    public $self_count;</div><div class="line">    public $total_count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//判断文件是否存在</div><div class="line">if (file_exists(FILE_NAME))</div><div class="line">&#123;</div><div class="line">  echo &quot;file existed.\n&quot;;</div><div class="line">  unlink(FILE_NAME);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$fd = NULL;</div><div class="line"></div><div class="line">$fd = fopen(FILE_NAME, &quot;wb&quot;);</div><div class="line"></div><div class="line">if ($fd == NULL || $fd == false)</div><div class="line">&#123;</div><div class="line">  echo &quot;Failed to open file.\n&quot;; </div><div class="line">  return;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj = new file_info();</div><div class="line"></div><div class="line">if ($obj == NULL)</div><div class="line">&#123;</div><div class="line">   echo &quot;Failed to create object.\n&quot;;</div><div class="line">   return;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for($i=0; $i&lt;3; $i++)</div><div class="line">&#123;</div><div class="line">   $temp_1 = $i * 10;</div><div class="line">   $temp_2 = $i * 100;</div><div class="line">   /*</div><div class="line">   $obj-&gt;file_name = &quot;file_&quot;.$i.&quot;\n&quot;;</div><div class="line">   $obj-&gt;self_count = $temp_1.&quot;\n&quot;;</div><div class="line">   $obj-&gt;total_count = $temp_2.&quot;\n&quot;;</div><div class="line">   */</div><div class="line">   //构造字符串。filename-0-0\n</div><div class="line">   $row = &quot;file_&quot;.$i.&quot;-&quot;.$temp_1.&quot;-&quot;.$temp_2.&quot;\n&quot;;</div><div class="line">   echo &quot;row: &quot;.$row;</div><div class="line">   fwrite($fd, $row);</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ($fd)</div><div class="line">  fclose($fd); </div><div class="line"></div><div class="line">$fd = fopen(FILE_NAME, &quot;rb&quot;);</div><div class="line">if ($fd == false)</div><div class="line">&#123;</div><div class="line">   echo &quot;Failed to open read file.\n&quot;;</div><div class="line">   return;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj_params =  array();</div><div class="line"></div><div class="line">$i = 0;</div><div class="line"></div><div class="line">while (!feof($fd))</div><div class="line">&#123;</div><div class="line">    $tmp_obj = new file_info();</div><div class="line">    $tmp_row = fgets($fd);</div><div class="line">    if ($tmp_row == NULL)</div><div class="line">    break;</div><div class="line">    $pos_1 = strpos($tmp_row, &apos;-&apos;,0);</div><div class="line">    $pos_2 = strpos($tmp_row,&apos;-&apos;,$pos_1 + 1);</div><div class="line">    $tmp_obj-&gt;file_name = substr($tmp_row, 0, $pos_1);</div><div class="line">    $tmp_obj-&gt;self_count = substr($tmp_row, $pos_1 + 1, $pos_2- $pos_1 - 1);</div><div class="line">    $tmp_obj-&gt;total_count = substr($tmp_row, $pos_2 + 1, strlen($tmp_row) - $pos_2 - 2);</div><div class="line">    $obj_params[$i] = $tmp_obj;</div><div class="line">    $i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for ($k = 0; $k &lt; count($obj_params); $k++)</div><div class="line">&#123;</div><div class="line">   echo $obj_params[$k]-&gt;file_name.&quot;\n&quot;;</div><div class="line">   echo $obj_params[$k]-&gt;self_count.&quot;\n&quot;;</div><div class="line">   echo $obj_params[$k]-&gt;total_count.&quot;\n&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ($fd)</div><div class="line">   fclose($fd);</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>参考<a href="http://www.cnblogs.com/Anker/p/3387180.html" target="_blank" rel="external">http://www.cnblogs.com/Anker/p/3387180.html</a></p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PHP文件操作&quot;&gt;&lt;a href=&quot;#PHP文件操作&quot; class=&quot;headerlink&quot; title=&quot;PHP文件操作&quot;&gt;&lt;/a&gt;PHP文件操作&lt;/h3&gt;&lt;p&gt;今天来记录一下PHP的文件操作，由于之前没怎么用过，导致需要用的时候也是需要查看文档，不如就记录下来
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>游学|一次关于创业的分享</title>
    <link href="http://yoursite.com/2017/12/16/%E6%B8%B8%E5%AD%A6-%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E5%88%9B%E4%B8%9A%E7%9A%84%E5%88%86%E4%BA%AB/"/>
    <id>http://yoursite.com/2017/12/16/游学-一次关于创业的分享/</id>
    <published>2017-12-16T00:20:23.000Z</published>
    <updated>2017-12-15T17:15:40.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>胡哥前几天就说带人去外面的公司参观一波，自己有事去不了，但这次是在周五下午，自己还是有空去的，就报名参加了。之前暑假的时候就说要去微信参观学习了，但由于种种原因还没去，就先看长沙的吧。</p>
<h3 id="参观"><a href="#参观" class="headerlink" title="参观"></a>参观</h3><p>坐大巴车一个小时左右就到了。刚开始是来到百度孵化中心，这里有很多入驻的项目。我们参观了一下，感觉好大啊，接着是一些分享。</p>
<p>首先是一名在百度待过，现在出来创业的—-磊哥（记得是这名字）。磊哥说了自己的经历，首先创业失败了，然后去百度工作，然后出来创业，现在在搞大数据方面的工作，梦想是运用大数据，帮长沙的公司更好的确定目标用户，更精准的推广。真的是这样的，自己都是在象牙塔里面闭门造车，并不知道学的这些技术有什么作用，也不知道现在流行的机器学习、大数据、云计算能运用到什么方面。听了磊哥的分享，有了一点理解了，这些所谓的技术，最重要的还是要用到实处，帮助人们解决一些实际的问题，这样才能发挥价值。</p>
<p>磊哥还跟我们谈到未来的发展趋势，农业啊、文化产业啊、服务业啊，都会是将来可能发展的方向，互联网在这些方面都会有很大的应用。磊哥还提到的就是人生五年计划，每个五年内专心做一件事，做到极致，五年后在选择下一个五年要做什么。五年，我们的一声没多少个五年，黄金年龄段20~40岁之间也就4个五年，在这四个五年里也仅仅能在这四个五年里，我们能通过自己的努力来提升自己的社会阶层，有一定的财富积累。然而发现，自己已经20岁了，已经到了奋斗的年龄了，但还不知道自己今后要干嘛，实在是悲剧。</p>
<p><img src="/images/磊哥.jpg" alt="磊哥" title="磊哥"></p>
<p>接着是也在蓝杰待过的学长，刘楷强，专业三次，失败两次，一次还没失败。学长在大学就开始创业，毕业后也是一直在创业。学长分享了自己失败的经历，说创业的艰辛，但也说创业是一个在折腾自己的过程。创业初期，很多事情需要亲事亲为，要做调研、跑市场、谈客户、做报表….每一个环节都时不容易的，都需要有一定的专业知识的，所以创业就要不断的学习，不断的折腾自己。</p>
<p><img src="/images/刘楷强.jpg" alt="enter description here" title="刘楷强"></p>
<p>再接着也是我们湖大的学长， 刘叶焕 ，在读研究生，研三，但已经是以为公司的创始人了，公司年营业额一千多万，真是人比人气死人啊。学长高中毕业后就开始创业，搞培训公司。大一大二也在折腾，搞网站。大四保研后开始继续折腾，用公众号弄订单系统。自己挺佩服学长的，大学里能边创业，还能搞好学习，还成绩保研了，莫非是在出生那一刻，自己就已经输了。学长现在搞得是公众号，一个有一千万关注的公众号，主要营业靠广告，还有线下的打印店，经营理念就是服务于千万大学生。打印店只是他们公司的一个起步，是为自己赢得信赖的第一步，是让广大学生相信他们是真心实意地为学生服务的一个公司，之后就能有很大的创新了，能搞驾校啊、水果店啊…只要有人相信他了，做什么不行呢？</p>
<p><img src="/images/刘叶焕.jpg" alt="刘叶焕" title="刘叶焕"></p>
<h3 id="留给自己的"><a href="#留给自己的" class="headerlink" title="留给自己的"></a>留给自己的</h3><p>创业，是很多有梦想的人都想去干的事情，但并不是人人都能做成功的事情。自己也想过创业，但并没有付出过行动，除了高二暑假卖石榴、卖报纸那档子事，也并不能体验其中的艰辛，自己这一生还是要经历一次才算完美。在这里，为正在努力奋斗的创业者加油打气啦。</p>
<h3 id="来一次打击"><a href="#来一次打击" class="headerlink" title="来一次打击"></a>来一次打击</h3><p>晚上回来参加了今日头条的宣讲会和笔试。三道题，两道算法题，一个是求最长子数列，另一个是求最大矩形，最后一个是附加题，设计数据结构，解决群聊消息通知的问题。自己是真心不懂，想了半个小时就放弃了，溜了。仔细想想，算法这个东西还真是不能偷懒啊，还是要刷一些题的，只写一些增删改查的代码，不会有多大进步的。</p>
<p>只能下次再战了。</p>
<p><img src="/images/12.15.jpg" alt="enter description here" title="12.15"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;胡哥前几天就说带人去外面的公司参观一波，自己有事去不了，但这次是在周五下午，自己还是有空去的，就报名参加了。之前暑假的时候就
    
    </summary>
    
    
      <category term="游学" scheme="http://yoursite.com/tags/%E6%B8%B8%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>git|踩过的坑</title>
    <link href="http://yoursite.com/2017/12/15/%E5%B7%A5%E5%85%B7-git-%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2017/12/15/工具-git-踩过的坑/</id>
    <published>2017-12-15T00:03:02.000Z</published>
    <updated>2018-01-23T10:36:16.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记录这些年踩过的坑"><a href="#记录这些年踩过的坑" class="headerlink" title="记录这些年踩过的坑"></a>记录这些年踩过的坑</h3><p>第一次接触 Git 是在大一，刚进弦歌那会。由于Git是命令行操作的，没接触过命令行，就觉得这东西挺高大尚的，自己还专门也研究了好久呢，书都借了好几本。</p>
<p>刚开始自己也没概念，搞不清楚本地仓库和远程仓库，只有到开发新生宝典时真正使用了才知道是怎么回事，确实啊，这种工具类的东西，是要使用才能真正掌握的，就像后来用的Composer和Maven。</p>
<h3 id="说说Git"><a href="#说说Git" class="headerlink" title="说说Git"></a>说说Git</h3><h4 id="为什么要用Git"><a href="#为什么要用Git" class="headerlink" title="为什么要用Git"></a>为什么要用Git</h4><p>首先，一定要明确Git就是一个工具，一个可以帮助我们管理我们的文件的工具。特点就是，它能够记录我们的修改，我们可以回退到我们修改之前的版本。想象一下，我正在写一篇文章，我想改一些地方，但又不知道改了好不好，我就可能会复制一份来改，那要是我要改很多了？那岂不是要备份很多份？如果有了Git这个工具，我们就不需要备份了，如果改完之后不满意，可以撤回到改之前的版本，并且不局限于上一个版本，还能返回到之前的各个版本。</p>
<p>Git还有一个很重要的功能，那就是能把我们本地的文件推送到云端，也就相当与上传到百度云或各种云。这对于我们这种码农来说，就有利与多人合作开发了。毕竟这个工具的初衷就是方便程序开发的，还有其他很多重要的功能，比如开分支啊等等。</p>
<h4 id="Git是怎么工作的"><a href="#Git是怎么工作的" class="headerlink" title="Git是怎么工作的"></a>Git是怎么工作的</h4><p>俗话说“千行字不如图一张”，来张图说明一切吧：</p>
<p><img src="/images/git.png" alt="enter description here" title="git"></p>
<h3 id="一些干货"><a href="#一些干货" class="headerlink" title="一些干货"></a>一些干货</h3><h4 id="添加-gitignore没起作用"><a href="#添加-gitignore没起作用" class="headerlink" title="添加 .gitignore没起作用"></a>添加 .gitignore没起作用</h4><p>此时需要删除本地库里的东西，重新添加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached .</div><div class="line">git add .</div><div class="line">git commit -m &quot;.gitignore is now working&quot;</div></pre></td></tr></table></figure>
<h4 id="提交到远程仓库前"><a href="#提交到远程仓库前" class="headerlink" title="提交到远程仓库前"></a>提交到远程仓库前</h4><ul>
<li>先git pull 拉下来，看有没有冲突</li>
<li>如果有，就解决冲突，然后git add，git commit ，git push</li>
</ul>
<h4 id="fetch和pull的区别"><a href="#fetch和pull的区别" class="headerlink" title="fetch和pull的区别"></a>fetch和pull的区别</h4><p>pull=fetch+merge，pull的话，下拉远程分支并与本地分支合并。fetch只是下拉远程分支，怎么合并，可以自己再做选择。</p>
<h4 id="git-diff-的用法"><a href="#git-diff-的用法" class="headerlink" title="git diff 的用法"></a>git diff 的用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git diff                                       查看尚未暂存的文件更新了哪些部分</div><div class="line"></div><div class="line">git diff filename 查看尚未暂存的某个文件更新了哪些</div><div class="line"></div><div class="line">git diff –cached                    查看已经暂存起来的文件和上次提交的版本之间的差异</div><div class="line"></div><div class="line">git diff –cached filename 查看已经暂存起来的某个文件和上次提交的版本之间的差异</div><div class="line"></div><div class="line">git diff ffd98b291e0caa6c33575c1ef465eae661ce40c9 b8e7b00c02b95b320f14b625663fdecf2d63e74c 查看某两个版本之间的差异</div><div class="line"></div><div class="line">git diff ffd98b291e0caa6c33575c1ef465eae661ce40c9:filename b8e7b00c02b95b320f14b625663fdecf2d63e74c:filename 查看某两个版本的某个文件之间的差异</div></pre></td></tr></table></figure>
<h4 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h4><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>git clean -n</td>
<td>是一次clean的演习, 告诉你哪些文件会被删除. 记住他不会真正的删除文件, 只是一个提醒</td>
</tr>
<tr>
<td>git clean -f</td>
<td>删除当前目录下所有没有track过的文件. 他不会删除.gitignore文件里面指定的文件夹和文件, 不管这些文件有没有被track过.</td>
</tr>
<tr>
<td>git clean -f <path></path></td>
<td>删除指定路径下的没有被track过的文件.</td>
</tr>
<tr>
<td>git clean -df</td>
<td>删除当前目录下所有没有track过的文件. 不管他是否是.gitignore文件里面指定的文件夹和文件.</td>
</tr>
</tbody>
</table>
<p>git reset –hard和git clean -f是一对好基友. 结合使用他们能让你的工作目录完全回退到最近一次commit的时候. </p>
<p>git clean对于刚编译过的项目也非常有用. 如, 他能轻易删除掉编译后生成的.o和.exe等文件.  这个在打包要发布一个release的时候非常有用. </p>
<h5 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h5><p>下面的例子要删除所有工作目录下面的修改, 包括新添加的文件. 假设你已经提交了一些快照了, 而且做了一些新的开发.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Edit some existing files</div><div class="line"># Add some new files</div><div class="line"># Realize you have no idea what you&apos;re doing</div><div class="line"> </div><div class="line"># Undo changes in tracked files</div><div class="line">git reset --hard</div><div class="line"> </div><div class="line"># Remove untracked files</div><div class="line">git clean -df</div></pre></td></tr></table></figure>
<p>运行后, 工作目录和缓存区回到最近一次commit时候一摸一样的状态, git status会告诉你这是一个干净的工作目录, 又是一个新的开始了.</p>
<h4 id="关于公钥-秘钥"><a href="#关于公钥-秘钥" class="headerlink" title="关于公钥|秘钥"></a>关于公钥|秘钥</h4><h5 id="如何创建公钥"><a href="#如何创建公钥" class="headerlink" title="如何创建公钥"></a>如何创建公钥</h5><ul>
<li><p>1、首先启动一个Git Bash窗口（非Windows用户直接打开终端）</p>
</li>
<li><p>2、执行：</p>
</li>
</ul>
<blockquote>
<p>cd ~/.ssh</p>
</blockquote>
<p>如果返回“… No such file or directory”，说明没有生成过SSH Key，直接进入第4步。否则进入第3步备份!</p>
<ul>
<li>3、备份：</li>
</ul>
<p>mkdir key_backup mv id_isa* key_backup</p>
<ul>
<li>4、生成新的Key：（引号内的内容替换为你自己的邮箱）</li>
</ul>
<p>ssh-keygen -t rsa -C “your_email@youremail.com”</p>
<p>输出显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;Generating public/private rsa key pair. Enter file in which to save the key </div><div class="line">(/Users/your_user_directory/.ssh/id_rsa):&lt;press enter&gt;</div></pre></td></tr></table></figure>
<p>直接回车，不要修改默认路劲。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;Enter passphrase (empty for no passphrase):&lt;enter a passphrase&gt;</div><div class="line">Enter same passphrase again:&lt;enter passphrase again&gt;</div></pre></td></tr></table></figure></p>
<p>设置一个密码短语，在每次远程操作之前会要求输入密码短语！闲麻烦可以直接回车，不设置。</p>
<ul>
<li><p>5、成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Your identification has been saved in /Users/your_user_directory/.ssh/id_rsa. Your public key has been saved in /Users/your_user_directory/.ssh/id_rsa.pub. The key fingerprint is: ... ...</div></pre></td></tr></table></figure>
</li>
<li><p>6、提交公钥：</p>
</li>
</ul>
<p>6.1 找到.ssh文件夹，用文本编辑器打开“id_rsa.pub”文件，复制内容到剪贴板。</p>
<p>6.2 打开 <a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a> ，点击 Add SSH Key 按钮，粘贴进去保存即可。</p>
<h4 id="可以参考的资料"><a href="#可以参考的资料" class="headerlink" title="可以参考的资料"></a>可以参考的资料</h4><blockquote>
<blockquote>
<p><a href="http://huanglei.me/git-theory.html" target="_blank" rel="external">http://huanglei.me/git-theory.html</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;记录这些年踩过的坑&quot;&gt;&lt;a href=&quot;#记录这些年踩过的坑&quot; class=&quot;headerlink&quot; title=&quot;记录这些年踩过的坑&quot;&gt;&lt;/a&gt;记录这些年踩过的坑&lt;/h3&gt;&lt;p&gt;第一次接触 Git 是在大一，刚进弦歌那会。由于Git是命令行操作的，没接触过命令行
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>动态规划——由实践总结经验</title>
    <link href="http://yoursite.com/2017/12/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%8F%E5%85%B8%E4%BE%8B%E9%A2%98/"/>
    <id>http://yoursite.com/2017/12/09/动态规划经典例题/</id>
    <published>2017-12-09T00:10:32.000Z</published>
    <updated>2017-12-08T16:56:52.877Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划——由实践总结经验</p>
<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul>
<li>基础题目<ul>
<li>矩阵取数问题</li>
<li>最大子段和</li>
<li>最长公共子序列问题</li>
<li>编辑距离问题</li>
<li>最长单增子序列</li>
<li>0-1背包问题</li>
<li>正整数分组</li>
</ul>
</li>
<li>进阶题目<br>  -最大子矩阵和<ul>
<li>循环数组最大字段和</li>
<li>多重背包问题</li>
</ul>
</li>
</ul>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学校出门一台政策，要求计算机专业的学生必须参加CCF的考试，且必须通过考核后，才能毕业.无奈之下，需要认真钻研动态规划算法，应付考试。在经过两周多的训练和查阅资料，对其有了一点理解理解。</p>
<p>在我看来，动态规划的核心在于将待求解问题分解为子问题，子问题的规模小于原问题，并且求解方法一致，但原问题的求解依赖于子问题，子问题之间往往不相互独立。典型特征就是，动态规划中所使用的递推公式。与之相比，分治法的核心在于将原问题规模缩小，分解为多个子问题，且各个子问题之间相互独立。</p>
<p>核心思想：</p>
<ul>
<li>全局最优解包含局部最优解。</li>
<li>状态转移方程</li>
</ul>
<h3 id="基础题目"><a href="#基础题目" class="headerlink" title="基础题目"></a>基础题目</h3><h4 id="矩阵取数问题"><a href="#矩阵取数问题" class="headerlink" title="矩阵取数问题"></a>矩阵取数问题</h4><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>一个NN矩阵中有不同的正整数，经过这个格子，就能获得相应价值的奖励，从左上走到右下，只能向下向右走，求能够获得的最大价值。</p>
<p>例如：3 3的方格。<br>1 3 3<br>2 1 3<br>2 2 1<br>能够获得的最大价值为：11。</p>
<p>输入<br>第1行：N，N为矩阵的大小。(2 &lt;= N &lt;= 500)<br>第2 - N + 1行：每行N个数，中间用空格隔开，对应格子中奖励的价值。（1 &lt;= N[i] &lt;= 10000)<br>输出<br>输出能够获得的最大价值。<br>输入示例<br>3<br>1 3 3<br>2 1 3<br>2 2 1<br>输出示例<br>11</p>
<h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">using namespace std;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int n;</div><div class="line">    cin &gt;&gt; n;</div><div class="line">    vector&lt;vector&lt;int&gt; &gt; nums(n);</div><div class="line">    vector&lt;vector&lt;long long&gt; &gt; dp(n + 1);</div><div class="line">    for(int i = 0; i &lt; n;i++)&#123;</div><div class="line">        vector&lt;int&gt; row(n);</div><div class="line">        vector&lt;long long&gt; maxRow(n + 1,0);</div><div class="line">        for(int j = 0;j &lt; n;j++)&#123;</div><div class="line">            cin &gt;&gt; row[j];</div><div class="line">        &#125;</div><div class="line">        nums[i] = row;</div><div class="line">        dp[i] = maxRow;</div><div class="line">    &#125;</div><div class="line">    vector&lt;long long&gt; maxRow(n + 1,0);</div><div class="line">    dp[n] = maxRow;</div><div class="line"></div><div class="line">    for(int i = 1; i &lt;= n;i++)&#123;</div><div class="line">        for(int j = 1; j &lt;= n; j++)&#123;</div><div class="line">            dp[i][j] = max(dp[i - 1][j],dp[i][j - 1]) + nums[i - 1][j - 1];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout&lt;&lt; dp[n][n]&lt;&lt;endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>在本例中，我们用dp[i][j]来表示从点（0，0）走到点（i,j）时，所能得到的最大值，也就是说，dp[][]数组中存储的是从原点到点（i,j）的所有有局部最优解，这就体现了我们重要思想中的 <strong>全局最优解包含局部最优解*</strong>。简单点说，最后的解就是通过前面的局部的最优解通过状态转移方程一步步的得到的。</p>
<h4 id="最大子段和"><a href="#最大子段和" class="headerlink" title="最大子段和"></a>最大子段和</h4><h5 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h5><p>N个整数组成的序列a[1],a[2],a[3],…,a[n]，求该序列如a[i]+a[i+1]+…+a[j]的连续子段和的最大值。当所给的整数均为负数时和为0。<br>例如：-2,11,-4,13,-5,-2，和最大的子段为：11,-4,13。和为20。</p>
<p>输入<br>第1行：整数序列的长度N（2 &lt;= N &lt;= 50000)<br>第2 - N + 1行：N个整数（-10^9 &lt;= A[i] &lt;= 10^9）<br>输出<br>输出最大子段和。<br>输入示例<br>6<br>-2<br>11<br>-4<br>13<br>-5<br>-2<br>输出示例<br>20</p>
<h6 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">/*动态规划算法:</div><div class="line">b[j]=max&#123;a[i]++a[j]&#125;,1&lt;=i&lt;=j,且1&lt;=j&lt;=n,则所求的最大子段和为max b[j]，1&lt;=j&lt;=n。</div><div class="line"></div><div class="line">由b[j]的定义可易知，当b[j-1]&gt;0时b[j]=b[j-1]+a[j]，否则b[j]=a[j]。故b[j]</div><div class="line">的动态规划递归式为:</div><div class="line"></div><div class="line">b[j]=max(b[j-1]+a[j],a[j])，1&lt;=j&lt;=n。</div><div class="line">代码中，pre就相当与b[j]；result保存b[j]中的最大值</div><div class="line">T(n)=O(n)</div><div class="line">*/</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int n;</div><div class="line">    cin &gt;&gt; n;</div><div class="line">    int cur;</div><div class="line">    cin &gt;&gt; cur;</div><div class="line">    long long result = cur;</div><div class="line">    long long pre = cur;</div><div class="line">    for(int i = 1; i &lt; n;i++)&#123;</div><div class="line">       cin &gt;&gt; cur;</div><div class="line">       if(pre &gt; 0)&#123;</div><div class="line">           pre = pre + cur;</div><div class="line">       &#125;</div><div class="line">       else&#123;</div><div class="line">           pre = cur;</div><div class="line">       &#125;</div><div class="line">       if(pre &gt; result)&#123;</div><div class="line">           result = pre;</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; result&lt;&lt;endl;</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">using namespace std;</div><div class="line">/*</div><div class="line">动态规划:数组为in[]，设dp[i] 是以in[i]结尾的子数组的最大和.</div><div class="line">对于元素in[i+1],它有两种选择：a、vec[i+1]接着前面的子数组构成最大和，b、in[i+1]自己单独构成子数组。</div><div class="line">则dp[i+1] = max&#123;dp[i]+in[i+1],  in[i+1]&#125;</div><div class="line">*/</div><div class="line">int main()&#123;</div><div class="line">    int n;cin&gt;&gt;n;</div><div class="line">    int in[n];</div><div class="line">    int dp[n];</div><div class="line">    for(int i=0;i&lt;n;i++)&#123;</div><div class="line">        cin&gt;&gt;in[i];</div><div class="line">        dp[i]=in[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for(int i=1;i&lt;n;i++)&#123;</div><div class="line">        dp[i] = max(dp[i-1]+in[i],  in[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for(int i=0;i&lt;n;i++)&#123;</div><div class="line">        cout&lt;&lt;dp[i]&lt;&lt;&quot; &quot;;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>对于此题呢，这里给出了两种写法，但两者思想都是一样的，都是用了动态规划的思想。在第一中写法中，我们用变量pre代表序列中以 i 结尾的连续数列的最大值，这就是当前i的最优节，一个局部最优解，通过状态转移方程不断得到全部的最优解。第二种写法是比较容易接受的，dp[i] 代表的是序列中以 i 结尾的连续数列的最大值,那么dp[i+1]=max(dp[i]+a[i+1],a[i+1])。</p>
<h4 id="最长公共子序列问题"><a href="#最长公共子序列问题" class="headerlink" title="最长公共子序列问题"></a>最长公共子序列问题</h4><h5 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h5><p>最长公共子序列的问题常用于解决字符串的相似度，是一个非常实用的算法，作为码农，此算法是我们的必备基本功。</p>
<p>给出两个字符串A B，求A与B的最长公共子序列（子序列不要求是连续的）。<br>比如两个串为：<br>abcicba<br>abdkscab<br>ab是两个串的子序列，abc也是，abca也是，其中abca是这两个字符串最长的子序列。</p>
<p>输入<br>第1行：字符串A<br>第2行：字符串B<br>(A,B的长度 &lt;= 1000)<br>输出<br>输出最长的子序列，如果有多个，随意输出1个。</p>
<p>输入示例<br>abcicba<br>abdkscab<br>输出示例<br>abca</p>
<h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;list&gt;</div><div class="line">using namespace std;</div><div class="line">typedef struct &#123;</div><div class="line">    int x;</div><div class="line">    int y;</div><div class="line">    char node = &apos;\0&apos;;</div><div class="line">    int maxLength = 0;</div><div class="line">&#125; DpNode;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    string a;</div><div class="line">    string b;</div><div class="line">    std:cin &gt;&gt; a &gt;&gt;b;</div><div class="line">    vector&lt;vector&lt;DpNode&gt; &gt; dp(a.size() + 1);</div><div class="line">    for (int i = 0; i &lt;= a.size(); i++) &#123;</div><div class="line">        vector&lt;DpNode&gt; dpRow(b.size() + 1);</div><div class="line">        dp[i] = dpRow;</div><div class="line">    &#125;</div><div class="line">    for (int i = 1; i &lt;= a.size(); i++) &#123;</div><div class="line">        for (int j = 1; j &lt;= b.size(); j++) &#123;</div><div class="line">            if (a[i - 1] == b[j - 1]) &#123;</div><div class="line">                dp[i][j].maxLength = dp[i - 1][j - 1].maxLength + 1;</div><div class="line">                dp[i][j].x = i - 1;</div><div class="line">                dp[i][j].y = j - 1;</div><div class="line">                dp[i][j].node = a[i - 1];</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                if (dp[i - 1][j].maxLength &gt; dp[i][j - 1].maxLength) &#123;</div><div class="line">                    dp[i][j].maxLength = dp[i - 1][j].maxLength;</div><div class="line">                    dp[i][j].x = i - 1;</div><div class="line">                    dp[i][j].y = j;</div><div class="line">                &#125;</div><div class="line">                else &#123;</div><div class="line">                    dp[i][j].maxLength = dp[i][j - 1].maxLength;</div><div class="line">                    dp[i][j].x = i;</div><div class="line">                    dp[i][j].y = j - 1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    int x = a.size();</div><div class="line">    int y = b.size();</div><div class="line">    char c;</div><div class="line">    list&lt;char&gt; result;</div><div class="line">    int xTemp;</div><div class="line">    while (x != 0 &amp;&amp; y != 0) &#123;</div><div class="line">        c = dp[x][y].node;</div><div class="line">        if (c != &apos;\0&apos;) &#123;</div><div class="line">            result.push_front(c);</div><div class="line">        &#125;</div><div class="line">        xTemp = x;</div><div class="line">        x = dp[xTemp][y].x;</div><div class="line">        y = dp[xTemp][y].y;</div><div class="line">    &#125;</div><div class="line">    for (list&lt;char&gt;::iterator it = result.begin(); it != result.end(); it++) &#123;</div><div class="line">        cout &lt;&lt; *it;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="编辑距离问题"><a href="#编辑距离问题" class="headerlink" title="编辑距离问题"></a>编辑距离问题</h4><h5 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h5><p>编辑距离，又称Levenshtein距离（也叫做Edit Distance），是指两个字串之间，由一个转成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。<br>例如将kitten一字转成sitting：<br>sitten （k-&gt;s）<br>sittin （e-&gt;i）<br>sitting （-&gt;g）<br>所以kitten和sitting的编辑距离是3。俄罗斯科学家Vladimir Levenshtein在1965年提出这个概念。<br>给出两个字符串a,b，求a和b的编辑距离。<br>输入<br>第1行：字符串a(a的长度 &lt;= 1000)。<br>第2行：字符串b(b的长度 &lt;= 1000)。<br>输出<br>输出a和b的编辑距离。</p>
<p>输入示例<br>kitten<br>sitting<br>输出示例<br>3</p>
<h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">using namespace std;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    string a;</div><div class="line">    string b;</div><div class="line">    cin &gt;&gt; a &gt;&gt; b;</div><div class="line">    vector&lt;vector&lt;int&gt; &gt; dp(a.size() + 1);</div><div class="line">    vector&lt;int&gt; dpRow(b.size() + 1);</div><div class="line">    dp[0] = dpRow;</div><div class="line">    for(int i = 0; i &lt;= b.size();i++ )&#123;</div><div class="line">        dp[0][i] = i;</div><div class="line">    &#125;</div><div class="line">    for(int i = 1; i &lt;= a.size();i++)&#123;</div><div class="line">        vector&lt;int&gt; dpRow(b.size() + 1);</div><div class="line">        dp[i] = dpRow;</div><div class="line">        dp[i][0] = i;</div><div class="line">    &#125;</div><div class="line">    int minTemp;</div><div class="line">    for(int i = 0; i &lt; a.size();i++)&#123;</div><div class="line">        for(int j = 0; j &lt; b.size();j++)&#123;</div><div class="line">            if(a[i] == b[j])&#123;</div><div class="line">                dp[i + 1][j + 1] = dp[i][j];</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                minTemp = min(dp[i][j] + 1,dp[i][j + 1] + 1);</div><div class="line">                dp[i + 1][j + 1] = min(minTemp,dp[i + 1][j] + 1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout&lt;&lt;dp[a.size()][b.size()]&lt;&lt;endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最长单增子序列"><a href="#最长单增子序列" class="headerlink" title="最长单增子序列"></a>最长单增子序列</h4><h5 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h5><p>给出长度为N的数组，找出这个数组的最长递增子序列。(递增子序列是指，子序列的元素是递增的）<br>例如：5 1 6 8 2 4 5 10，最长递增子序列是1 2 4 5 10。<br>输入<br>第1行：1个数N，N为序列的长度(2 &lt;= N &lt;= 50000)<br>第2 - N + 1行：每行1个数，对应序列的元素(-10^9 &lt;= S[i] &lt;= 10^9)<br>输出<br>输出最长递增子序列的长度。<br>输入示例<br>8<br>5<br>1<br>6<br>8<br>2<br>4<br>5<br>10<br>输出示例<br>5</p>
<h5 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;climits&gt;</div><div class="line">using namespace std;</div><div class="line">/**</div><div class="line"> * maxs[x] 中记录了目前单调子序列中长度为x的所有子序列中，最后一个元素的最小值。</div><div class="line"> * 比如当然有两个单调子序列长度为2: 1 3; 1 4。maxs[2] = 3</div><div class="line"> * 代表了最优情况，因为元素越小继续延伸的潜力越大</div><div class="line"> */</div><div class="line">void updateMaxArray(vector&lt;int&gt; &amp;maxs, int newNum)</div><div class="line">&#123;</div><div class="line">    int temp = 0;</div><div class="line">    for (int left = 0, right = maxs.size() - 1, mid = left + (right - left) / 2; left &lt;= right;) &#123;</div><div class="line">        if (maxs[mid] &lt; newNum) &#123;</div><div class="line">            temp = mid;</div><div class="line">            left = mid + 1;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            right = mid - 1;</div><div class="line">        &#125;</div><div class="line">        mid = left + (right - left) / 2;</div><div class="line">    &#125;</div><div class="line">    if (temp != maxs.size() - 1) &#123;</div><div class="line">        maxs[temp + 1] = newNum;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        maxs.insert(maxs.begin() + temp + 1, newNum);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int n;</div><div class="line">    cin &gt;&gt; n;</div><div class="line">    int cur;</div><div class="line">    vector&lt;int&gt; maxs(1, INT_MIN);</div><div class="line">    for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">        cin &gt;&gt; cur;</div><div class="line">        updateMaxArray(maxs, cur);</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; (maxs.size() - 1) &lt;&lt; endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h4><h5 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h5><p>在N件物品取出若干件放在容量为W的背包里，每件物品的体积为W1，W2……Wn（Wi为整数），与之相对应的价值为P1,P2……Pn（Pi为整数）。求背包能够容纳的最大价值。<br>输入<br>第1行，2个整数，N和W中间用空格隔开。N为物品的数量，W为背包的容量。(1 &lt;= N &lt;= 100，1 &lt;= W &lt;= 10000)<br>第2 - N + 1行，每行2个整数，Wi和Pi，分别是物品的体积和物品的价值。(1 &lt;= Wi, Pi &lt;= 10000)<br>输出<br>输出可以容纳的最大价值。<br>输入示例<br>3 6<br>2 5<br>3 8<br>4 9<br>输出示例<br>14<br>示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">using namespace std;</div><div class="line">int dp[101][10001];</div><div class="line">/**</div><div class="line"> * dp[i][j] -&gt; 在前个物品中任意选取，容量不超过j的物品最大价值</div><div class="line"> * dp[i][j] = dp[i-1][j] 第i个物品的重量大于j</div><div class="line"> * dp[i][j] = max(dp[i-1][j],dp[i-1][j-w[i]] + p[i]) 否则</div><div class="line"> */</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int n,m;</div><div class="line">    cin &gt;&gt; n &gt;&gt; m;</div><div class="line">    vector&lt;int&gt; w(n + 1);</div><div class="line">    vector&lt;int&gt; p(n + 1);</div><div class="line">    for (int i = 1; i &lt;= n; i++) &#123;</div><div class="line">        cin &gt;&gt; w[i] &gt;&gt; p[i];</div><div class="line">    &#125;</div><div class="line">    for(int i = 1; i &lt;= n;i++)&#123;</div><div class="line">        for(int j = 1;j &lt;= m;j++)&#123;</div><div class="line">            if(w[i] &lt;= j)&#123;</div><div class="line">                dp[i][j] = max(dp[i - 1][j],dp[i - 1][j - w[i]] + p[i]);</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                dp[i][j] = dp[i - 1][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; dp[n][m] &lt;&lt; endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="正整数分组"><a href="#正整数分组" class="headerlink" title="正整数分组"></a>正整数分组</h4><h5 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h5><p>将一堆正整数分为2组，要求2组的和相差最小。<br>例如：1 2 3 4 5，将1 2 4分为1组，3 5分为1组，两组和相差1，是所有方案中相差最少的。<br>输入<br>第1行：一个数N，N为正整数的数量。<br>第2 - N+1行，N个正整数。<br>(N &lt;= 100, 所有正整数的和 &lt;= 10000)<br>输出<br>输出这个最小差<br>输入示例<br>5<br>1<br>2<br>3<br>4<br>5<br>输出示例<br>1<br>示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">using namespace std;</div><div class="line">/**</div><div class="line"> * f[i][j] -&gt; 在前i个数中选取一些数，总和不超过j的最大值</div><div class="line"> * f[i][j] = f[i-1][j]  第i个数大于j</div><div class="line"> * f[i][j] = max(f[i - 1][j],f[i - 1][j - nums[i - 1]] + nums[i - 1]) 否则</div><div class="line"> */</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int n;</div><div class="line">    cin &gt;&gt; n;</div><div class="line">    vector&lt;int&gt; nums(n);</div><div class="line">    int total = 0;</div><div class="line">    for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">        cin &gt;&gt; nums[i];</div><div class="line">        total = total+ nums[i];</div><div class="line">    &#125;</div><div class="line">    int half = total / 2;</div><div class="line">    vector&lt;vector&lt;int&gt; &gt; f(n + 1);</div><div class="line">    for (int i = 0; i &lt;= n; i++) &#123;</div><div class="line">        vector&lt;int&gt; temp(half + 1);</div><div class="line">        f[i] = temp;</div><div class="line">    &#125;</div><div class="line">    vector&lt;vector&lt;int&gt; &gt;::iterator fIter = f.begin();</div><div class="line">    fill((*fIter).begin(),(*fIter).end(),0);</div><div class="line">    for(int i = 1; i &lt;= n;i++)&#123;</div><div class="line">        for(int j = 1; j &lt;= half;j++)&#123;</div><div class="line">            if(nums[i - 1] &gt; j)&#123;</div><div class="line">                f[i][j] = f[i - 1][j];</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                f[i][j] = max(f[i - 1][j],f[i - 1][j - nums[i - 1]] + nums[i - 1]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; (total - 2*f[n][half])  &lt;&lt; endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="进阶题目"><a href="#进阶题目" class="headerlink" title="进阶题目"></a>进阶题目</h3><h4 id="最大子矩阵和"><a href="#最大子矩阵和" class="headerlink" title="最大子矩阵和"></a>最大子矩阵和</h4><p>问题描述<br>一个MN的矩阵，找到此矩阵的一个子矩阵，并且这个子矩阵的元素的和是最大的，输出这个最大的值。<br>例如：33的矩阵：<br>-1 3 -1<br>2 -1 3<br>-3 1 2<br>和最大的子矩阵是：<br>3 -1<br>-1 3<br>1 2<br>输入<br>第1行：M和N，中间用空格隔开（2 &lt;= M,N &lt;= 500)。<br>第2 - N + 1行：矩阵中的元素，每行M个数，中间用空格隔开。(-10^9 &lt;= M[i] &lt;= 10^9)<br>输出<br>输出和的最大值。如果所有数都是负数，就输出0。<br>输入示例<br>3 3<br>-1 3 -1<br>2 -1 3<br>-3 1 2<br>输出示例<br>7<br>代码说明<br>这道题目与基础题目中的最大子段和有些像，但本题是二维空间。但可以通过一些手段将其转化为一维空间。<br>设想，整个矩阵有3行，最大子矩阵可能的行数1/2/3; 矩阵数组为a[i][j]:<br>矩阵行数为1：分别求第一行、第二行、第三行的最大子段和max1,max2,max3,那么max(max1,max2,max3)即为最大子矩阵和<br>矩阵行数为2：最大子矩阵出现在第1-2行或第2-3行，只有这两种情况。如果有一个一维数组total:<br>total[k] = a[0][k] + a[1][k] total最大字段和max1<br>total[k] = a[1][k] + a[2][k] total最大字段和max2<br>那么max = max(max1,max2)即为最大子矩阵和<br>矩阵行数为3：最大子矩阵出现在第1-3行，只有一种情况。如果有一个一维数组total:<br>total[k] = a[0][k] + a[1][k] + a[2][k] total最大字段和max<br>那么max即为最大子矩阵和<br>通过这个例子是不是可以感受到一些启发？将 第i行到第j行压缩为一行(求和),即可以转化为求解最大子段和,此时可获得行数为(j-i+1)时的最大子矩阵和<br>假设n*m的矩阵的最大子矩阵的行数为i(1&lt;=i&lt;=n) 如果有一个一维数组total:<br>total[k] = a[0][k] + … +a[i-1][k] total最大字段和max1<br>…<br>total[k] = a[n-i][k] + … + a[n - 1][k] total最大字段和max..<br>那么max = max(max1,…)即为最大子矩阵和<br>示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;climits&gt;</div><div class="line">using namespace std;</div><div class="line">/**</div><div class="line">* 求最大字段和</div><div class="line">*/</div><div class="line">int maxSubSequence(vector&lt;int&gt;&amp; arr) &#123;</div><div class="line">    if (arr.size() &gt; 0) &#123;</div><div class="line">        int maxSub = arr[0];</div><div class="line">        int temp = arr[0];</div><div class="line">        for (int i = 1; i &lt; arr.size(); i++) &#123;</div><div class="line">            if (temp &gt; 0) &#123;</div><div class="line">                temp = temp + arr[i];</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                temp = arr[i];</div><div class="line">            &#125;</div><div class="line">            maxSub = max(maxSub, temp);</div><div class="line">        &#125;</div><div class="line">        return maxSub;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int m, n;</div><div class="line">    cin &gt;&gt; m &gt;&gt; n;</div><div class="line">    //初始化</div><div class="line">    vector&lt;vector&lt;int&gt; &gt; nums(n);</div><div class="line">    // total[i][k] = nums[0][k] + ... + nums[i][k];</div><div class="line">    // 所以nums[i..j][k] = total[j][k]-total[i - 1][k]</div><div class="line">    vector&lt;vector&lt;int&gt; &gt; total(n);</div><div class="line">    for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">        vector&lt;int&gt; row(m);</div><div class="line">        vector&lt;int&gt; totalRow(m);</div><div class="line">        if (i == 0) &#123;</div><div class="line">            for (int j = 0; j &lt; m; j++) &#123;</div><div class="line">                cin &gt;&gt; row[j];</div><div class="line">                totalRow[j] = row[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            for (int j = 0; j &lt; m; j++) &#123;</div><div class="line">                cin &gt;&gt; row[j];</div><div class="line">                totalRow[j] = total[i - 1][j] + row[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        nums[i] = row;</div><div class="line">        total[i] = totalRow;</div><div class="line">    &#125;</div><div class="line">    int maxSub = INT_MIN;</div><div class="line">    // 最大子矩阵行数为 i</div><div class="line">    vector&lt;int&gt; result(m);</div><div class="line">    for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">        for (int j = i; j &lt; n; j++) &#123;</div><div class="line">            for (int k = 0; k &lt; m; k++) &#123;</div><div class="line">                if (i == 0) &#123;</div><div class="line">                    result[k] = total[j][k];</div><div class="line">                &#125;</div><div class="line">                else &#123;</div><div class="line">                    result[k] = total[j][k] - total[i - 1][k];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            int maxTemp = maxSubSequence(result);</div><div class="line">            if (maxTemp &gt; maxSub) &#123;</div><div class="line">                maxSub = maxTemp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; maxSub &lt;&lt; endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考<a href="http://blog.csdn.net/beiyeqingteng/article/details/7056687" target="_blank" rel="external">http://blog.csdn.net/beiyeqingteng/article/details/7056687</a></p>
</blockquote>
<h4 id="循环数组最大字段和"><a href="#循环数组最大字段和" class="headerlink" title="循环数组最大字段和"></a>循环数组最大字段和</h4><h5 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h5><p>N个整数组成的循环序列a[1],a[2],a[3],…,a[n]，求该序列如a[i]+a[i+1]+…+a[j]的连续的子段和的最大值（循环序列是指n个数围成一个圈，因此需要考虑a[n-1],a[n],a[1],a[2]这样的序列）。当所给的整数均为负数时和为0。<br>例如：-2,11,-4,13,-5,-2，和最大的子段为：11,-4,13。和为20。<br>输入<br>第1行：整数序列的长度N（2 &lt;= N &lt;= 50000)<br>第2 - N+1行：N个整数 (-10^9 &lt;= S[i] &lt;= 10^9)<br>输出<br>输出循环数组的最大子段和。<br>输入示例<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>6<br>-2<br>11<br>-4<br>13<br>-5<br>-2<br>输出示例<br>1<br>20<br>代码说明<br>如果最大字段和不是跨越数组头尾的情况，即为普通的最大字段和求解问题。<br>如果最大子段和跨越数组头尾，即 arr[j…n-1] + arr[0…i];易得子段arr[i+1…j-1] 为最小子段和，这种情况也就可以转化为 total[0…n-1] - minSubSequence<br>二者取max即为循环数组最大字段和<br>示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;climits&gt;</div><div class="line">using namespace std;</div><div class="line">typedef long long ll;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int n;</div><div class="line">    cin &gt;&gt;n;</div><div class="line">    ll cur,preMax,preMin;</div><div class="line">    cin &gt;&gt; preMax;</div><div class="line">    ll total = preMax;</div><div class="line">    ll maxSub = preMax;</div><div class="line">    ll minSub = preMax;</div><div class="line">    preMin = preMax;</div><div class="line">    for(int i = 1;i &lt; n;i++)&#123;</div><div class="line">        cin &gt;&gt; cur;</div><div class="line">        total = total + cur;</div><div class="line">        if(preMax &gt; 0)&#123;</div><div class="line">            preMax = preMax + cur;</div><div class="line">        &#125;</div><div class="line">        else&#123;</div><div class="line">            preMax = cur;</div><div class="line">        &#125;</div><div class="line">        if(preMin &lt; 0)&#123;</div><div class="line">            preMin = preMin + cur;</div><div class="line">        &#125;</div><div class="line">        else&#123;</div><div class="line">            preMin = cur;</div><div class="line">        &#125;</div><div class="line">        maxSub = max(maxSub,preMax);</div><div class="line">        minSub = min(minSub,preMin);</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; max(maxSub,total - minSub) &lt;&lt; endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h4><h5 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h5><p>有N种物品，每种物品的数量为C1，C2……Cn。从中任选若干件放在容量为W的背包里，每种物品的体积为W1，W2……Wn（Wi为整数），与之相对应的价值为P1,P2……Pn（Pi为整数）。求背包能够容纳的最大价值。<br>输入<br>第1行，2个整数，N和W中间用空格隔开。N为物品的种类，W为背包的容量。(1 &lt;= N &lt;= 100，1 &lt;= W &lt;= 50000)<br>第2 - N + 1行，每行3个整数，Wi，Pi和Ci分别是物品体积、价值和数量。(1 &lt;= Wi, Pi &lt;= 10000， 1 &lt;= Ci &lt;= 200)<br>输出<br>输出可以容纳的最大价值。<br>输入示例<br>3 6<br>2 2 5<br>3 3 8<br>1 4 1<br>输出示例<br>9</p>
<h5 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h5><p>将多重背包分解为0-1背包<br>利用二进制的思想，任何一个数都可以由2的幂次表示：N = 1 + 2 + 4 + … + 2^i + (left);<br>即每个物品都可以被分解。假设物品的数量为14,则从14个物品中任取N个物品都可以转化为由以下物品组合(以下物品在每次组合中只能取一次)<br>1^0 重量是Wi，体积是Vi<br>2^2 重量是2 Wi , 体积是2 Vi<br>2^3 重量是4 Wi , 体积是4 Vi<br>14 - (1+2+4) 重量是7 Wi , 体积是7 Vi<br>分解完成后，再利用0-1背包思路求解</p>
<h5 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">using namespace std;</div><div class="line">typedef struct &#123;</div><div class="line">    int w;</div><div class="line">    int p;</div><div class="line">&#125; Thing;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int n,w;</div><div class="line">    cin &gt;&gt; n &gt;&gt; w;</div><div class="line">    </div><div class="line">    //分解</div><div class="line">    vector&lt;Thing&gt; things;</div><div class="line">    for(int i = 1; i &lt;= n;i++)&#123;</div><div class="line">        Thing thing;</div><div class="line">        cin &gt;&gt; thing.w &gt;&gt; thing.p;</div><div class="line">        int num;</div><div class="line">        cin &gt;&gt; num;</div><div class="line">        for(int k = 1; k &lt;= num;k &lt;&lt;= 1)&#123;</div><div class="line">            Thing temp;</div><div class="line">            temp.w = k * thing.w;</div><div class="line">            temp.p = k * thing.p;</div><div class="line">            num -= k;</div><div class="line">            things.push_back(temp);</div><div class="line">        &#125;</div><div class="line">        if(num &gt; 0)&#123;</div><div class="line">            thing.w = num * thing.w;</div><div class="line">            thing.p = num * thing.p;</div><div class="line">            things.push_back(thing);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //0-1背包</div><div class="line">    vector&lt;vector&lt;long long&gt; &gt; dp(things.size() + 1, vector&lt;long long&gt;(w + 1,0));</div><div class="line">    for(int i = 0; i &lt; things.size();i++)&#123;</div><div class="line">        for(int j = 0; j &lt;= w;j++)&#123;</div><div class="line">            if(j &lt; things[i].w)&#123;</div><div class="line">                dp[i + 1][j] = dp[i][j];</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                dp[i + 1][j] = max(dp[i][j],dp[i][j - things[i].w] + things[i].p);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; dp[things.size()][w]&lt;&lt;endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态规划——由实践总结经验&lt;/p&gt;
&lt;h3 id=&quot;文章目录&quot;&gt;&lt;a href=&quot;#文章目录&quot; class=&quot;headerlink&quot; title=&quot;文章目录&quot;&gt;&lt;/a&gt;文章目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基础题目&lt;ul&gt;
&lt;li&gt;矩阵取数问题&lt;/li&gt;
&lt;li&gt;最大子段和&lt;
    
    </summary>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>大学|记一次比赛</title>
    <link href="http://yoursite.com/2017/12/09/%E5%A4%A7%E5%AD%A6-%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%AF%94%E8%B5%9B/"/>
    <id>http://yoursite.com/2017/12/09/大学-记一次比赛/</id>
    <published>2017-12-09T00:10:32.000Z</published>
    <updated>2017-12-08T16:47:59.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的第一次比赛"><a href="#我的第一次比赛" class="headerlink" title="我的第一次比赛"></a>我的第一次比赛</h3><p>说起这次比赛，也挺好玩，自己先前根本不知道是怎么回事，江哥先找到我说想一起组队参加比赛，我也答应了。这是自己在大学第一个参加的比赛，是学校联想俱乐部举办的，比赛内容就是参赛队员想一个产品，有创意的产品。</p>
<p>然后,我们就开始讨论要搞什么，最初是说搞教育那一块的，但觉得太low了，就换成了旅游出行的个性化推荐，创新点主要是能实时通过天气、景点人流、交通情况等因素，实时为旅客修改旅游计划，为用户提供最佳的旅游路线。</p>
<p>最开始是初赛，需要做ppt和上台答辩，说白了，这个比赛就是看谁弄得ppt好看和谁的忽悠能力强就能得奖。ppt是黄智威弄的，还需要一个产品的原型，然后自己是弄原型，其实也就是弄个首页，都不是事。还是黄智威拼，弄ppt到半夜。答辩时黄智威和黄卫江上去讲的，毫无悬念，我们进入了决赛。</p>
<p>初赛后不久是决赛，ppt是用的初赛的，但是原型就不能用初赛的了，需要搞完善一点的，不过这次不是我搞的了，是黄卫江搞的，自己有点惭愧啊，就是个打酱油的。决赛是黄智威自己上去答辩，黄卫江上课去了，我坐在台下给黄智威录像。很幸运，决赛我们的了二等奖。其中，还有一个有趣的环节呢，那就是刷票啊，不知道黄智威怎么搞的，花钱加别人刷票，这小子可以的。</p>
<p>本以为我们能够进决赛的，我们还为此决定搞个半产品出来呢。我们三个专门去蓝杰向胡哥请教了一番，还想好了下一步的分工了。不曾想，回宿舍后，通知说没有进省赛。</p>
<p>这就是自己第一次的比赛经历啦，虽然不精彩，但是自己也认识到一个团队需要不同的人才能做成一件事。就像黄智威，能说，会忽悠；黄卫江，能为了完成任务，熬上几夜；我自己呢，可能在技术这一块擅长一点，所以前期也没做什么工作，是要在做产品的时候出力的。</p>
<p><img src="/images/mmexport1512485485927.jpg" alt="enter description here" title="mmexport1512485485927"></p>
<p><img src="/images/mmexport1512658490870.jpg" alt="enter description here" title="mmexport1512658490870"></p>
<p><img src="/images/mmexport1512658490870.jpg" alt="enter description here" title="mmexport1512658490870"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我的第一次比赛&quot;&gt;&lt;a href=&quot;#我的第一次比赛&quot; class=&quot;headerlink&quot; title=&quot;我的第一次比赛&quot;&gt;&lt;/a&gt;我的第一次比赛&lt;/h3&gt;&lt;p&gt;说起这次比赛，也挺好玩，自己先前根本不知道是怎么回事，江哥先找到我说想一起组队参加比赛，我也答应了。
    
    </summary>
    
    
      <category term="大学" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>PHP|文件上传</title>
    <link href="http://yoursite.com/2017/12/03/PHP-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2017/12/03/PHP-文件上传/</id>
    <published>2017-12-02T23:30:13.000Z</published>
    <updated>2017-12-02T16:28:11.224Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这几天，在忙弦歌知湖改版的事情，虽然不是很难，但是bug还是层出不穷，有很多细节的东西没有考虑到，最坑的是投稿的功能了，需要上传文件，同时，自己也是第一次处理文件上传，以前都是弄一些表单数据，没什么细节需要处理，但文件就不同了，要考虑大小、类型、存的位置…</p>
<h3 id="一些干货"><a href="#一些干货" class="headerlink" title="一些干货"></a>一些干货</h3><h4 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h4><p>来一个前端测试的表单：upload.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;form action=&quot;upload.php&quot; method=&quot;post&quot; multipart=&quot;&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">        &lt;input type=&quot;file&quot; name=&quot;img&quot; multiple&gt;</div><div class="line">        &lt;input type=&quot;submit&quot;&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>再来一个处理文件的php文件，upload.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$img = $_FILES[&apos;img&apos;];</div><div class="line">var_dump($img);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>先看看我们得到的是一个什么东西吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">array (size=5)</div><div class="line">  &apos;name&apos; =&gt; string &apos;父亲1.png&apos; (length=11)</div><div class="line">  &apos;type&apos; =&gt; string &apos;image/png&apos; (length=9)</div><div class="line">  &apos;tmp_name&apos; =&gt; string &apos;D:\Wampserver3.0.6\wamp\tmp\php444D.tmp&apos; (length=39)</div><div class="line">  &apos;error&apos; =&gt; int 0</div><div class="line">  &apos;size&apos; =&gt; int 186938</div></pre></td></tr></table></figure></p>
<p>  我们得到了一个数组，包含了许多信息，比如文件名、文件类型、文件大小，同时还有临时存储的位置、是否有错误，如果 ‘error’ 不等于0，就说明发生错误了，我们就不能接收了。那我们如何将这个文件保存到我们想要保存的地方呢？那就用 ove_uploaded_file() 函数吧。</p>
<p>接收的PHP代码是这样写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$img = $_FILES[&apos;img&apos;];</div><div class="line">var_dump($img);</div><div class="line"></div><div class="line">$path = &apos;upload&apos;;  </div><div class="line">$realName = time().&apos;jpg&apos;;</div><div class="line">$realPath = $path.&apos;/&apos;.$relaName;</div><div class="line">if(move_uploaded_file($img[&apos;temp_name&apos;]) ,$realPath )&#123;</div><div class="line">	echo &apos;上传成功&apos;;</div><div class="line">&#125;else&#123;</div><div class="line">	echo &apos;上传失败&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果我们的当前文件夹内有一个 upload的文件夹，这样写是没问题的，但是如果没有upload的文件夹呢？如果有个人删了这个文件夹呢？那岂不是完蛋了，所以我们首先要判断文件夹是否存在，如果不存在要先建立文件夹。还有一个问题，如果文件夹内已经有了相同文件名的文件呢？尽管我们用了time（）函数来为文件取名字，但是谁还没有背的时候呢？所以还是要判断一下文件是否存在，在执行 move_uploaded_file() 函数。</p>
<p>先说说创建文件夹吧，mkdir（）这个函数似乎只能建立一级文件夹，所以我们要建立多级文件夹的时候，就需要递归运行了，看看下面的递归建立文件夹的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//创建多级文件夹 $dirname = &apos;upload/image/exter&apos;;</div><div class="line">function mkdir_r($dirName, $rights=0777)&#123;</div><div class="line"></div><div class="line">    $dirs = explode(&apos;/&apos;, $dirName);</div><div class="line"></div><div class="line">    $dir=&apos;&apos;;</div><div class="line"></div><div class="line">    foreach ($dirs as $part) &#123;</div><div class="line"></div><div class="line">        $dir.=$part.&apos;/&apos;;</div><div class="line"></div><div class="line">        if (!is_dir($dir) &amp;&amp; strlen($dir)&gt;0)</div><div class="line"></div><div class="line">            mkdir($dir, $rights);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数的代码还是简单易懂的，就是传文件路径，逐级判断是否有此文件夹，没有就建立文件夹。</p>
<p>然后是判断文件是否存在，用file_exist()函数。</p>
<p>上面是最基本的考虑，如果还需要限制文件大小和文件的类型，可以根据得到的数组，进行判断。</p>
<p>这个是上传单个文件的，如果是多个文件呢？就像这样的表单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;form action=&quot;upload.php&quot; method=&quot;post&quot; multipart=&quot;&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">        &lt;input type=&quot;file&quot; name=&quot;img[]&quot; multiple&gt;</div><div class="line">        &lt;input type=&quot;submit&quot;&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>相信细心的你已经看出不同来了，现在的name变成img[] 了，也就是说能上传多张照片了。先不急，看看我们得到的是什么吧:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$img = $_FILES[&apos;img&apos;];</div><div class="line">var_dump($img);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>我们得到的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">array (size=5)</div><div class="line">  &apos;name&apos; =&gt; </div><div class="line">    array (size=3)</div><div class="line">      0 =&gt; string &apos;父亲1.png&apos; (length=11)</div><div class="line">      1 =&gt; string &apos;父亲2.png&apos; (length=11)</div><div class="line">      2 =&gt; string &apos;父亲3.png&apos; (length=11)</div><div class="line">  &apos;type&apos; =&gt; </div><div class="line">    array (size=3)</div><div class="line">      0 =&gt; string &apos;image/png&apos; (length=9)</div><div class="line">      1 =&gt; string &apos;image/png&apos; (length=9)</div><div class="line">      2 =&gt; string &apos;image/png&apos; (length=9)</div><div class="line">  &apos;tmp_name&apos; =&gt; </div><div class="line">    array (size=3)</div><div class="line">      0 =&gt; string &apos;D:\Wampserver3.0.6\wamp\tmp\php457E.tmp&apos; (length=39)</div><div class="line">      1 =&gt; string &apos;D:\Wampserver3.0.6\wamp\tmp\php457F.tmp&apos; (length=39)</div><div class="line">      2 =&gt; string &apos;D:\Wampserver3.0.6\wamp\tmp\php4580.tmp&apos; (length=39)</div><div class="line">  &apos;error&apos; =&gt; </div><div class="line">    array (size=3)</div><div class="line">      0 =&gt; int 0</div><div class="line">      1 =&gt; int 0</div><div class="line">      2 =&gt; int 0</div><div class="line">  &apos;size&apos; =&gt; </div><div class="line">    array (size=3)</div><div class="line">      0 =&gt; int 186938</div><div class="line">      1 =&gt; int 208693</div><div class="line">      2 =&gt; int 197557</div></pre></td></tr></table></figure></p>
<p>是这样的一个数组了，不知为何，总觉得这个数组不是我们想要的形式，我们想得到的是这样的一个数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">array (size=3)</div><div class="line">  0 =&gt; </div><div class="line">    array (size=5)</div><div class="line">      &apos;name&apos; =&gt; string &apos;父亲1.png&apos; (length=11)</div><div class="line">      &apos;type&apos; =&gt; string &apos;image/png&apos; (length=9)</div><div class="line">      &apos;tmp_name&apos; =&gt; string &apos;D:\Wampserver3.0.6\wamp\tmp\php1933.tmp&apos; (length=39)</div><div class="line">      &apos;error&apos; =&gt; int 0</div><div class="line">      &apos;size&apos; =&gt; int 186938</div><div class="line">  1 =&gt; </div><div class="line">    array (size=5)</div><div class="line">      &apos;name&apos; =&gt; string &apos;父亲2.png&apos; (length=11)</div><div class="line">      &apos;type&apos; =&gt; string &apos;image/png&apos; (length=9)</div><div class="line">      &apos;tmp_name&apos; =&gt; string &apos;D:\Wampserver3.0.6\wamp\tmp\php1944.tmp&apos; (length=39)</div><div class="line">      &apos;error&apos; =&gt; int 0</div><div class="line">      &apos;size&apos; =&gt; int 208693</div><div class="line">  2 =&gt; </div><div class="line">    array (size=5)</div><div class="line">      &apos;name&apos; =&gt; string &apos;父亲3.png&apos; (length=11)</div><div class="line">      &apos;type&apos; =&gt; string &apos;image/png&apos; (length=9)</div><div class="line">      &apos;tmp_name&apos; =&gt; string &apos;D:\Wampserver3.0.6\wamp\tmp\php1945.tmp&apos; (length=39)</div><div class="line">      &apos;error&apos; =&gt; int 0</div><div class="line">      &apos;size&apos; =&gt; int 197557</div></pre></td></tr></table></figure></p>
<p>如果是这样的形式的数组，那就清晰多了，那我们要怎么把之前形式的数组变成这样的呢？那就需要下面的函数了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/处理多文件上传</div><div class="line">function reArrayFiles($file)</div><div class="line">&#123;</div><div class="line">    $file_ary = array();</div><div class="line">    $file_count = count($file[&apos;name&apos;]);</div><div class="line">    $file_key = array_keys($file);</div><div class="line">    </div><div class="line">    for($i=0;$i&lt;$file_count;$i++)</div><div class="line">    &#123;</div><div class="line">        foreach($file_key as $val)</div><div class="line">        &#123;</div><div class="line">            $file_ary[$i][$val] = $file[$val][$i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return $file_ary;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过这个函数的整理，就能得到我们想要的形式的数组了，然后就变成了我们想要形式的数组啦。附上一个完整的upload.php代码吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;?php</div><div class="line"></div><div class="line">$img = $_FILES[&apos;img&apos;];</div><div class="line"></div><div class="line">if(!empty($img))</div><div class="line">&#123;</div><div class="line">    $img_desc = reArrayFiles($img);</div><div class="line">    </div><div class="line">    foreach($img_desc as $val)</div><div class="line">    &#123;</div><div class="line">        $newname = date(&apos;YmdHis&apos;,time()).mt_rand().&apos;.jpg&apos;;</div><div class="line">		$path = &apos;upload/image/exter&apos;;</div><div class="line">		if(!is_dir($path))&#123;</div><div class="line">			mkdir_r($path);</div><div class="line">		&#125;</div><div class="line">        move_uploaded_file($val[&apos;tmp_name&apos;],$path.&apos;/&apos;.$newname);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//创建多级文件夹 $dirname = &apos;upload/image/exter&apos;;</div><div class="line">function mkdir_r($dirName, $rights=0777)&#123;</div><div class="line"></div><div class="line">    $dirs = explode(&apos;/&apos;, $dirName);</div><div class="line"></div><div class="line">    $dir=&apos;&apos;;</div><div class="line"></div><div class="line">    foreach ($dirs as $part) &#123;</div><div class="line"></div><div class="line">        $dir.=$part.&apos;/&apos;;</div><div class="line"></div><div class="line">        if (!is_dir($dir) &amp;&amp; strlen($dir)&gt;0)</div><div class="line"></div><div class="line">            mkdir($dir, $rights);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//处理多文件上传</div><div class="line">function reArrayFiles($file)</div><div class="line">&#123;</div><div class="line">    $file_ary = array();</div><div class="line">    $file_count = count($file[&apos;name&apos;]);</div><div class="line">    $file_key = array_keys($file);</div><div class="line">    </div><div class="line">    for($i=0;$i&lt;$file_count;$i++)</div><div class="line">    &#123;</div><div class="line">        foreach($file_key as $val)</div><div class="line">        &#123;</div><div class="line">            $file_ary[$i][$val] = $file[$val][$i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return $file_ary;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h3><p>文件上传是很重要的，但需要处理的细节也有很多，所以需要小心处理、慎重处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这几天，在忙弦歌知湖改版的事情，虽然不是很难，但是bug还是层出不穷，有很多细节的东西没有考虑到，最坑的是投稿的功能了，需要上传文件，同时，
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>数据结构|队列</title>
    <link href="http://yoursite.com/2017/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2017/11/12/数据结构-队列/</id>
    <published>2017-11-11T23:36:59.000Z</published>
    <updated>2017-12-08T16:46:17.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="队列简介"><a href="#队列简介" class="headerlink" title="队列简介"></a>队列简介</h3><h4 id="队列的特点"><a href="#队列的特点" class="headerlink" title="队列的特点"></a>队列的特点</h4><p>队列 (Queue) 与栈一样，是一种线性存储结构，它具有如下特点： </p>
<ol>
<li>队列中的数据元素遵循 “先进先出”（First In First Out）的原则</li>
<li>在队尾添加元素，在队头删除元素</li>
</ol>
<p>简单点说，队列就像排队打饭一样，先来的先打饭，后来的在队尾后面排队，等前面的人打好，才轮到自己。</p>
<h4 id="队列的相关概念"><a href="#队列的相关概念" class="headerlink" title="队列的相关概念"></a>队列的相关概念</h4><ol>
<li>队头与队尾：允许元素插入的一端称为队尾，允许元素删除的一端称为队头</li>
<li>入队：队列的插入操作</li>
<li>出队：队列的删除操作</li>
</ol>
<p>例如，我们有一个存储整型元素的队列，我们依次入队：{ 1,2,3 }</p>
<p><img src="/images/610439-20160130151830318-592472607.png" alt="enter description here" title="610439-20160130151830318-592472607"></p>
<p>添加元素时，元素只能从队尾一端进入队列，也就是说2只能跟在1后面，3只能跟在2后面。</p>
<p>出队的顺序是这样的：</p>
<p><img src="/images/610439-20160130151820974-712348880.png" alt="enter description here" title="610439-20160130151820974-712348880"></p>
<p>元素只能从队首出队列，出队列的顺序为：1、2、3，与入队列时的顺序是一样的，这就是我们说的 “先进新出” 啦。</p>
<h4 id="队列的操作"><a href="#队列的操作" class="headerlink" title="队列的操作"></a>队列的操作</h4><p>队列通常提供的操作：</p>
<ol>
<li>入队：通常命名为push( );</li>
<li>出队：通常命名为pop( );</li>
<li>求队列中元素的个数</li>
<li>判断队列是否为空</li>
<li>获取队首元素</li>
</ol>
<h4 id="队列的存储结构"><a href="#队列的存储结构" class="headerlink" title="队列的存储结构"></a>队列的存储结构</h4><p>队列跟栈一样，都是一种特殊的线性结构，因此可以使用数组、链表作为底层的数据结构。</p>
<h3 id="基于数组的循环队列实现"><a href="#基于数组的循环队列实现" class="headerlink" title="基于数组的循环队列实现"></a>基于数组的循环队列实现</h3><p>以数组作为底层数据结构时，一般讲的队列为<strong>循环队列</strong>。这是因为队列在顺序存储上的不足：每次从数组头部删除元素（出队）后，需要将头部以后的所有元素往前移动一个位置，这是一个时间复杂度为O（n）的操作，代价挺大的。</p>
<p><img src="/images/610439-20160130152004193-1945216114.png" alt="enter description here" title="610439-20160130152004193-1945216114"></p>
<p>可能有人说，把队首标志往后移不就不用移动元素了吗？的确，但那样会造成数组空间的 “流失”。我们希望队列的插入与删除操作O(1)的时间复杂度，同时不会造成数组空间的浪费，我们应该使用循环队列。所谓的循环队列，可以把数组看成一个首尾相连的圆环，删除元素是将队首标志往后移动，添加元素是若数组尾部已经没有空间，则考虑数组首部的空间是否空闲，如果是，则在数组头部进行插入。</p>
<p><img src="/images/610439-20160130152048146-364086587.png" alt="enter description here" title="610439-20160130152048146-364086587"></p>
<p>那么问题来啦,我们怎么区别空队列和队列已满这两种状态呢？</p>
<ol>
<li>栈空：队首标志 = 队尾标志是，表示栈空，即红绿两个标志在图中重叠是为栈空。</li>
<li>栈满：队尾+1 = 队首时，表示栈空。图三最下面的队列极为一个满队列。尽管还有一个空位，但我们不存储元素。</li>
</ol>
<h4 id="循环队列的抽象数据类型"><a href="#循环队列的抽象数据类型" class="headerlink" title="循环队列的抽象数据类型"></a>循环队列的抽象数据类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">template &lt;typename T&gt;</div><div class="line">class LoopQueue</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    LoopQueue(int c = 10);</div><div class="line">    ~LoopQueue();</div><div class="line">public:</div><div class="line">    bool isEmpty();        //队列的判空</div><div class="line">    int size();            //队列的大小</div><div class="line">    bool push(T t);        //入队列</div><div class="line">    bool pop();            //出队列</div><div class="line">    T front();            //队首元素</div><div class="line"> </div><div class="line">private:</div><div class="line">    int capacity;</div><div class="line">    int begin;</div><div class="line">    int end;</div><div class="line">    T*  queue;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ol>
<li>begin：队首标志</li>
<li>end：队尾标志</li>
<li>c\apacity：数组容量</li>
<li>queue：数组</li>
</ol>
<h4 id="队列的具体实现"><a href="#队列的具体实现" class="headerlink" title="队列的具体实现"></a>队列的具体实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">template&lt;typename T&gt;</div><div class="line">LoopQueue&lt;T&gt;::LoopQueue(int c = 10)</div><div class="line">: capacity(c), begin(0), end(0), queue(nullptr)</div><div class="line">&#123;</div><div class="line">    queue = new T[capacity];</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">template&lt;typename T&gt;</div><div class="line">LoopQueue&lt;T&gt;::~LoopQueue()</div><div class="line">&#123;</div><div class="line">    delete[]queue;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">template &lt;typename T&gt;</div><div class="line">bool LoopQueue&lt;T&gt;::isEmpty()</div><div class="line">&#123;</div><div class="line">    if (begin == end)</div><div class="line">        return true;</div><div class="line">    return false;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">template&lt;typename T&gt;</div><div class="line">int LoopQueue&lt;T&gt;::size()</div><div class="line">&#123;</div><div class="line">    return (end-begin+capacity)%capacity; //计算队列长度</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">template&lt;typename T&gt;</div><div class="line">bool LoopQueue&lt;T&gt;::push(T t)</div><div class="line">&#123;</div><div class="line">    if (end + 1 % capacity == begin) //判断队列是否已满</div><div class="line">    &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    queue[end] = t;</div><div class="line">    end = (end + 1) % capacity;</div><div class="line">    return true;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">template &lt;typename T&gt;</div><div class="line">bool LoopQueue&lt;T&gt;::pop()</div><div class="line">&#123;</div><div class="line">    if (end == begin) //判断队列是否为空</div><div class="line">    &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    begin = (begin + 1) % capacity;</div><div class="line">    return true;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">template &lt;typename T&gt;</div><div class="line">T LoopQueue&lt;T&gt;::front()</div><div class="line">&#123;</div><div class="line">    if (end == begin)</div><div class="line">    &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    return queue[begin];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="基于链表的队列实现"><a href="#基于链表的队列实现" class="headerlink" title="基于链表的队列实现"></a>基于链表的队列实现</h3><p>链队列是基于链表实现的队列，它不存在数组 O(n) 的元素移动问题或空间浪费问题。我们所要确定的就是链表那头做队首，那头做队尾。考虑到链表的特点，以链表头部作为队首，尾部作为队尾是最适合的。由于插入是在尾部，所以存储一个指向队尾的指针，可以节省遍历找队尾的时间，方便从链表尾部插入数据；使用带头节点的链表，方便从链表头删除元素。</p>
<p><img src="/images/610439-20160130152133068-1288144578.png" alt="enter description here" title="610439-20160130152133068-1288144578"></p>
<h4 id="链表节点"><a href="#链表节点" class="headerlink" title="链表节点"></a>链表节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">template&lt;typename T&gt;</div><div class="line">struct Node</div><div class="line">&#123;</div><div class="line">    Node(T t) :value(t), next(nullptr)&#123;&#125;</div><div class="line">    Node() = default;</div><div class="line"> </div><div class="line">    T value;</div><div class="line">    Node&lt;T&gt; * next;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ol>
<li>vaule : 链表节点的值</li>
<li>next : 指针，指向下一个节点</li>
</ol>
<h4 id="队列的抽象数据类型"><a href="#队列的抽象数据类型" class="headerlink" title="队列的抽象数据类型"></a>队列的抽象数据类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">template&lt;typename T&gt;</div><div class="line">class LinkQueue</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    LinkQueue();</div><div class="line">    ~LinkQueue();</div><div class="line"> </div><div class="line">    bool isEmpty();</div><div class="line">    int size();</div><div class="line">    bool pop();</div><div class="line">    void push(T t);</div><div class="line">    T front();</div><div class="line"> </div><div class="line">private:</div><div class="line">    Node&lt;T&gt;* phead;</div><div class="line">    Node&lt;T&gt;* pend;</div><div class="line">    int count;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="队列的具体实现-1"><a href="#队列的具体实现-1" class="headerlink" title="队列的具体实现"></a>队列的具体实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">template&lt;typename T&gt;</div><div class="line">LinkQueue&lt;T&gt;::LinkQueue()</div><div class="line">    :phead(nullptr),pend(nullptr),count(0)</div><div class="line">&#123;</div><div class="line">    phead = new Node&lt;T&gt;();</div><div class="line">    pend = phead;</div><div class="line">    count = 0;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">template &lt;typename T&gt;</div><div class="line">LinkQueue&lt;T&gt;::~LinkQueue()</div><div class="line">&#123;</div><div class="line">    while (phead-&gt;next != nullptr)</div><div class="line">    &#123;</div><div class="line">        Node&lt;T&gt; * pnode = phead;</div><div class="line">        phead = phead-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">template &lt;typename T&gt;</div><div class="line">bool LinkQueue&lt;T&gt;:: isEmpty()</div><div class="line">&#123;</div><div class="line">    return count==0;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">template &lt;typename T&gt;</div><div class="line">int LinkQueue&lt;T&gt;::size()</div><div class="line">&#123;</div><div class="line">    return count;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">//在队尾插入</div><div class="line">template &lt;typename T&gt;</div><div class="line">void LinkQueue&lt;T&gt;::push(T t)</div><div class="line">&#123;</div><div class="line">    Node&lt;T&gt;* pnode = new Node&lt;T&gt;(t);</div><div class="line">    pend-&gt;next = pnode;</div><div class="line">    pend = pnode;</div><div class="line">    count++;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">//在队首弹出</div><div class="line">template &lt;typename T&gt;</div><div class="line">bool LinkQueue&lt;T&gt;::pop()</div><div class="line">&#123;</div><div class="line">    if (count == 0)</div><div class="line">        return false;</div><div class="line">    Node&lt;T&gt;* pnode = phead-&gt;next;</div><div class="line">    phead-&gt;next = phead-&gt;next-&gt;next;</div><div class="line">    delete pnode;</div><div class="line">    count--;</div><div class="line">    return true;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">//获取队首元素</div><div class="line">template&lt;typename T&gt;</div><div class="line">T LinkQueue&lt;T&gt;::front()</div><div class="line">&#123;</div><div class="line">    return phead-&gt;next-&gt;value;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;队列简介&quot;&gt;&lt;a href=&quot;#队列简介&quot; class=&quot;headerlink&quot; title=&quot;队列简介&quot;&gt;&lt;/a&gt;队列简介&lt;/h3&gt;&lt;h4 id=&quot;队列的特点&quot;&gt;&lt;a href=&quot;#队列的特点&quot; class=&quot;headerlink&quot; title=&quot;队列的特点&quot;&gt;
    
    </summary>
    
      <category term="DataStruct" scheme="http://yoursite.com/categories/DataStruct/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构|栈</title>
    <link href="http://yoursite.com/2017/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
    <id>http://yoursite.com/2017/11/11/数据结构-栈/</id>
    <published>2017-11-11T00:30:21.000Z</published>
    <updated>2017-12-08T16:45:54.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="栈的简介"><a href="#栈的简介" class="headerlink" title="栈的简介"></a>栈的简介</h3><h4 id="栈的特点"><a href="#栈的特点" class="headerlink" title="栈的特点"></a>栈的特点</h4><p>栈（Stack）是一种特殊的线性存储结构，它具有一下特点：</p>
<ol>
<li>栈中的数据元素遵守 “先进后出(First In Last Out)”的yuanze</li>
<li>限定只能在栈顶进行插入和删除操作</li>
</ol>
<h4 id="栈的相关概念"><a href="#栈的相关概念" class="headerlink" title="栈的相关概念"></a>栈的相关概念</h4><ol>
<li>栈顶与栈底：允许元素插入与删除的一端称为栈顶，另一端称为栈底。</li>
<li>压栈：栈的插入操作，叫做进栈，也称压栈、入栈</li>
<li>弹栈：栈的删除操作，也叫做出栈</li>
</ol>
<p>例如我们有一个存储整型元素的栈，我们依次压出：｛1，2，3｝</p>
<p><img src="/images/610439-20160130013806989-121668995.png" alt="enter description here" title="610439-20160130013806989-121668995"></p>
<p>在压栈的过程中，栈顶的位置一直 “向上 ” 移动，而栈底是固定不变的，也就是说我们只在线性表的一端执行操作。</p>
<p>如果我们要把栈中的元素弹出来：</p>
<p><img src="/images/610439-20160130013814661-295746330.png" alt="enter description here" title="610439-20160130013814661-295746330"></p>
<p>出栈的顺序为 3、2、1 ，顺序与入栈时相反，这也就是栈的特点之一：先入后出。弹栈过程中，栈顶的位置一直在“向下移动”，而栈底一直保持不变。</p>
<p>如果你玩过一种称为汉诺塔的益智玩具，你就会知道游戏中小圆盘的存取就是一种先进后出的顺序，一个圆柱就是一个栈：</p>
<p><img src="/images/610439-20160130013821489-1542512229.png" alt="enter description here" title="610439-20160130013821489-1542512229"></p>
<h4 id="栈的操作"><a href="#栈的操作" class="headerlink" title="栈的操作"></a>栈的操作</h4><p>栈的常用操作为：</p>
<ol>
<li>弹栈，通常命名为 pop()</li>
<li>压栈，通常命名为push()</li>
<li>求栈的大小</li>
<li>判断栈是否为空</li>
<li>获取栈顶的元素</li>
</ol>
<h4 id="栈的存储结构"><a href="#栈的存储结构" class="headerlink" title="栈的存储结构"></a>栈的存储结构</h4><p>前面有说过，栈是一种特殊的线性表，那栈的存储结构就跟线性表是一样的，可以用数组或链表作为底层实现了。</p>
<p>本文我们以数组和单链表作为底层数据结构实现栈。</p>
<h3 id="基于数组的栈实现"><a href="#基于数组的栈实现" class="headerlink" title="基于数组的栈实现"></a>基于数组的栈实现</h3><p>当一数组为底层结构时，通常一数组头作为栈底，数组头数组尾为栈顶的方向：</p>
<p><img src="/images/610439-20160130013928458-208656397.png" alt="enter description here" title="610439-20160130013928458-208656397"></p>
<h4 id="栈的抽象数据类型"><a href="#栈的抽象数据类型" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">template&lt;typename T&gt;</div><div class="line">class ArrayStack</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    ArrayStack(int s = 10);    //默认的栈容量为10</div><div class="line">    ~ArrayStack();</div><div class="line"> </div><div class="line">public:</div><div class="line">    T top();            //获取栈顶元素</div><div class="line">    void push(T t);        //压栈操作</div><div class="line">    T pop();            //弹栈操作</div><div class="line">    bool isEmpty();        //判空操作</div><div class="line">    int size();            //求栈的大小</div><div class="line"> </div><div class="line">private:</div><div class="line">    int count;            //栈的元素数量</div><div class="line">    int capacity;        //栈的容量</div><div class="line">    T * array;            //底层为数组</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ol>
<li>count 为栈的元素数量，capacity为栈的容量，count&lt;=capacity，当栈满的时候，count = capacity。</li>
<li>本实现中不支持栈的动态扩容，栈满的时候无法再插入元素。栈的容量在定义栈的时候就需要指定，默认的栈容量为10。</li>
</ol>
<h4 id="栈的具体实现"><a href="#栈的具体实现" class="headerlink" title="栈的具体实现"></a>栈的具体实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"> /*栈的判空操作*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">bool ArrayStack&lt;T&gt;::isEmpty()</div><div class="line">&#123;</div><div class="line">     return count == 0; //栈元素为0时为栈空</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*返回栈的大小*/</div><div class="line"> template &lt;typename  T&gt;</div><div class="line">int ArrayStack&lt;T&gt;::size()</div><div class="line">&#123;</div><div class="line">     return count;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*插入元素*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void ArrayStack&lt;T&gt;::push(T t)</div><div class="line">&#123;</div><div class="line">     if (count != capacity)    //先判断是否栈满</div><div class="line">     &#123;</div><div class="line">         array[count++] = t;   </div><div class="line">     &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*弹栈*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">T ArrayStack&lt;T&gt;::pop()</div><div class="line">&#123;</div><div class="line">     if (count != 0)    //先判断是否是空栈</div><div class="line">     &#123;</div><div class="line">         return array[--count];</div><div class="line">     &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*获取栈顶元素*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">T ArrayStack&lt;T&gt;::top()</div><div class="line">&#123;</div><div class="line">     if (count != 0)</div><div class="line">     &#123;</div><div class="line">         return array[count - 1];</div><div class="line">     &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="基于单链表的栈"><a href="#基于单链表的栈" class="headerlink" title="基于单链表的栈"></a>基于单链表的栈</h3><p>以链表为底层的数据结构时，以链表头为作为栈顶较为合适，这样方便节点的插入与删除。压栈产生的新节点将一直出现在链表的头部</p>
<p><img src="/images/610439-20160130013944943-399164407.png" alt="enter description here" title="610439-20160130013944943-399164407"></p>
<h4 id="链表节点"><a href="#链表节点" class="headerlink" title="链表节点"></a>链表节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/*链表节点结构*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">struct Node</div><div class="line">&#123;</div><div class="line">    Node(T t) :value(t), next(nullptr)&#123;&#125;;</div><div class="line">    Node() :next(nullptr)&#123;&#125;;</div><div class="line"> </div><div class="line">public:</div><div class="line">    T value;</div><div class="line">    Node&lt;T&gt;* next;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ol>
<li>value:栈中元素的值</li>
<li>next:链表节点指针，指向直接后继</li>
</ol>
<h4 id="栈的抽象数据类型-1"><a href="#栈的抽象数据类型-1" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">*栈的抽象数据结构*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">class LinkStack</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">     LinkStack();</div><div class="line">     ~LinkStack();</div><div class="line">public:</div><div class="line"> </div><div class="line">     bool isEmpty();</div><div class="line">     int size();</div><div class="line">     void push(T t);</div><div class="line">     T pop();</div><div class="line">     T top();</div><div class="line"> </div><div class="line">private:</div><div class="line"> </div><div class="line">     Node&lt;T&gt;* phead;</div><div class="line">     int count;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="栈的具体实现-1"><a href="#栈的具体实现-1" class="headerlink" title="栈的具体实现"></a>栈的具体实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">/*返回栈的大小*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">int LinkStack&lt;T&gt;::size()</div><div class="line">&#123;</div><div class="line">     return count;</div><div class="line">&#125;;</div><div class="line">/*栈的判空操作*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">bool LinkStack&lt;T&gt;::isEmpty()</div><div class="line">&#123;</div><div class="line">     return count == 0;</div><div class="line">&#125;;</div><div class="line">/*插入元素*/</div><div class="line">template&lt;typename T&gt;</div><div class="line">void LinkStack&lt;T&gt;::push(T t)</div><div class="line">&#123;</div><div class="line">     Node &lt;T&gt; *pnode = new  Node&lt;T&gt;(t);</div><div class="line">     pnode-&gt;next = phead-&gt;next;</div><div class="line">     phead-&gt;next = pnode;</div><div class="line">     count++;</div><div class="line">&#125;;</div><div class="line">/*弹栈*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">T LinkStack&lt;T&gt;::pop()</div><div class="line">&#123;</div><div class="line">     if (phead-&gt;next != nullptr) //栈空判断</div><div class="line">     &#123;</div><div class="line">         Node&lt;T&gt;* pdel = phead-&gt;next;</div><div class="line">         phead-&gt;next = phead-&gt;next-&gt;next;</div><div class="line">         T value = pdel-&gt;value;</div><div class="line">         delete pdel;</div><div class="line">         count--;</div><div class="line">         return value;</div><div class="line">     &#125;</div><div class="line">&#125;;</div><div class="line">/*获取栈顶元素*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">T LinkStack&lt;T&gt;::top()</div><div class="line">&#123;</div><div class="line">    if (phead-&gt;next!=nullptr)</div><div class="line">        return phead-&gt;next-&gt;value;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考 <a href="http://www.cnblogs.com/QG-whz/p/5170418.html" target="_blank" rel="external">http://www.cnblogs.com/QG-whz/p/5170418.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;栈的简介&quot;&gt;&lt;a href=&quot;#栈的简介&quot; class=&quot;headerlink&quot; title=&quot;栈的简介&quot;&gt;&lt;/a&gt;栈的简介&lt;/h3&gt;&lt;h4 id=&quot;栈的特点&quot;&gt;&lt;a href=&quot;#栈的特点&quot; class=&quot;headerlink&quot; title=&quot;栈的特点&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="DataStruct" scheme="http://yoursite.com/categories/DataStruct/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
