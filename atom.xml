<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>只为不凡而来</title>
  <subtitle>小智的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-25T15:01:22.824Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wuduozhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读书笔记|C陷阱与缺陷</title>
    <link href="http://yoursite.com/2018/04/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-C%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7/"/>
    <id>http://yoursite.com/2018/04/24/读书笔记-C陷阱与缺陷/</id>
    <published>2018-04-23T19:57:59.000Z</published>
    <updated>2018-04-25T15:01:22.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-导读"><a href="#0-导读" class="headerlink" title="0|导读"></a>0|导读</h2><p>程序设计错误实际上反映的是程序与程序员对该程序的“心智模式”两者的相异之处。</p>
<h2 id="1-词法陷阱"><a href="#1-词法陷阱" class="headerlink" title="1|词法陷阱"></a>1|词法陷阱</h2><p>第一章，将程序代码看成是有符号构成的字符序列，把自己想象成是c语言的“词法分析器”，看看相同的字符序列，在不同的上下文环境中，会发生那些有意思的事情。</p>
<h3 id="不同于"><a href="#不同于" class="headerlink" title="=不同于=="></a>=不同于==</h3><p>在c语言中，符号=作为赋值运算，符号==作为比较。由于这两个符号很相似，稍不留神就会犯错误，少一个 = 或者多一个 = ，都会造成错误。</p>
<p>当我们本意是作比较运算时，却无意中多敲了一个 = 号时，就发生了错误。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if(x = y) </div><div class="line">	break;</div></pre></td></tr></table></figure>
<p>本意是比较x与y,相等就break。而实际上是将y赋值给了x,然后检查该值是否为零，也就是y的值作为了判断的条件，不再是 x是否等于y为判断条件了。</p>
<p>需要注意的是，如果我们确实需要对变量进行赋值并检查该变量的新值是否为0时，请加括号。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if(x=y) </div><div class="line">	foo();</div><div class="line"></div><div class="line">请写成：</div><div class="line">if((x=y) != 0) </div><div class="line">	foo();</div></pre></td></tr></table></figure></p>
<p>这样的好处是程序的可读性强，同时避免犯错误。</p>
<p>当然，把比较赋值运算误写成比较运算，也会造成错误。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if((filedesc == open(argv[1],0)) &lt; 0)</div><div class="line">   error();</div></pre></td></tr></table></figure>
<p>本意是将函数open（）的返回值赋值给 filedesc ，然后比较filedesc 与 1 的值，判断函数是否执行成功。但现在变成了比较函数open()的返回值与变量filedesc，然后检查比较的结果是否小于0。实际的意思与本意有了很大的区别。</p>
<h3 id="和-不同于-和"><a href="#和-不同于-和" class="headerlink" title="$和|不同于$$和||"></a>$和|不同于$$和||</h3><p>这几个符号也是容易混淆的，要时刻记住 $和| 是算术符号，其作用是按位进行运算；$$和||是逻辑运算，其结果只能是 1 或 0 。</p>
<h3 id="词法分析中的“贪心发”"><a href="#词法分析中的“贪心发”" class="headerlink" title="词法分析中的“贪心发”"></a>词法分析中的“贪心发”</h3><p>c语言编译器理解构成程序的字符序列时，采取贪心规则：每一个符号应该包含尽可能多的字符。同时，需要注意，除了字符串与字符常量，符号的中间不能有空白（空格符、制表符、换行符）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a---b</div><div class="line">与表达式</div><div class="line">a -- - b </div><div class="line">的含义相同，而与</div><div class="line">a - -- b</div><div class="line">的含义不同</div></pre></td></tr></table></figure>
<p>还有要注意c语言中的注释符号 /* 。比如：</p>
<p><code>y = x/*p</code></p>
<p>本意是用x除以p指向的值，把所得的商赋值给 y ，但现在编译器将/<em> 匹配在了一起，理解成注释符号了，原意改变了。我们应该这样写：<br>`y = x/(</em>p)`</p>
<p>总的来说，要尽可能避免因编译器的“贪心法”匹配规则，把我们的程序理解成另一种意思。</p>
<h3 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h3><p>这主要讲的是编译器会把第一个字符是数字0的常量视为8进制数，而改变了我们原本像表示的意思。</p>
<h3 id="字符与字符串"><a href="#字符与字符串" class="headerlink" title="字符与字符串"></a>字符与字符串</h3><p>c语言中单引号与双引号的含义是不同的，这也是我们常犯的错误。用单引号引起的是一个字符，实际上表示的是一个整数；用双引号引起的是字符串，代表的是一个指向无名数组起始字符的指针，该指针被双引号之间的字符以及一个额外的二进制值为0的字符’\0’初始化。</p>
<p><strong>第一章“词法陷阱”，从编译器的角度，一些相同的字符序列，可能会因编译器的识别规则，从而有不同的意思；还有就是混淆一些相似的符号的用法，造成错误。</strong></p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><strong>1.3</strong> 对于n–&gt;0,编译器根据贪心准则，会首先匹配a–,然后尝试 a–&gt;,这个不是合法的，就从 &gt; 开始匹配； &gt;0,不是合法的，所以最后的结果是 (a–)&gt;0。</p>
<p><strong>1.4</strong> 这个题最初的想法是((a++)++)+b ;又想到了另一种 (a++)+(++b);不过，放到编译器中时，不能编译通过。不过当写成 <code>a++ + ++b</code>是能编译通过，所以猜想意思是(a++)+(++b)。</p>
<h2 id="2-词法陷阱"><a href="#2-词法陷阱" class="headerlink" title="2|词法陷阱"></a>2|词法陷阱</h2><h3 id="理解函数声明"><a href="#理解函数声明" class="headerlink" title="理解函数声明"></a>理解函数声明</h3><h3 id="运算符的优先级问题"><a href="#运算符的优先级问题" class="headerlink" title="运算符的优先级问题"></a>运算符的优先级问题</h3><p>C语言中有许多运算符，有逻辑运算符、算术运算符、移位运算符…不同的运算符的优先级是不一样的。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>结合性</th>
</tr>
</thead>
<tbody>
<tr>
<td>()  []  -&gt; .</td>
<td>自左向右</td>
</tr>
<tr>
<td>!  ~ ++ – - (type) * &amp; sizeof</td>
<td>自右向左</td>
</tr>
<tr>
<td>*  / %</td>
<td>自左向右</td>
</tr>
<tr>
<td>+  -</td>
<td>自左向右</td>
</tr>
<tr>
<td>&lt;&lt;   &gt;&gt;</td>
<td>自左向右</td>
</tr>
<tr>
<td>&lt;  &lt;=  &gt;  &gt;=</td>
<td>自左向右</td>
</tr>
<tr>
<td>==  !=</td>
<td>自左向右</td>
</tr>
<tr>
<td>&amp;</td>
<td>自左向右</td>
</tr>
<tr>
<td>^</td>
<td>自左向右</td>
</tr>
<tr>
<td>(按位或)</td>
<td>自左向右</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>自左向右</td>
</tr>
<tr>
<td>或</td>
<td>自左向右</td>
</tr>
<tr>
<td>?：</td>
<td>自右向左</td>
</tr>
<tr>
<td>assignments</td>
<td>自右向左</td>
</tr>
<tr>
<td>,</td>
<td>自左向右</td>
</tr>
</tbody>
</table>
<p>如果不注意运算符的优先级，很可能会出现这样的错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while(c = gitc(in) != EOF)</div><div class="line">	putc(c,out);</div></pre></td></tr></table></figure>
<p>例子本意是复制一个文件到另一个文件。在上述代码中，c似乎是先被赋予getc(in)的值，然后与EOF比较是否达到文件末尾。然而，由于赋值运算符的优先级小于比较运算符，所以实际表达的意思是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while(c = (gitc(in) != EOF))</div><div class="line">	putc(c,out);</div></pre></td></tr></table></figure></p>
<p>与原意大相径庭了。</p>
<p>此外，还要注意运算符的结合性。如果p是指向一个函数的指针，要调用p所指向的函数，就必须要这样写：<code>(*p)()</code>。因为如果写成<code>*p()</code>，编译器会理解成 <code>*(p())</code>。在比如在单目运算符中，<code>*p++</code>会被编译成<code>*(p++)</code>,即取指针p所指向的对象，然后将p递增1，不是<code>(*p)++</code>的意思了。</p>
<h3 id="注意作为语句结束标志的分号"><a href="#注意作为语句结束标志的分号" class="headerlink" title="注意作为语句结束标志的分号"></a>注意作为语句结束标志的分号</h3><h4 id="多了一个分号"><a href="#多了一个分号" class="headerlink" title="多了一个分号"></a>多了一个分号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if(x[i] &gt; big);</div><div class="line">	big = x[i];</div><div class="line">    </div><div class="line">big = x[i]跟if就没有关系了，也就相当于：</div><div class="line">if(x[i] &gt; big) &#123;&#125;</div><div class="line">	big = x[i];</div></pre></td></tr></table></figure>
<h4 id="少了一个分号"><a href="#少了一个分号" class="headerlink" title="少了一个分号"></a>少了一个分号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">if(n&lt;3)</div><div class="line">	return</div><div class="line">str.date = a;</div><div class="line">str.date = b;</div><div class="line">str.date = c;</div><div class="line"></div><div class="line">这个就相当于:</div><div class="line"></div><div class="line">if(n&lt;3)</div><div class="line">	return str.date = a;</div><div class="line">str.date = b;</div><div class="line">str.date = c;</div></pre></td></tr></table></figure>
<p>缺少分号，编译器可能会发出警告的信息，但如果缺分号并不造成语法上的错误，编译器不会发出错误信息，同时，这样的bug极其不容易被发现，要注意这类bug。</p>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>在switch中，要注意break的使用。c语言中，如果不显示写出break，程序会依次往下执行；如果真的是keyi刻意不写break，也应该注释一下，提高代码的可读性。</p>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>C语言中，无论函数需要参数与否，都需要加上()，不然编译器不会认为这是函数调用。</p>
<h3 id="“悬挂”else引发的问题"><a href="#“悬挂”else引发的问题" class="headerlink" title="“悬挂”else引发的问题"></a>“悬挂”else引发的问题</h3><p>这也是容易发生的bug,比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if( x == 0)</div><div class="line">	if( y == 0) error();</div><div class="line">else&#123;</div><div class="line">	z = x + y;</div><div class="line">    f(z);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本意上，else是与第一个if配对的，但现在实际的意思是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if( x == 0)&#123;</div><div class="line">	if( y == 0) error();</div><div class="line">    else&#123;</div><div class="line">        z = x + y;</div><div class="line">        f(z);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与原来的意思相差十万八千里。</p>
<h2 id="3-词义“陷阱”"><a href="#3-词义“陷阱”" class="headerlink" title="3|词义“陷阱”"></a>3|词义“陷阱”</h2><h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><p>关于c语言，需要注意的是：</p>
<ul>
<li>C语言中只有一维数组，数组大小在编译期就要明确。同时，数组的元素可以是任意类型的对象，可以是整数、结构体…任意的对象自然也还包括数组，所以就能根据这个“仿真”出多维数组。</li>
<li>对于数组，我们只能做两件事：<ul>
<li>确定大小</li>
<li>获得指向数组下标为0的指针</li>
</ul>
</li>
</ul>
<p>所以，我们知道我们对数组的操作，都是在通过操作指向数组下标为0的指针进行的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int a[3];</div><div class="line">int * p = a;</div><div class="line">print(&quot;%d&quot;,*p);</div></pre></td></tr></table></figure>
<p>上述例子会打印出 a[0] 的值，所以我们得知 <strong>数组名就是指向数组下标为0的元素的指针</strong>。在进一步，对于<code>p+1</code>，我们得到了数组下标为1的指针。总的来说，<code>*(a+i)</code>就是数组中下标为i的元素的引用。</p>
<p>那么在二维数组中，数组名指的是什么呢？前面的讨论中得知，二维数组就是以数组为元素的一维数组。看个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int calendar [12][31];</div><div class="line">int *p;</div><div class="line">int i;</div></pre></td></tr></table></figure>
<p>calendar是一个有着12个数组类型元素的数组，它的每个数组类型元素又是一个有着31个整形元素的数组，所以<code>calendar[4]</code>是calendar数组的第五个元素，是calendar数组中12个有着31个整形元素的数组之一。</p>
<p>对于语句 <code>i =calendar[4][7]</code> 可以这样表达 <code>i=*(calendar[4]+7)</code>;那语句 <code>p = calendar</code>是什么意思呢？是正确的吗？</p>
<p><strong> <code>p = calendar</code>是非法的，因为calendar是二维数组，也就是“数组的数组”，calendar是数组名，是指向数组下标为0的元素的指针，那也就是说 calendar是指向一个数组的指针，但 p 是指向一个整形的指针。该语句试图将一种类型的指针赋值给另一种类型的指针，所以是非法的。</strong></p>
<p>所以可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int calendar[12][31];</div><div class="line">int (*p)[31];</div><div class="line">p = calendar;</div></pre></td></tr></table></figure>
<p>一种根据指针的方式来操作数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int calendar[12][31];</div><div class="line">int (*p)[31];</div><div class="line"></div><div class="line">for(p = calendar;p &lt; &amp;calendar[12];p++)&#123;</div><div class="line">	int *t;</div><div class="line">    for(t = *p;t&lt;&amp;(*p);t++)</div><div class="line">    	*t = 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>对于指针，还有一点需要注意：如果ip指向一个整数，那么 <code>ip+1</code> 指向的是计算机内存中的下一个整数，在大多数现代计算机中，它都不同于ip所指向地址的下一个内存位置。</strong>对于数组，它的元素在内存中是连续的，所以<code>*(a+i)</code>就是数组中下标为i的元素的引用。</p>
<h3 id="非指针的数组"><a href="#非指针的数组" class="headerlink" title="非指针的数组"></a>非指针的数组</h3><p>这里主要讲的是字符串常量。在C语言中，字符串常量代表了一块包括字符串中所有字符以及一个空字符(‘\0)的内存区域的地址。所以字符串“hello”，在内存中的是以这样“hello\0”的状态存在的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">char ch = &quot;hello&quot;;</div></pre></td></tr></table></figure>
<p>对呀数组ch,它的元素个数是6。</p>
<h3 id="作为参数的数组声明"><a href="#作为参数的数组声明" class="headerlink" title="作为参数的数组声明"></a>作为参数的数组声明</h3><p>在这一节中，最主要讲的就是：如果我们使用数组名作为参数，那么实际上我们传的参数是指向该数组的第一个元素的指针。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">char hello[] = &quot;hello&quot;;</div><div class="line">printf(&quot;%s\n&quot;,hello);</div><div class="line">printf(&quot;%s\n&quot;,&amp;hello[0]);</div></pre></td></tr></table></figure>
<p>上述的两条打印语句是等效的。</p>
<h3 id="避免“举偶法”"><a href="#避免“举偶法”" class="headerlink" title="避免“举偶法”"></a>避免“举偶法”</h3><p>这一节中，主要思想就是：改变指针的值，不会改变指针所指向的内容。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char *p = &quot;hello&apos;;</div><div class="line">char *q = &quot;Hello world&quot;;</div></pre></td></tr></table></figure>
<p>如果此时执行 <code>p = q</code>,这个语句并没有同时复制内存中的字符，也就是说原来的 p 指向的内存单元中存储的还是”hello”这个字符串。</p>
<h3 id="边界计算与不对称边界"><a href="#边界计算与不对称边界" class="headerlink" title="边界计算与不对称边界"></a>边界计算与不对称边界</h3><p>看一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int i,a[10];</div><div class="line"></div><div class="line">for(i=0;i&lt;=9;i++)</div><div class="line">	a[i] = 0;</div><div class="line">    </div><div class="line">for(i=0;i&lt;10;i++)</div><div class="line">	a[i] = 0;</div></pre></td></tr></table></figure>
<p>上面的两个循环都是初始化数组为0，但是那种写法好呢？</p>
<p>先不着急回答上面的问题。如果我们想要求数组 a 中的元素个数，第一种写法我们的求法是 <code>9-0+1</code>，第二种写法的求法是 <code>10-0</code>。请问下，那种解法更容易出错呢？个人认为是第一种，因为加 1 的操作可能会被我们忘记。</p>
<p>所以我们更加推荐第二种不对称的写法。<strong>用第一个入界点和第一个出界点来表示一个数值范围。注意，入界点是在范围内的，但出界点是不在范围内的。</strong>拿队列来说吧，队列的头所在的位置是空的，是出界点，队列的尾的位置是有元素的，是入界点，所以计算队列中的元素个数，就用 end-start，就不用+1的操作了。</p>
<p>这种思想在程序设计中有诸多优点：</p>
<ul>
<li>取值范围的大小就是上界下界之差。</li>
<li>如果取值范围为空，那么上界等于下界。</li>
<li>即使取值范围为空，上界也不可能小于下界。</li>
</ul>
<h3 id="求值顺序"><a href="#求值顺序" class="headerlink" title="求值顺序"></a>求值顺序</h3><p>求值顺序和运算符优先级是两个不同的东西。运算符优先级是保证 <code>a+b*c</code>被解释成 <code>a+(b*c)</code>的这样一类规则。求值规则是另一种规则，可以保证像下面的语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if(count!=0 &amp;&amp; sum/count &lt; smallaverage)</div><div class="line">	printf(&quot;hello,world&quot;);</div></pre></td></tr></table></figure>
<p>即使当变量count为0时，也不会产生一个“用0做除数”的错误。也就是说，求值顺序保证先求 <code>count != 0</code>的值，且只用其值为1，才继续求值。</p>
<p>C语言中只用四个运算符（&amp;&amp;、||、?: 和 ，）存在规定的求值范围,其他所有的运算符对其操作数求值的顺序是未定义的，所以如下语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">i = 0;</div><div class="line">while(i&lt;n)</div><div class="line">	y[i] = x[i++];</div></pre></td></tr></table></figure>
<p>是存在风险的。因为上述代码如果要正确运行，需要保证 <code>i++</code> 在 <code>y[i] = x[i]</code>之后运行，但这是无法保证的。所以推荐写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">i = 0;</div><div class="line">while(i&lt;n)&#123;</div><div class="line">	y[i] = x[i];</div><div class="line">    i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为函数main提供返回值"><a href="#为函数main提供返回值" class="headerlink" title="为函数main提供返回值"></a>为函数main提供返回值</h3><p>如果不为main函数显示声明返回类型，那么就会默认为整型。虽然某些情况下函数main的返回值无关紧要，但是大多数C语言实现都通过这个返回值来告知系统该函数执行成功或者失败。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-导读&quot;&gt;&lt;a href=&quot;#0-导读&quot; class=&quot;headerlink&quot; title=&quot;0|导读&quot;&gt;&lt;/a&gt;0|导读&lt;/h2&gt;&lt;p&gt;程序设计错误实际上反映的是程序与程序员对该程序的“心智模式”两者的相异之处。&lt;/p&gt;
&lt;h2 id=&quot;1-词法陷阱&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>吴多智|个人简历</title>
    <link href="http://yoursite.com/2018/04/23/%E5%90%B4%E5%A4%9A%E6%99%BA-%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    <id>http://yoursite.com/2018/04/23/吴多智-个人简历/</id>
    <published>2018-04-23T11:02:22.000Z</published>
    <updated>2018-04-23T03:29:14.456Z</updated>
    
    <content type="html"><![CDATA[<h3 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h3><ul>
<li>吴多智</li>
<li>Tel:130-9892-1645</li>
<li>Email:wduozhi@gmail.com</li>
<li>Blog:wuduozhi.me</li>
</ul>
<hr>
<h3 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h3><ul>
<li>一年的线上项目开发维护经历，熟悉项目开发流程</li>
<li>对Linux有基本的了解，能搭建服务器环境，有搭建个人网站的经历</li>
<li>熟悉git版本控制工具</li>
<li>学习能力强，大一自学Web开发</li>
</ul>
<hr>
<h3 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h3><h4 id="内容分发平台-http-1000-hnu-edu-cn"><a href="#内容分发平台-http-1000-hnu-edu-cn" class="headerlink" title="内容分发平台  http://1000.hnu.edu.cn"></a>内容分发平台  <a href="http://1000.hnu.edu.cn" target="_blank" rel="external">http://1000.hnu.edu.cn</a></h4><ul>
<li>学校通知、活动等内容分发平台，类似学校的门户网站。项目采用mvc架构，前后端完全分离，后端使用PHP的CI框架，前端使用Vue，用json进行数据交互</li>
<li>自己负责后台逻辑的开发，熟练掌握了CI框架的使用，掌握对Mysql数据库的使用，理解RESTFul API接口的设计规范，加深了对MVC思想的理解</li>
</ul>
<h4 id="微信公众号后台开发"><a href="#微信公众号后台开发" class="headerlink" title="微信公众号后台开发"></a>微信公众号后台开发</h4><ul>
<li>学校网络工作室的微信公众号，负责原创内容的分发和集成一些功能，如成绩查询、课表查询…后台使用PHP的微框架Slim+Medoo，Slim负责处理请求的相应，Medoo负责数据库的处理，前端使用jQuery，用RESTFul API接口进行数据交互</li>
<li>自己负责后台功能的业务逻辑的开发与接入微信的验证，过程中熟悉了微信公众号api。这一经历，自己懂得了怎么去学习与调用别人的api,比如百度、腾讯…的人工智能平台</li>
</ul>
<hr>
<h3 id="技能水平"><a href="#技能水平" class="headerlink" title="技能水平"></a>技能水平</h3><ul>
<li>后端技术<ul>
<li>掌握php后台开发，熟悉常见的MVC框架，CI、TP</li>
<li>熟悉Java后台开发，了解spring，Hibernate</li>
</ul>
</li>
<li>前端技术<ul>
<li>了解前端三剑客基本语法，能看懂前端代码，与前端沟通无障碍</li>
</ul>
</li>
<li>服务器<ul>
<li>了解Linux系统的基本使用，能搭建服务器环境</li>
</ul>
</li>
</ul>
<hr>
<h3 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h3><p>2016.9-至今 湖南大学 软件工程（本科）</p>
<p>主修课程：数据结构、操作系统、深入理解计算机系统</p>
<p>校内荣誉：2017单项奖学金</p>
<h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;个人信息&quot;&gt;&lt;a href=&quot;#个人信息&quot; class=&quot;headerlink&quot; title=&quot;个人信息&quot;&gt;&lt;/a&gt;个人信息&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;吴多智&lt;/li&gt;
&lt;li&gt;Tel:130-9892-1645&lt;/li&gt;
&lt;li&gt;Email:wduozhi@gm
    
    </summary>
    
      <category term="简历" scheme="http://yoursite.com/categories/%E7%AE%80%E5%8E%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Java|Java多线程干货系列-1</title>
    <link href="http://yoursite.com/2018/04/20/Java-Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97-1/"/>
    <id>http://yoursite.com/2018/04/20/Java-Java多线程干货系列-1/</id>
    <published>2018-04-20T10:14:04.000Z</published>
    <updated>2018-04-20T07:38:15.641Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>多线程并发编程是Java编程中重要的一块内容，也是面试重点覆盖区域，所以学好多线程并发编程对我们来说极其重要，下面跟我一起开启本次的学习之旅吧。</p>
<h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><ol>
<li><p>线程：进程中负责程序执行的执行单元<br>线程本身依靠程序进行运行<br>线程是程序中的顺序控制流，只能使用分配给程序的资源和环境</p>
</li>
<li><p>进程：执行中的程序<br>一个进程至少包含一个线程</p>
</li>
<li><p>单线程：程序中只存在一个线程，实际上主方法就是一个主线程</p>
</li>
<li><p>多线程：在一个程序中运行多个任务<br>目的是更好地使用CPU资源</p>
</li>
</ol>
<h3 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h3><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><p>在java.lang包中定义, 继承Thread类必须重写run()方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class MyThread extends Thread&#123;</div><div class="line">    private static int num = 0;</div><div class="line"> </div><div class="line">    public MyThread()&#123;</div><div class="line">        num++;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;主动创建的第&quot;+num+&quot;个线程&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建好了自己的线程类之后，就可以创建线程对象了，然后通过start()方法去启动线程。注意，不是调用run()方法启动线程，run方法中只是定义需要执行的任务，如果调用run方法，即相当于在主线程中执行run方法，跟普通的方法调用没有任何区别，此时并不会创建一个新的线程来执行定义的任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)  &#123;</div><div class="line">        MyThread thread = new MyThread();</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class MyThread extends Thread&#123;</div><div class="line">    private static int num = 0;</div><div class="line">    public MyThread()&#123;</div><div class="line">        num++;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;主动创建的第&quot;+num+&quot;个线程&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面代码中，通过调用start()方法，就会创建一个新的线程了。为了分清start()方法调用和run()方法调用的区别，请看下面一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)  &#123;</div><div class="line">        System.out.println(&quot;主线程ID:&quot;+Thread.currentThread().getId());</div><div class="line">        MyThread thread1 = new MyThread(&quot;thread1&quot;);</div><div class="line">        thread1.start();</div><div class="line">        MyThread thread2 = new MyThread(&quot;thread2&quot;);</div><div class="line">        thread2.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">class MyThread extends Thread&#123;</div><div class="line">    private String name;</div><div class="line"> </div><div class="line">    public MyThread(String name)&#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;name:&quot;+name+&quot; 子线程ID:&quot;+Thread.currentThread().getId());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/java-多线程-01.png" alt="结果"></p>
<p>从输出结果可以得出以下结论：</p>
<p>1）thread1和thread2的线程ID不同，thread2和主线程ID相同，说明通过run方法调用并不会创建新的线程，而是在主线程中直接运行run方法，跟普通的方法调用没有任何区别；</p>
<p>2）虽然thread1的start方法调用在thread2的run方法前面调用，但是先输出的是thread2的run方法调用的相关信息，说明新线程创建的过程不会阻塞主线程的后续执行。</p>
<h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><p>在Java中创建线程除了继承Thread类之外，还可以通过实现Runnable接口来实现类似的功能。实现Runnable接口必须重写其run方法。<br>下面是一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)  &#123;</div><div class="line">        System.out.println(&quot;主线程ID：&quot;+Thread.currentThread().getId());</div><div class="line">        MyRunnable runnable = new MyRunnable();</div><div class="line">        Thread thread = new Thread(runnable);</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">class MyRunnable implements Runnable&#123;</div><div class="line">    public MyRunnable() &#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;子线程ID：&quot;+Thread.currentThread().getId());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Runnable的中文意思是“任务”，顾名思义，通过实现Runnable接口，我们定义了一个子任务，然后将子任务交由Thread去执行。注意，这种方式必须将Runnable作为Thread类的参数，然后通过Thread的start方法来创建一个新线程来执行该子任务。如果调用Runnable的run方法的话，是不会创建新线程的，这根普通的方法调用没有任何区别。</p>
<p>事实上，查看Thread类的实现源代码会发现Thread类是实现了Runnable接口的。</p>
<p>在Java中，这2种方式都可以用来创建线程去执行子任务，具体选择哪一种方式要看自己的需求。直接继承Thread类的话，可能比实现Runnable接口看起来更加简洁，但是由于Java只允许单继承，所以如果自定义类需要继承其他类，则只能选择实现Runnable接口。</p>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>在正式学习Thread类中的具体方法之前，我们先来了解一下线程有哪些状态，这个将会有助于后面对Thread类中的方法的理解。</p>
<ul>
<li>创建（new）状态: 准备好了一个多线程的对象</li>
<li>就绪（runnable）状态: 调用了start()方法, 等待CPU进行调度</li>
<li>运行（running）状态: 执行run()方法</li>
<li>阻塞（blocked）状态: 暂时停止执行, 可能将资源交给其它线程使用</li>
<li>终止（dead）状态: 线程销毁</li>
</ul>
<p>当需要新起一个线程来执行某个子任务时，就创建了一个线程。但是线程创建之后，不会立即进入就绪状态，因为线程的运行需要一些条件（比如内存资源，在前面的JVM内存区域划分一篇博文中知道程序计数器、Java栈、本地方法栈都是线程私有的，所以需要为线程分配一定的内存空间），只有线程运行需要的所有条件满足了，才进入就绪状态。</p>
<p>当线程进入就绪状态后，不代表立刻就能获取CPU执行时间，也许此时CPU正在执行其他的事情，因此它要等待。当得到CPU执行时间之后，线程便真正进入运行状态。</p>
<p>线程在运行状态过程中，可能有多个原因导致当前线程不继续运行下去，比如用户主动让线程睡眠（睡眠一定的时间之后再重新执行）、用户主动让线程等待，或者被同步块给阻塞，此时就对应着多个状态：time waiting（睡眠或等待一定的事件）、waiting（等待被唤醒）、blocked（阻塞）。</p>
<p>当由于突然中断或者子任务执行完毕，线程就会被消亡。</p>
<p>下面这副图描述了线程从创建到消亡之间的状态：</p>
<p><img src="/images/java-多线程-02.png" alt="线程状态图"></p>
<p>在有些教程上将blocked、waiting、time waiting统称为阻塞状态，这个也是可以的，只不过这里我想将线程的状态和Java中的方法调用联系起来，所以将waiting和time waiting两个状态分离出来。</p>
<p>注:sleep和wait的区别:</p>
<ul>
<li>sleep是Thread类的方法,wait是Object类中定义的方法.</li>
<li>Thread.sleep不会导致锁行为的改变, 如果当前线程是拥有锁的, 那么Thread.sleep不会让线程释放锁.</li>
<li>Thread.sleep和Object.wait都会暂停当前的线程. OS会将执行时间分配给其它线程. 区别是, 调用wait后, 需要别的线程执行notify/notifyAll才能够重新获得CPU执行时间.</li>
</ul>
<h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>对于单核CPU来说（对于多核CPU，此处就理解为一个核），CPU在一个时刻只能运行一个线程，当在运行一个线程的过程中转去运行另外一个线程，这个叫做线程上下文切换（对于进程也是类似）。</p>
<p>由于可能当前线程的任务并没有执行完毕，所以在切换时需要保存线程的运行状态，以便下次重新切换回来时能够继续切换之前的状态运行。举个简单的例子：比如一个线程A正在读取一个文件的内容，正读到文件的一半，此时需要暂停线程A，转去执行线程B，当再次切换回来执行线程A的时候，我们不希望线程A又从文件的开头来读取。</p>
<p>因此需要记录线程A的运行状态，那么会记录哪些数据呢？因为下次恢复时需要知道在这之前当前线程已经执行到哪条指令了，所以需要记录程序计数器的值，另外比如说线程正在进行某个计算的时候被挂起了，那么下次继续执行的时候需要知道之前挂起时变量的值时多少，因此需要记录CPU寄存器的状态。所以一般来说，线程上下文切换过程中会记录程序计数器、CPU寄存器状态等数据。</p>
<p><strong>说简单点的：对于线程的上下文切换实际上就是 存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行</strong>。</p>
<p>虽然多线程可以使得任务执行的效率得到提升，但是由于在线程切换时同样会带来一定的开销代价，并且多个线程会导致系统资源占用的增加，所以在进行多线程编程时要注意这些因素。</p>
<h3 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h3><table>
<thead>
<tr>
<th>编号</th>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>public void start()</td>
<td>使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</td>
</tr>
<tr>
<td>2</td>
<td>public void run()</td>
<td>如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td>
</tr>
<tr>
<td>3</td>
<td>public final void setName(String name)</td>
<td>改变线程名称，使之与参数 name 相同。</td>
</tr>
<tr>
<td>4</td>
<td>public final void setPriority(int priority)</td>
<td>更改线程的优先级。</td>
</tr>
<tr>
<td>5</td>
<td>public final void setDaemon(boolean on )</td>
<td>将该线程标记为守护线程或用户线程。</td>
</tr>
<tr>
<td>6</td>
<td>public final void join(long millisec)</td>
<td>等待该线程终止的时间最长为 millis 毫秒。</td>
</tr>
<tr>
<td>7</td>
<td>public void interrupt()</td>
<td>中断线程。</td>
</tr>
<tr>
<td>8</td>
<td>public final boolean isAlive()</td>
<td>测试线程是否处于活动状态。</td>
</tr>
<tr>
<td>9</td>
<td>public static void yield()</td>
<td>暂停当前正在执行的线程对象，并执行其他线程。</td>
</tr>
<tr>
<td>10</td>
<td>public static void sleep(long millisec)</td>
<td>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td>
</tr>
<tr>
<td>11</td>
<td>public static Thread currentThread()</td>
<td>返回对当前正在执行的线程对象的引用。</td>
</tr>
</tbody>
</table>
<p><img src="/images/java-多线程-03.png" alt="线程方法"></p>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><h5 id="currentThread-方法"><a href="#currentThread-方法" class="headerlink" title="currentThread()方法"></a>currentThread()方法</h5><p>currentThread()方法可以返回代码段正在被哪个线程调用的信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class Run&#123;</div><div class="line">    public static void main(String[] args)&#123;                 </div><div class="line">    	System.out.println(Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="sleep-方法"><a href="#sleep-方法" class="headerlink" title="sleep()方法"></a>sleep()方法</h5><p>方法sleep()的作用是在指定的毫秒数内让当前“正在执行的线程”休眠（暂停执行）。这个“正在执行的线程”是指this.currentThread()返回的线程。</p>
<p>sleep方法有两个重载版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sleep(long millis)     //参数为毫秒</div><div class="line">sleep(long millis,int nanoseconds)    //第一参数为毫秒，第二个参数为纳秒</div></pre></td></tr></table></figure>
<p>sleep相当于让线程睡眠，交出CPU，让CPU去执行其他的任务。</p>
<p>但是有一点要非常注意，sleep方法不会释放锁，也就是说如果当前线程持有对某个对象的锁，则即使调用sleep方法，其他线程也无法访问这个对象。看下面这个例子就清楚了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line"> </div><div class="line">    private int i = 10;</div><div class="line">    private Object object = new Object();</div><div class="line"> </div><div class="line">    public static void main(String[] args)   &#123;</div><div class="line">        Test test = new Test();</div><div class="line">        MyThread thread1 = test.new MyThread();</div><div class="line">        MyThread thread2 = test.new MyThread();</div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    class MyThread extends Thread&#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            synchronized (object) &#123;</div><div class="line">                i++;</div><div class="line">                System.out.println(&quot;i:&quot;+i);</div><div class="line">                try &#123;</div><div class="line">                    System.out.println(&quot;Thread &quot;+Thread.currentThread().getName()+&quot; is sleeping&quot;);</div><div class="line">                    Thread.currentThread().sleep(10000);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    // TODO: handle exception</div><div class="line">                &#125;</div><div class="line">                System.out.println(&quot;Thread &quot;+Thread.currentThread().getName()+&quot; is up&quot;);</div><div class="line">                i++;</div><div class="line">                System.out.println(&quot;i:&quot;+i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/java-多线程-04.png" alt="执行结果"></p>
<p>从上面输出结果可以看出，当Thread-0进入睡眠状态之后，Thread-1并没有去执行具体的任务。只有当Thread-0执行完之后，此时Thread-0释放了对象锁，Thread-1才开始执行。</p>
<p>注意，如果调用了sleep方法，必须捕获InterruptedException异常或者将该异常向上层抛出。当线程睡眠时间满后，不一定会立即得到执行，因为此时可能CPU正在执行其他的任务。所以说调用sleep方法相当于让线程进入阻塞状态。</p>
<h5 id="yield-方法"><a href="#yield-方法" class="headerlink" title="yield()方法"></a>yield()方法</h5><p>调用yield方法会让当前线程交出CPU权限，让CPU去执行其他的线程。它跟sleep方法类似，同样不会释放锁。但是yield不能控制具体的交出CPU的时间，另外，yield方法只能让拥有相同优先级的线程有获取CPU执行时间的机会。<br>注意，调用yield方法并不会让线程进入阻塞状态，而是让线程重回就绪状态，它只需要等待重新获取CPU执行时间，这一点是和sleep方法不一样的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class MyThread  extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        long beginTime=System.currentTimeMillis();</div><div class="line">        int count=0;</div><div class="line">        for (int i=0;i&lt;50000000;i++)&#123;</div><div class="line">            count=count+(i+1);</div><div class="line">            //Thread.yield();</div><div class="line">        &#125;</div><div class="line">        long endTime=System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;用时：&quot;+(endTime-beginTime)+&quot; 毫秒！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">public class Run &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MyThread t= new MyThread();</div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<blockquote>
<p>用时：3 毫秒！</p>
</blockquote>
<p>如果将 //Thread.yield();的注释去掉，执行结果如下：</p>
<blockquote>
<p>用时：16080 毫秒！</p>
</blockquote>
<h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><h5 id="start-方法"><a href="#start-方法" class="headerlink" title="start()方法"></a>start()方法</h5><p>start()用来启动一个线程，当调用start方法后，系统才会开启一个新的线程来执行用户定义的子任务，在这个过程中，会为相应的线程分配需要的资源。</p>
<h5 id="run-方法"><a href="#run-方法" class="headerlink" title="run()方法"></a>run()方法</h5><p>run()方法是不需要用户来调用的，当通过start方法启动一个线程之后，当线程获得了CPU执行时间，便进入run方法体去执行具体的任务。注意，继承Thread类必须重写run方法，在run方法中定义具体要执行的任务。</p>
<h5 id="getId"><a href="#getId" class="headerlink" title="getId()"></a>getId()</h5><p>getId()的作用是取得线程的唯一标识</p>
<pre><code>public class Test {
    public static void main(String[] args) {
        Thread t= Thread.currentThread();
        System.out.println(t.getName()+&quot; &quot;+t.getId());
    }
}
</code></pre><p>输出</p>
<blockquote>
<p>main 1</p>
</blockquote>
<h5 id="isAlive-方法"><a href="#isAlive-方法" class="headerlink" title="isAlive()方法"></a>isAlive()方法</h5><p>方法isAlive()的功能是判断当前线程是否处于活动状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class MyThread  extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;run=&quot;+this.isAlive());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class RunTest &#123;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        MyThread myThread=new MyThread();</div><div class="line">        System.out.println(&quot;begin ==&quot;+myThread.isAlive());</div><div class="line">        myThread.start();</div><div class="line">        System.out.println(&quot;end ==&quot;+myThread.isAlive());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>程序运行结果：</p>
<pre><code>---------- java ----------
begin ==false
end ==true
run=true

Output completed (0 sec consumed) - Normal Termination
</code></pre><p>方法isAlive()的作用是测试线程是否偶处于活动状态。什么是活动状态呢？活动状态就是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就认为线程是“存活”的。<br>有个需要注意的地方</p>
<p><code>System.out.println(&quot;end ==&quot;+myThread.isAlive());</code><br>虽然上面的实例中打印的值是true,但此值是不确定的。打印true值是因为myThread线程还未执行完毕，所以输出true。如果代码改成下面这样，加了个sleep休眠：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        MyThread myThread=new MyThread();</div><div class="line">        System.out.println(&quot;begin ==&quot;+myThread.isAlive());</div><div class="line">        myThread.start();</div><div class="line">        Thread.sleep(1000);</div><div class="line">        System.out.println(&quot;end ==&quot;+myThread.isAlive());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>则执行结果输出为false,因为mythread对象已经在1秒之内执行完毕。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---------- java ----------</div><div class="line">begin ==false</div><div class="line">run=true</div><div class="line">end ==false</div><div class="line"></div><div class="line">Output completed (1 sec consumed) - Normal Termination</div></pre></td></tr></table></figure></p>
<h5 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h5><p>在很多情况下，主线程创建并启动了线程，如果子线程中药进行大量耗时运算，主线程往往将早于子线程结束之前结束。这时，如果主线程想等待子线程执行完成之后再结束，比如子线程处理一个数据，主线程要取得这个数据中的值，就要用到join()方法了。方法join()的作用是等待线程对象销毁。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Test extends Thread&#123;</div><div class="line">    public Test(String name) &#123;</div><div class="line">        super(name);</div><div class="line">    &#125;</div><div class="line">    public void run() &#123;</div><div class="line">        for (int i = 0; i &lt; 5; i++) &#123;</div><div class="line">            System.out.println(getName() + &quot;  &quot; + i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        </div><div class="line">        new Test(&quot;new thread&quot;).start();</div><div class="line">        for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">            if (i == 5) &#123;</div><div class="line">                Test th = new Te(&quot;joined thread&quot;);</div><div class="line">                th.start();</div><div class="line">                th.join();</div><div class="line">            &#125;</div><div class="line">            System.out.println(Thread.currentThread().getName() + &quot;  &quot; + i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：<br><img src="/images/java-多线程-07.png" alt="result one"><br><img src="/images/java-多线程-08.png" alt="result two"></p>
<p>由上可以看出main主线程与new thread 的执行顺序是不确定的，交替执行，但当joined thread 执行join()后，主线程等待joined thread线程先执行完了才结束的。如果把th.join()这行注释掉，运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">---------- java ----------</div><div class="line">main  0</div><div class="line">new thread  0</div><div class="line">main  1</div><div class="line">main  2</div><div class="line">new thread  1</div><div class="line">main  3</div><div class="line">new thread  2</div><div class="line">main  4</div><div class="line">new thread  3</div><div class="line">new thread  4</div><div class="line">joined thread  0</div><div class="line">joined thread  1</div><div class="line">joined thread  2</div><div class="line">main  5</div><div class="line">joined thread  3</div><div class="line">main  6</div><div class="line">main  7</div><div class="line">main  8</div><div class="line">main  9</div><div class="line">joined thread  4</div><div class="line"></div><div class="line">Output completed (1 sec consumed) - Normal Termination</div></pre></td></tr></table></figure>
<h5 id="getName和setName"><a href="#getName和setName" class="headerlink" title="getName和setName"></a>getName和setName</h5><p>用来得到或者设置线程名称。</p>
<h5 id="getPriority和setPriority"><a href="#getPriority和setPriority" class="headerlink" title="getPriority和setPriority"></a>getPriority和setPriority</h5><p>用来获取和设置线程优先级。</p>
<h5 id="setDaemon和isDaemon"><a href="#setDaemon和isDaemon" class="headerlink" title="setDaemon和isDaemon"></a>setDaemon和isDaemon</h5><p>用来设置线程是否成为守护线程和判断线程是否是守护线程。</p>
<p>守护线程和用户线程的区别在于：守护线程依赖于创建它的线程，而用户线程则不依赖。举个简单的例子：如果在main线程中创建了一个守护线程，当main方法运行完毕之后，守护线程也会随着消亡。而用户线程则不会，用户线程会一直运行直到其运行完毕。在JVM中，像垃圾收集器线程就是守护线程。</p>
<p>在上面已经说到了Thread类中的大部分方法，那么Thread类中的方法调用到底会引起线程状态发生怎样的变化呢？下面一幅图就是在上面的图上进行改进而来的：</p>
<p><img src="/images/java-多线程-10.png" alt="对应方法的状态"></p>
<h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><p>停止线程是在多线程开发时很重要的技术点，掌握此技术可以对线程的停止进行有效的处理。<br>停止一个线程可以使用Thread.stop()方法，但最好不用它。该方法是不安全的，已被弃用。<br>在Java中有以下3种方法可以终止正在运行的线程：</p>
<ul>
<li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止</li>
<li>使用stop方法强行终止线程，但是不推荐使用这个方法，因为stop和suspend及resume一样，都是作废过期的方法，使用他们可能产生不可预料的结果。</li>
<li>使用interrupt方法中断线程，但这个不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。</li>
</ul>
<h3 id="暂停线程"><a href="#暂停线程" class="headerlink" title="暂停线程"></a>暂停线程</h3><p>interrupt()方法</p>
<h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><p>在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU资源较多，也就是CPU优先执行优先级较高的线程对象中的任务。<br>设置线程优先级有助于帮“线程规划器”确定在下一次选择哪一个线程来优先执行。<br>设置线程的优先级使用setPriority()方法，此方法在JDK的源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public final void setPriority(int newPriority) &#123;</div><div class="line">        ThreadGroup g;</div><div class="line">        checkAccess();</div><div class="line">        if (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</div><div class="line">            throw new IllegalArgumentException();</div><div class="line">        &#125;</div><div class="line">        if((g = getThreadGroup()) != null) &#123;</div><div class="line">            if (newPriority &gt; g.getMaxPriority()) &#123;</div><div class="line">                newPriority = g.getMaxPriority();</div><div class="line">            &#125;</div><div class="line">            setPriority0(priority = newPriority);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Java中，线程的优先级分为1~10这10个等级，如果小于1或大于10，则JDK抛出异常throw new IllegalArgumentException()。<br>JDK中使用3个常量来预置定义优先级的值，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public final static int MIN_PRIORITY = 1;</div><div class="line">public final static int NORM_PRIORITY = 5;</div><div class="line">public final static int MAX_PRIORITY = 10;</div></pre></td></tr></table></figure></p>
<p>线程优先级特性：</p>
<ul>
<li>继承性<br>比如A线程启动B线程，则B线程的优先级与A是一样的。</li>
<li>规则性<br>高优先级的线程总是大部分先执行完，但不代表高优先级线程全部先执行完。</li>
<li>随机性<br>优先级较高的线程不一定每一次都先执行完。</li>
</ul>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>在Java线程中有两种线程，一种是User Thread（用户线程），另一种是Daemon Thread(守护线程)。<br>Daemon的作用是为其他线程的运行提供服务，比如说GC线程。其实User Thread线程和Daemon Thread守护线程本质上来说去没啥区别的，唯一的区别之处就在虚拟机的离开：如果User Thread全部撤离，那么Daemon Thread也就没啥线程好服务的了，所以虚拟机也就退出了。</p>
<p>只要当前JVM实例中尚存任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束是，守护线程随着JVM一同结束工作，Daemon作用是为其他线程提供便利服务，守护线程最典型的应用就是GC(垃圾回收器)，他就是一个很称职的守护者。</p>
<p>守护线程并非虚拟机内部可以提供，用户也可以自行的设定守护线程，方法：public final void setDaemon(boolean on) ；但是有几点需要注意：</p>
<ul>
<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。 （备注：这点与守护进程有着明显的区别，守护进程是创建后，让进程摆脱原会话的控制+让进程摆脱原进程组的控制+让进程摆脱原控制终端的控制；所以说寄托于虚拟机的语言机制跟系统级语言有着本质上面的区别）</li>
<li>在Daemon线程中产生的新线程也是Daemon的。 （这一点又是有着本质的区别了：守护进程fork()出来的子进程不再是守护进程，尽管它把父进程的进程相关信息复制过去了，但是子进程的进程的父进程不是init进程，所谓的守护进程本质上说就是“父进程挂掉，init收养，然后文件0,1,2都是/dev/null，当前目录到/”）</li>
<li>不是所有的应用都可以分配给Daemon线程来进行服务，比如读写操作或者计算逻辑。因为在Daemon Thread还没来的及进行操作时，虚拟机可能已经退出了。</li>
</ul>
<h3 id="同步与死锁"><a href="#同步与死锁" class="headerlink" title="同步与死锁"></a>同步与死锁</h3><ul>
<li>同步代码块<br>在代码块上加上”synchronized”关键字，则此代码块就称为同步代码块</li>
<li><p>同步代码块格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">synchronized(同步对象)&#123;</div><div class="line"> 需要同步的代码块;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>同步方法<br>除了代码块可以同步，方法也是可以同步的</p>
</li>
<li>方法同步格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">synchronized void 方法名称()&#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="线程和进程有什么区别？"><a href="#线程和进程有什么区别？" class="headerlink" title="线程和进程有什么区别？"></a>线程和进程有什么区别？</h4><p>答：一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据。</p>
<h4 id="如何在Java中实现线程？"><a href="#如何在Java中实现线程？" class="headerlink" title="如何在Java中实现线程？"></a>如何在Java中实现线程？</h4><p>答：<br>创建线程有两种方式：<br>一、继承 Thread 类，扩展线程。<br>二、实现 Runnable 接口。</p>
<p>启动一个线程是调用run()还是start()方法？<br>答：启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM 调度并执行，这并不意味着线程就会立即运行。run()方法是线程启动后要进行回调（callback）的方法。</p>
<p>Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别?<br>答：sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第66题中的线程状态转换图）。wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</p>
<h4 id="线程的sleep-方法和yield-方法有什么区别？"><a href="#线程的sleep-方法和yield-方法有什么区别？" class="headerlink" title="线程的sleep()方法和yield()方法有什么区别？"></a>线程的sleep()方法和yield()方法有什么区别？</h4><p>答：<br>① sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；<br>② 线程执行sleep()方法后转入阻塞（blocked）状态，而执行yield()方法后转入就绪（ready）状态；<br>③ sleep()方法声明抛出InterruptedException，而yield()方法没有声明任何异常；<br>④ sleep()方法比yield()方法（跟操作系统CPU调度相关）具有更好的可移植性。</p>
<h4 id="请说出与线程同步以及线程调度相关的方法。"><a href="#请说出与线程同步以及线程调度相关的方法。" class="headerlink" title="请说出与线程同步以及线程调度相关的方法。"></a>请说出与线程同步以及线程调度相关的方法。</h4><p>答：</p>
<ul>
<li>wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；</li>
<li>sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常；</li>
<li>notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关；</li>
<li>notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；</li>
</ul>
<p><a href="http://www.importnew.com/21136.html" target="_blank" rel="external">nice的教程</a><br><a href="http://www.importnew.com/27131.html" target="_blank" rel="external">图解Java多线程</a><br><a href="http://www.importnew.com/26850.html" target="_blank" rel="external">线程通信</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;多线程并发编程是Java编程中重要的一块内容，也是面试重点覆盖区域，所以学好多线程并发编程对我们来说极其重要，下面跟我一起开启本次的学习之旅
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode|My code</title>
    <link href="http://yoursite.com/2018/04/19/LeetCode-%D5%BB-My-code/"/>
    <id>http://yoursite.com/2018/04/19/LeetCode-ջ-My-code/</id>
    <published>2018-04-19T15:44:48.000Z</published>
    <updated>2018-04-25T16:16:01.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-11-Container-With-Most-Water（最大水容器）"><a href="#LeetCode-11-Container-With-Most-Water（最大水容器）" class="headerlink" title="LeetCode 11 Container With Most Water（最大水容器） "></a><a href="https://leetcode-cn.com/problems/container-with-most-water/description/" target="_blank" rel="external">LeetCode 11 Container With Most Water（最大水容器） </a></h3><p>题目大意：给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。画 n 条垂直线，使得垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>注意：你不能倾斜容器，n 至少是2。</p>
<p>思路:用两个指针从两端开始向中间靠拢，如果左端线段短于右端，那么左端右移，反之右端左移，只到左右两端移到中间重合，记录这个过程中每一次组成木桶的容积，保留其中最大的。因为当左端线段L小于右端线段R时，我们把L右移，右移到下一个比当前线段大的线段处，这时舍弃的是R与左端其他线段（L+1,L+2, …）组成的木桶，这些木桶是没必要判断的，因为这些木桶的容积肯定都没有L和R组成的木桶容积大。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int maxArea(vector&lt;int&gt;&amp; height) &#123;</div><div class="line">        int area = 0;</div><div class="line">        int length = height.size();</div><div class="line">        int l=0,r=length-1;</div><div class="line">        int left = height[0],right = height[length-1];</div><div class="line">        while(l&lt;r)&#123;</div><div class="line">            int tmp=0;</div><div class="line">            if(left&lt;right)&#123;</div><div class="line">               tmp = left*(r-l);</div><div class="line">                while(height[l]&lt;=left)&#123;</div><div class="line">                    l++;</div><div class="line">                &#125;</div><div class="line">                left = height[l];</div><div class="line">            &#125;else&#123;</div><div class="line">                tmp = right*(r-l);</div><div class="line">                while(height[r]&lt;=right)&#123;</div><div class="line">                    r--;</div><div class="line">                &#125;</div><div class="line">                right = height[r];</div><div class="line">            &#125;</div><div class="line">            if(area&lt;tmp)&#123;</div><div class="line">                area = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return area;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="LeetCode-144-Binary-Tree-Preorder-Traversal"><a href="#LeetCode-144-Binary-Tree-Preorder-Traversal" class="headerlink" title="LeetCode 144 Binary Tree Preorder Traversal "></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/" target="_blank" rel="external">LeetCode 144 Binary Tree Preorder Traversal </a></h3><p>题目大意：给定一个二叉树，返回它的 前序 遍历。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入: [1,null,2,3]  </div><div class="line">   1</div><div class="line">    \</div><div class="line">     2</div><div class="line">    /</div><div class="line">   3 </div><div class="line"></div><div class="line">输出: [1,2,3]</div><div class="line"></div><div class="line">进阶: 递归算法很简单，你可以通过迭代算法完成吗？</div></pre></td></tr></table></figure></p>
<p>思路：题目要求对二叉树进行非递归的前序遍历，所谓前序遍历即，先访问根节点、再访问左子树、然后是右子树。通常采用递归的方法，题目要求采用非递归的方法实现。算法如下：</p>
<ol>
<li>如果根节点非空，将根节点加入到栈中。</li>
<li>如果栈不空，弹出出栈顶节点，将其值加加入到数组中。<br> 2.1. 如果该节点的右子树不为空，将右子节点加入栈中。<br> 2.2. 如果左子节点不为空，将左子节点加入栈中。</li>
<li>重复第二步，直到栈空。 </li>
</ol>
<p>这里最重要的一个是先添加右节点，然后在添加左节点，这样做是为了使左节点在栈顶，下一次迭代的时候处理的是左节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123;</div><div class="line">        stack&lt;TreeNode *&gt; sta;</div><div class="line">        </div><div class="line">        if(root!=NULL)</div><div class="line">          sta.push(root);</div><div class="line">        </div><div class="line">        vector&lt;int&gt; result;</div><div class="line">        while(!sta.empty())&#123;</div><div class="line">            TreeNode * node = sta.top();</div><div class="line">            sta.pop();</div><div class="line">            result.push_back(node-&gt;val);</div><div class="line">            if(node-&gt;right!=NULL)&#123;</div><div class="line">                sta.push(node-&gt;right);</div><div class="line">            &#125;</div><div class="line">            if(node-&gt;left!=NULL)&#123;</div><div class="line">                sta.push(node-&gt;left);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="LeetCode-94-Binary-Tree-Inorder-Traversal-中序遍历"><a href="#LeetCode-94-Binary-Tree-Inorder-Traversal-中序遍历" class="headerlink" title="LeetCode 94 Binary Tree Inorder Traversal  中序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/description/" target="_blank" rel="external">LeetCode 94 Binary Tree Inorder Traversal  中序遍历</a></h3><p>题目大意：给定一个二叉树，返回它的中序 遍历。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入: [1,null,2,3]</div><div class="line">   1</div><div class="line">    \</div><div class="line">     2</div><div class="line">    /</div><div class="line">   3</div><div class="line"></div><div class="line">输出: [1,3,2]</div><div class="line"></div><div class="line">进阶: 递归算法很简单，你可以通过迭代算法完成吗？</div></pre></td></tr></table></figure>
<p>思路：<br>太经典基础的算法问题了，但想写出一个无bug的非递归二叉树中序遍历也不是很容易。先看递归版本的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">private:</div><div class="line">    vector&lt;int&gt; result;</div><div class="line">    void helper(TreeNode* root) &#123;</div><div class="line">        if (root == nullptr) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        helper(root -&gt; left);</div><div class="line">        result.push_back(root -&gt; val);</div><div class="line">        helper(root -&gt; right);</div><div class="line">    &#125;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</div><div class="line">        helper(root);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>再考虑非递归，其实就是对于每个节点，走到最左端，沿路径压栈。</p>
<p>到达最左端后以此返回，开始弹栈，对于每个弹出的元素，记录其value，并且走向其右节点重复上述过程（走到最左端…）。</p>
<p>直到栈内元素为空为止。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</div><div class="line">        vector&lt;int&gt; result;</div><div class="line">        stack&lt;TreeNode*&gt; s;</div><div class="line">        TreeNode* p = root;</div><div class="line">        while (p || !s.empty()) &#123;</div><div class="line">            while (p != nullptr) &#123;</div><div class="line">                s.push(p);</div><div class="line">                p = p -&gt; left; </div><div class="line">            &#125;</div><div class="line">            if (!s.empty()) &#123;</div><div class="line">                p = s.top();</div><div class="line">                result.push_back(p -&gt; val);</div><div class="line">                s.pop();</div><div class="line">                p = p -&gt; right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="LeetCode-145-Binary-Tree-Postorder-Traversal"><a href="#LeetCode-145-Binary-Tree-Postorder-Traversal" class="headerlink" title="LeetCode 145 Binary Tree Postorder Traversal"></a><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/description/" target="_blank" rel="external">LeetCode 145 Binary Tree Postorder Traversal</a></h3><p>题目大意：给定一个二叉树，返回它的 后序 遍历。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入: [1,null,2,3]  </div><div class="line">   1</div><div class="line">    \</div><div class="line">     2</div><div class="line">    /</div><div class="line">   3 </div><div class="line"></div><div class="line">输出: [3,2,1]</div><div class="line"></div><div class="line">进阶: 递归算法很简单，你可以通过迭代算法完成吗？</div></pre></td></tr></table></figure></p>
<p>思路：利用到了一个后续遍历的特点，即：</p>
<blockquote>
<p>后续遍历序列中，父节点前面一定紧挨着他的儿子节点（如果有的话）</p>
</blockquote>
<p>所以，额外保存一个pre变量代表前一个遍历的节点，用来判断当前的节点（如果是父节点）的子节点的访问情况，。如果pre节点是当前节点的儿子节点（或者当前节点没有儿子），说明当前节点的儿子节点都遍历过了，可以遍历父节点了。</p>
<p>如何更新维护pre呢？当一个节点输出后，将prev置为这个节点，这是因为如果pre是后续遍历序列中的前一个节点，那么这个pre节点必须是已经被输出的节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123;</div><div class="line">        vector&lt;int&gt; result;</div><div class="line">        stack&lt;TreeNode*&gt; s;</div><div class="line">        TreeNode* pre = NULL;</div><div class="line">        TreeNode* node = root;</div><div class="line">        if(node)&#123;</div><div class="line">            s.push(node);</div><div class="line">        &#125;</div><div class="line">        while (!s.empty()) &#123;</div><div class="line">            node = s.top();</div><div class="line">            if(!node)&#123;</div><div class="line">                s.pop();</div><div class="line">            &#125;else if((node-&gt;left==NULL &amp;&amp; node-&gt;right==NULL) || (node-&gt;left == pre &amp;&amp; pre) || (node-&gt;right == pre &amp;&amp; pre))&#123;</div><div class="line">                result.push_back(node-&gt;val);</div><div class="line">                s.pop();</div><div class="line">                pre = node;</div><div class="line">            &#125;else&#123;</div><div class="line">                s.push(node-&gt;right);</div><div class="line">                s.push(node-&gt;left);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="LeetCode-136-Single-NumberSingle-Number"><a href="#LeetCode-136-Single-NumberSingle-Number" class="headerlink" title="LeetCode 136 Single NumberSingle Number"></a><a href="https://leetcode-cn.com/problems/single-number/description/" target="_blank" rel="external">LeetCode 136 Single NumberSingle Number</a></h3><p>题目大意:给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>说明：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [2,2,1]</div><div class="line">输出: 1</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [4,1,2,1,2]</div><div class="line">输出: 4</div></pre></td></tr></table></figure>
<p>思路：题目要求O(n)时间复杂度，O(1)空间复杂度，所以简单地暴力搜索是肯定不行的了，需要用巧妙的方法–利用异或操作。异或的性质1：交换律a ^ b = b ^ a，性质2：0 ^ a = a。于是利用交换律可以将数组假想成相同元素全部相邻，于是将所有元素依次做异或操作，相同元素异或为0，最终剩下的元素就为Single Number。时间复杂度O(n)，空间复杂度O(1)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">         //异或</div><div class="line">        int elem = 0;</div><div class="line">        for(int i = 0; i &lt; nums.size() ; i++) &#123;</div><div class="line">            elem = elem ^ nums[i];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return elem;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="LeetCode-137：Single-Number-II"><a href="#LeetCode-137：Single-Number-II" class="headerlink" title="LeetCode 137：Single Number II"></a><a href="https://leetcode-cn.com/problems/single-number-ii/description/" target="_blank" rel="external">LeetCode 137：Single Number II</a></h3><p>题目大意：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p>
<p>说明：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: [2,2,3,2]</div><div class="line">输出: 3</div><div class="line"></div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: [0,1,0,1,0,1,99]</div><div class="line">输出: 99</div></pre></td></tr></table></figure>
<p>思路：Single Number II 比Single Number要复杂的多，很难直观的找到算法。</p>
<p>考虑每个元素的为一个32位的二进制数，这样每一位上出现要么为1 ，要么为0。对数组，统计每一位上1 出现的次数count，必定是3N或者3N+1 次。让count对3取模，能够获得到那个只出现1次的元素该位是0还是1。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int length = nums.size();  </div><div class="line">        int result = 0;  </div><div class="line">        for(int i = 0; i&lt;32; i++)&#123;  </div><div class="line">            int count = 0;   </div><div class="line">            int mask = 1&lt;&lt; i;  </div><div class="line">            for(int j=0; j&lt;length; j++)&#123;  </div><div class="line">                if(nums[j] &amp; mask)  </div><div class="line">                    count++;  </div><div class="line">            &#125;  </div><div class="line">          if(count %3)  </div><div class="line">                result |= mask;  </div><div class="line">        &#125;  </div><div class="line">        return result;  </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>同时，不难发现，该算法同样适用于Single Number I的解答。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;  </div><div class="line">public:  </div><div class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;  </div><div class="line">        int length = nums.size();  </div><div class="line">        int result = 0;  </div><div class="line">        for(int i = 0; i&lt;32; i++)&#123;  </div><div class="line">            int count = 0;  </div><div class="line">            int mask = 1&lt;&lt; i;  </div><div class="line">            for(int j=0; j&lt;length; j++)&#123;  </div><div class="line">                if(nums[j] &amp; mask)  </div><div class="line">                    count++;  </div><div class="line">            &#125;  </div><div class="line">           if(count %2)  </div><div class="line">                result |= mask;  </div><div class="line">        &#125;  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>同时，对Single Number II 网上还有一种解法，自己不是很明白，先记录下日后研究。</p>
<pre><code>int singleNumber(int A[], int n)  
{  
    int one = 0, two = 0;  
    for (int i = 0; i &lt; n; i++)  
    {  
        two |= A[i] &amp; one;  
        one ^= A[i];  
        int three = one &amp; two;  
        one &amp;= ~three;  
        two &amp;= ~three;  
    }  
    return one;  
}  
</code></pre><h3 id="LeetCode-260-Single-Number-III"><a href="#LeetCode-260-Single-Number-III" class="headerlink" title="LeetCode 260 Single Number III"></a><a href="https://leetcode-cn.com/problems/single-number-iii/description/" target="_blank" rel="external">LeetCode 260 Single Number III</a></h3><p>题目大意：给定一个整数数组 nums，其中恰好有两个元素只出现一次，其他所有元素均出现两次。 找出只出现一次的那两个元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">给定 nums = [1, 2, 1, 3, 2, 5], 返回 [3, 5].</div><div class="line"></div><div class="line">注意：</div><div class="line"></div><div class="line">    结果的顺序并不重要，对于上面的例子 [5, 3] 也是正确答案。</div><div class="line">    你的算法应该具有线性复杂度，你能否仅使用恒定的空间复杂度来实现它？</div></pre></td></tr></table></figure></p>
<p>这个题，想了许久没头绪，只好上网看大神的讲解。</p>
<p>整个算法的具体思路，假设数组中两个不同的数字为 A 和 B；</p>
<ol>
<li>通过遍历整个数组并求整个数组所有数字之间的 XOR，根据 XOR 的特性可以得到最终的结果为 AXORB = A XOR B；</li>
<li>通过某种特定的方式，我们可以通过 AXORB 得到在数字 A 和数字 B 的二进制下某一位不相同的位；因为A 和 B 是不相同的，所以他们的二进制数字有且至少有一位是不相同的。我们将这一位设置为 1，并将所有的其他位设置为 0，我们假设我们得到的这个数字为 bitFlag；</li>
<li>那么现在，我们很容易知道，数字 A 和 数字 B 中必然有一个数字 <strong>与</strong>上 bitFlag 为 0；因为bitFlag 标志了数字 A 和数字 B 中的某一位不同，那么在数字 A 和 B 中的这一位必然是一个为 0，另一个为 1；而我们在 bitFlag 中将其他位都设置为 0，那么该位为 0 的数字与上 bitFlag 就等于 0，而该位为 1 的数字与上 bitFlag 就等于 bitFlag</li>
<li>现在问题就简单了，我们只需要在循环一次数组，将与上 bitFlag 为 0 的数字进行 XOR 运算，与上 bitFlag 不为 0 的数组进行独立的 XOR 运算。那么最后我们得到的这两个数字就是 A 和 B。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int AxorB = 0;</div><div class="line">        for(int num : nums)&#123;</div><div class="line">        	AxorB ^=num;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        int bitFlag = (AxorB &amp; (~(AxorB-1)));</div><div class="line">        vector&lt;int&gt; res = vector&lt;int&gt;(2,0);</div><div class="line">        for(int num : nums)&#123;</div><div class="line">        	if((num &amp; bitFlag) == 0)&#123;</div><div class="line">        		res[0] ^= num;</div><div class="line">        	&#125;else&#123;</div><div class="line">        		res[1] ^=num;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>整个代码的精华在这里:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//pick one bit as flag</div><div class="line">int bitFlag = (AXORB &amp; (~ (AXORB - 1)));</div></pre></td></tr></table></figure>
<p>这一行代码的作用是：找到数字 A 和数字 B 中不相同的一位，并将该位设置为 1，其他位设置为 0；根据 XOR 的定义，我们知道，在 AXORB 中，为 1 的位即 A 和 B 不相同的位，AXORB 中为 0 的位即 A 和 B 中相同的位。所以，要找到 A 和 B 中不相同的位，只需要找到在 AXORB 中从右往左第一个为 1 的位，保留该位并将其他位置为 0 即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//其实这一行与下面的代码等价，但是论逼格就差远了（手动斜眼）</div><div class="line">public static int f(int num)&#123;</div><div class="line">    int times = 0;</div><div class="line">    while(num &gt; 0)&#123;</div><div class="line">        if(num % 2 == 1)&#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        times++;</div><div class="line">        num = num &gt;&gt; 1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return 1 &lt;&lt; times;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://segmentfault.com/a/1190000004886431" target="_blank" rel="external">大神地址</a></p>
<h3 id="LeetCode-78-Subsets"><a href="#LeetCode-78-Subsets" class="headerlink" title="LeetCode 78 Subsets"></a><a href="https://leetcode-cn.com/problems/subsets/description/" target="_blank" rel="external">LeetCode 78 Subsets</a></h3><p>题目大意：给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入: nums = [1,2,3]</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [3],</div><div class="line">  [1],</div><div class="line">  [2],</div><div class="line">  [1,2,3],</div><div class="line">  [1,3],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure>
<p>思路：</p>
<ul>
<li>位操作<br>对于数组[1,2,3]，可以用一个下标0和1表示是否选择该数字，0表示未选择，1表示选中，那么每一组3个0和1的组合表示一种选择，3位共有8种选择，分别是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">000 对应[]</div><div class="line">001 对应[3]</div><div class="line">010 对应[2]</div><div class="line">011 对应[2,3]</div><div class="line">100 …</div><div class="line">101</div><div class="line">110</div><div class="line">111</div></pre></td></tr></table></figure>
</li>
</ul>
<p>那么上面为1的位表示数组中该位被选中。<br>那么只需要遍历0到1&lt;&lt; length中的数，判断每一个数中有那几位为1，为1的那几位即会构成一个子集中的一个元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int length = nums.size();</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; r;</div><div class="line">        for(int i=0;i&lt;(1&lt;&lt;length);i++)&#123;</div><div class="line">        	vector&lt;int&gt; tmp;</div><div class="line">        	int t = i;</div><div class="line">        	for(int j=0;j&lt;length;j++)&#123;</div><div class="line">        		if(t&amp;(1&lt;&lt;j))&#123;</div><div class="line">        			tmp.push_back(nums[j]);</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        	r.push_back(tmp);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return r;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这中解法运用了一个转换的思想，同时巧妙地运用位运算，比如计算有三个元素时二进制111的值与判断二进制的某一位是否为1，都运用了位运算。</p>
<ul>
<li>回溯法</li>
</ul>
<p>还可以使用深度优先搜索来遍历数组，采用回溯法来剔除元素。使用一个变量来记录路径，每遍历到一个元素即表示找到一条路径，将其加入子集中。<br>对于数组[1,2,3]<br>从1开始递归查询2,3，对于2，继续向下搜索，搜索完后将2删除。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:    </div><div class="line">    //使用深度优先的回溯法</div><div class="line">     vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">         vector&lt;vector&lt;int&gt;&gt; result;</div><div class="line">         vector&lt;int&gt; path;</div><div class="line">         sort(nums.begin(),nums.end());</div><div class="line">         result.push_back(path);</div><div class="line">         dfs(nums,0,path,result);</div><div class="line">         return result;</div><div class="line">     &#125;</div><div class="line">     void dfs(vector&lt;int&gt;&amp; nums,int pos,vector&lt;int&gt; &amp; path,vector&lt;vector&lt;int&gt;&gt; &amp; result)</div><div class="line">     &#123;</div><div class="line">            if(pos==nums.size())</div><div class="line">                return;</div><div class="line"></div><div class="line">            for(int i=pos;i&lt;nums.size();i++)</div><div class="line">            &#123;</div><div class="line">                path.push_back(nums[i]);</div><div class="line">                result.push_back(path);</div><div class="line">                dfs(nums,i+1,path,result);</div><div class="line">                path.pop_back();</div><div class="line">            &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="LeetCode-90-Subsets-II"><a href="#LeetCode-90-Subsets-II" class="headerlink" title="LeetCode 90 Subsets II"></a><a href="https://leetcode-cn.com/problems/subsets-ii/description/" target="_blank" rel="external">LeetCode 90 Subsets II</a></h3><p>题目大意：给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p>
<p>说明：解集不能包含重复的子集。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">示例:</div><div class="line"></div><div class="line">输入: [1,2,2]</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [2],</div><div class="line">  [1],</div><div class="line">  [1,2,2],</div><div class="line">  [2,2],</div><div class="line">  [1,2],</div><div class="line">  []</div><div class="line">]</div></pre></td></tr></table></figure>
<p>思路：</p>
<ol>
<li>解法一：</li>
</ol>
<p>举例说明我的算法：</p>
<p>设S={1,2,2}，则size=3</p>
<p>在不考虑重复的情况下，子集共有2^3=8个</p>
<p>分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">0,0,0  &#123;&#125;</div><div class="line"></div><div class="line">0,0,1  &#123;2&#125;</div><div class="line"></div><div class="line">0,1,0  &#123;2&#125;</div><div class="line"></div><div class="line">0,1,1  &#123;2,2&#125;</div><div class="line"></div><div class="line">1,0,0  &#123;1&#125;</div><div class="line"></div><div class="line">1,0,1  &#123;1,2&#125;</div><div class="line"></div><div class="line">1,1,0  &#123;1,2&#125;</div><div class="line"></div><div class="line">1,1,1  &#123;1,2,2&#125;</div></pre></td></tr></table></figure></p>
<p>1表示对应位的元素存在于集合中，0表示不存在。</p>
<p>因此只要从0遍历到2^size - 1，如果对应位为1，则将S中相应元素加入当前集合。</p>
<p>对于Note的两点要求：</p>
<p>1、sort函数对集合排序</p>
<p>2、使用map去重，存在即去除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; subsetsWithDup(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">        map&lt;vector&lt;int&gt;,bool&gt; m;</div><div class="line">        int length = nums.size();</div><div class="line">        for(int i=0;i&lt;(1&lt;&lt;length);i++)&#123;</div><div class="line">        	int tag = i;</div><div class="line">        	vector&lt;int&gt; tmp;</div><div class="line">        	for(int j=0;j&lt;length;j++)&#123;</div><div class="line">        		if(i&amp;(1&lt;&lt;j))&#123;</div><div class="line">        			tmp.push_back(nums[j]);</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        	sort(tmp.begin(),tmp.end());</div><div class="line">        	if(m.find(tmp) == m.end())&#123;</div><div class="line">        		m[tmp] = true;</div><div class="line">        		res.push_back(tmp);</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>解法一额外开辟了map，因此占用了大量的空间。</p>
<p>可以这样来看。</p>
<p>后加入的元素，需要加入全部已有的集合，并且考虑重复。</p>
<p>再次考虑S={1,2,2}，先排序。</p>
<p>首先加入空集{}</p>
<p>对于元素1，需要加入{}，成为新的集合{1}</p>
<p>对于元素2，需要加入{}和{1}，成为新的集合{2}和{1,2}。考虑重复，再产生新集合{2,2}和{1,2,2}。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; subsetsWithDup(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        vector&lt;vector&lt;int&gt; &gt; ret;</div><div class="line">        vector&lt;int&gt; empty;</div><div class="line">        ret.push_back(empty);</div><div class="line">        </div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        unordered_map&lt;int, int&gt; count;</div><div class="line">        for(int i = 0; i &lt; nums.size(); i ++)</div><div class="line">            count[nums[i]] ++;</div><div class="line">        vector&lt;int&gt;::iterator iter = unique(nums.begin(), nums.end());</div><div class="line">        nums.erase(iter, nums.end());</div><div class="line">        for(int i = 0; i &lt; nums.size(); i ++)</div><div class="line">        &#123;</div><div class="line">            int size = ret.size();</div><div class="line">            for(int j = 0; j &lt; size; j ++)</div><div class="line">            &#123;</div><div class="line">                vector&lt;int&gt; newset = ret[j];</div><div class="line">                for(int k = 0; k &lt; count[nums[i]]; k ++)  //产生重复元素的集合 &#123;22&#125;</div><div class="line">                &#123;</div><div class="line">                    newset.push_back(nums[i]);</div><div class="line">                    ret.push_back(newset);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;LeetCode-11-Container-With-Most-Water（最大水容器）&quot;&gt;&lt;a href=&quot;#LeetCode-11-Container-With-Most-Water（最大水容器）&quot; class=&quot;headerlink&quot; title=&quot;Leet
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode|栈-最小栈</title>
    <link href="http://yoursite.com/2018/04/17/LeetCode-%E6%A0%88-%E6%9C%80%E5%B0%8F%E6%A0%88/"/>
    <id>http://yoursite.com/2018/04/17/LeetCode-栈-最小栈/</id>
    <published>2018-04-17T11:12:30.000Z</published>
    <updated>2018-04-17T03:32:38.275Z</updated>
    
    <content type="html"><![CDATA[<h3 id="155-Min-Stack-最小栈"><a href="#155-Min-Stack-最小栈" class="headerlink" title="155 Min Stack 最小栈"></a>155 Min Stack 最小栈</h3><ul>
<li>题目出处 <a href="https://leetcode.com/problems/min-stack/description/" target="_blank" rel="external">https://leetcode.com/problems/min-stack/description/</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">设计一个支持 push，pop，top 操作，并能在常量时间内检索最小元素的栈。</div><div class="line">    push(x) -- 将元素x推入栈中。</div><div class="line">    pop() -- 删除栈顶的元素。</div><div class="line">    top() -- 获取栈顶元素。</div><div class="line">    getMin() -- 检索栈中的最小元素。</div><div class="line">示例:</div><div class="line">MinStack minStack = new MinStack();</div><div class="line">minStack.push(-2);</div><div class="line">minStack.push(0);</div><div class="line">minStack.push(-3);</div><div class="line">minStack.getMin();   --&gt; 返回 -3.</div><div class="line">minStack.pop();</div><div class="line">minStack.top();      --&gt; 返回 0.</div><div class="line">minStack.getMin();   --&gt; 返回 -2.</div></pre></td></tr></table></figure>
<p>写一个小堆栈，本身没有什么难度，这道题比较特殊的地方是要求 getMin() 的执行时间是O(1)。<br>为了达到这个要求，就需要将这些最小元素存储下来。所以需要用到两个栈，一个用来存实际的数据，一个用来存放实际栈的对应状态的最小值。   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class MinStack &#123;  </div><div class="line">    private List&lt;Integer&gt; stack = new ArrayList&lt;&gt;();  </div><div class="line">    private List&lt;Integer&gt; mins = new ArrayList&lt;&gt;();  </div><div class="line">    public void push(int x) &#123;  </div><div class="line">        stack.add(x);  </div><div class="line">        if (mins.size() == 0) mins.add(x);  </div><div class="line">        else mins.add(Math.min(x, mins.get(mins.size()-1)));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public void pop() &#123;  </div><div class="line">        int p = stack.get(stack.size()-1);  </div><div class="line">        stack.remove(stack.size()-1);  </div><div class="line">        mins.remove(mins.size()-1);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public int top() &#123;  </div><div class="line">        return stack.get(stack.size()-1);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public int getMin() &#123;  </div><div class="line">        return mins.get(mins.size()-1);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;155-Min-Stack-最小栈&quot;&gt;&lt;a href=&quot;#155-Min-Stack-最小栈&quot; class=&quot;headerlink&quot; title=&quot;155 Min Stack 最小栈&quot;&gt;&lt;/a&gt;155 Min Stack 最小栈&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;题目出处
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>数据库|join了解一下</title>
    <link href="http://yoursite.com/2018/04/15/%E6%95%B0%E6%8D%AE%E5%BA%93-join%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/"/>
    <id>http://yoursite.com/2018/04/15/数据库-join了解一下/</id>
    <published>2018-04-15T14:05:32.000Z</published>
    <updated>2018-04-15T07:10:30.811Z</updated>
    
    <content type="html"><![CDATA[<p>对于SQL的Join，在学习起来可能是比较乱的。我们知道，SQL的Join语法有很多inner的，有outer的，有left的，有时候，对于Select出来的结果集是什么样子有点不是很清楚。Coding Horror上有<a href="https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/" target="_blank" rel="external">一篇文章</a>通过 文氏图 Venn diagrams 解释了SQL的Join。我觉得清楚易懂，转过来。</p>
<p>假设我们有两张表。</p>
<ul>
<li>Table A 是左边的表。</li>
<li>Table B 是右边的表。</li>
</ul>
<p><img src="/images/sql-join01.png" alt="表数据"></p>
<p>下面让我们来看看不同的Join会产生什么样的结果。</p>
<h3 id="Inner-join"><a href="#Inner-join" class="headerlink" title="Inner join"></a>Inner join</h3><pre><code>SELECT * FROM TableA
INNER JOIN TableB
ON TableA.name = TableB.name

id  name       id   name
--  ----       --   ----
1   Pirate     2    Pirate
3   Ninja      4    Ninja
</code></pre><p>Inner join<br>产生的结果集中，是A和B的交集。</p>
<p><img src="/images/sql-join02.png" alt="Inner join"></p>
<h3 id="Full-outer-join"><a href="#Full-outer-join" class="headerlink" title="Full outer join"></a>Full outer join</h3><pre><code>SELECT * FROM TableA
FULL OUTER JOIN TableB
ON TableA.name = TableB.name

id    name       id    name
--    ----       --    ----
1     Pirate     2     Pirate
2     Monkey     null  null
3     Ninja      4     Ninja
4     Spaghetti  null  null
null  null       1     Rutabaga
null  null       3     Darth Vader
</code></pre><p>Full outer join 产生A和B的并集。但是需要注意的是，对于没有匹配的记录，则会以null做为值。</p>
<p><img src="/images/sql-join03.png" alt="Full join"></p>
<h4 id="special-use"><a href="#special-use" class="headerlink" title="special use"></a>special use</h4><pre><code>SELECT * FROM TableA
FULL OUTER JOIN TableB
ON TableA.name = TableB.name
WHERE TableA.id IS null
OR TableB.id IS null

id    name       id    name
--    ----       --    ----
2     Monkey     null  null
4     Spaghetti  null  null
null  null       1     Rutabaga
null  null       3     Darth Vader
</code></pre><p>产生A表和B表都没有出现的数据集。<br><img src="/images/sql-join06.png" alt="Full join"></p>
<h3 id="LEFT-OUTER-JOIN"><a href="#LEFT-OUTER-JOIN" class="headerlink" title="LEFT OUTER JOIN"></a>LEFT OUTER JOIN</h3><pre><code>SELECT * FROM TableA
LEFT OUTER JOIN TableB
ON TableA.name = TableB.name

id  name       id    name
--  ----       --    ----
1   Pirate     2     Pirate
2   Monkey     null  null
3   Ninja      4     Ninja
4   Spaghetti  null  null
</code></pre><p>Left outer join 产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代。</p>
<p><img src="/images/sql-join04.png" alt="left join"></p>
<h4 id="special-use-1"><a href="#special-use-1" class="headerlink" title="special use"></a>special use</h4><pre><code>SELECT * FROM TableA
LEFT OUTER JOIN TableB
ON TableA.name = TableB.name
WHERE TableB.id IS null 

id  name       id     name
--  ----       --     ----
2   Monkey     null   null
4   Spaghetti  null   null
</code></pre><p>产生在A表中有而在B表中没有的集合<br><img src="/images/sql-join05.png" alt="left join"></p>
<p>还需要知道的是我们还有一个是“交差集” cross join, 这种Join没有办法用文式图表示，因为其就是把表A和表B的数据进行一个N*M的组合，即笛卡尔积。表达式如下：</p>
<pre><code>SELECT * FROM TableA
CROSS JOIN TableB
</code></pre><p>这个笛卡尔乘积会产生 4 x 4 = 16 条记录，一般来说，我们很少用到这个语法。但是我们得小心，如果不是使用嵌套的select语句，一般系统都会产生笛卡尔乘积然再做过滤。这是对于性能来说是非常危险的，尤其是表很大的时候。</p>
<p><img src="/images/sql-join10.png" alt="cross join"></p>
<h3 id="了解一下"><a href="#了解一下" class="headerlink" title="了解一下"></a>了解一下</h3><p>通过上面的叙述，不难发现，我们完全可以从集合的角度来理解join的用法，不同的join使用就是为了满足集合的运算。</p>
<p><img src="/images/sql-join09.png" alt="总结"><br><img src="/images/sql-join07.png" alt="总结"><br><img src="/images/sql-join08.png" alt="总结"></p>
<h3 id="来个example"><a href="#来个example" class="headerlink" title="来个example"></a>来个example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">create table table_1 (</div><div class="line">	 `id` INT (11) NOT NULL,</div><div class="line">	user_name varchar(20) NOT NULL</div><div class="line">)</div><div class="line"></div><div class="line">create table table_2 (</div><div class="line">	 `id` INT (11) NOT NULL,</div><div class="line">	user_name varchar(20) NOT NULL</div><div class="line">)</div><div class="line"></div><div class="line"></div><div class="line">set sql_safe_updates=0;</div><div class="line">insert into table_1 values (1,&quot;zhangsan_1_1&quot;),(2,&quot;lisi_1_1&quot;),(3,&quot;wangmazi_1&quot;),(1,&quot;zhangsan_1_2&quot;),(2,&quot;lisi_1_2&quot;);</div><div class="line">select * from table_1</div><div class="line">-- DELETE from table_1</div><div class="line">insert into table_2 values (4,&quot;zhaoliu_2_1&quot;),(2,&quot;lisi_2_1&quot;),(3,&quot;wangmazi_2_1&quot;),(1,&quot;zhangsan_2&quot;),(2,&quot;lisi_2_2&quot;),(4,&quot;zhaoliu_2_2&quot;),(3,&quot;wangmazi_2_2&quot;)</div><div class="line">-- DELETE from table_2</div><div class="line">select * from table_2</div><div class="line">SELECT * FROM table_1 t1 INNER JOIN table_2 t2 ON t1.id = t2.id;</div><div class="line">SELECT * FROM table_1 t1 WHERE EXISTS (SELECT 1 FROM table_2 t2 WHERE t2.id = t1.id );</div><div class="line">-- 结果集：1+2==3</div><div class="line">-- 1、inner join： SELECT * FROM table_1 t1, table_2 t2 where t1.id = t2.id;</div><div class="line">-- 2、anti-join： SELECT * FROM table_1 t1, table_2 t2 where t1.id != t2.id;</div><div class="line">-- 3、cross join：select * from table_1 t1, table_2 t2; -- 不带条件等同于 cross join</div><div class="line"></div><div class="line"></div><div class="line">SELECT * FROM table_1 t1 WHERE EXISTS (SELECT 1 FROM table_2 t2 WHERE t2.id = t1.id );</div><div class="line">1   zhangsan_1_1</div><div class="line">2   lisi_1_1</div><div class="line">3   wangmazi_1</div><div class="line">1   zhangsan_1_2</div><div class="line">2   lisi_1_2</div><div class="line"></div><div class="line"></div><div class="line">SELECT * FROM table_1 t1 INNER JOIN table_2 t2 ON t1.id = t2.id;</div><div class="line">2   lisi_1_1        2   lisi_2_1</div><div class="line">2   lisi_1_2        2   lisi_2_1</div><div class="line">3   wangmazi_1      3   wangmazi_2_1</div><div class="line">1   zhangsan_1_1    1   zhangsan_2</div><div class="line">1   zhangsan_1_2    1   zhangsan_2</div><div class="line">2   lisi_1_1        2   lisi_2_2</div><div class="line">2   lisi_1_2        2   lisi_2_2</div><div class="line">3   wangmazi_1      3   wangmazi_2_2</div></pre></td></tr></table></figure>
<p><a href="https://my.oschina.net/leejun2005/blog/134719" target="_blank" rel="external">图文并茂教程</a><br><a href="http://www.cnblogs.com/rush/archive/2012/03/27/2420246.html" target="_blank" rel="external">SQL Join的一些总结</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于SQL的Join，在学习起来可能是比较乱的。我们知道，SQL的Join语法有很多inner的，有outer的，有left的，有时候，对于Select出来的结果集是什么样子有点不是很清楚。Coding Horror上有&lt;a href=&quot;https://blog.codin
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络|tcp三次握手四次分手</title>
    <link href="http://yoursite.com/2018/04/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E5%88%86%E6%89%8B/"/>
    <id>http://yoursite.com/2018/04/15/计算机网络-tcp三次握手四次分手/</id>
    <published>2018-04-14T22:44:55.000Z</published>
    <updated>2018-04-15T06:10:35.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>TCP(Transmission Control Protocol)　传输控制协议。之前对于TCP的三次握手和四次分手也是模模糊糊，对于其中的细节更是浑然不知，最近看了很多这方面的知识，也在系统的学习计算机网络，加深自己的CS功底，就把看过的一些比较好的东西和自己的一些理解二次加工组织一下然后交流分享，一起学习进步，对了这个面试好像经常问到。</p>
<h3 id="通俗理解"><a href="#通俗理解" class="headerlink" title="通俗理解"></a>通俗理解</h3><p><img src="/images/tcp三次握手01.png" alt="通俗理解"></p>
<p>但是为什么一定要进行三次握手来保证连接是双工的呢，一次不行么？两次不行么？我们举一个现实生活中两个人进行语言沟通的例子来模拟三次握手。</p>
<p>引用网上的一些通俗易懂的例子，虽然不太正确，后面会指出，但是不妨碍我们理解，大体就是这么个理解法。</p>
<p>第一次对话：<br>老婆让甲出去打酱油，半路碰到一个朋友乙，甲问了一句：哥们你吃饭了么？</p>
<p>结果乙带着耳机听歌呢，根本没听到，没反应。甲心里想：跟你说话也没个音，不跟你说了，沟通失败。说明乙接受不到甲传过来的信息的情况下沟通肯定是失败的。</p>
<p>如果乙听到了甲说的话，那么第一次对话成功，接下来进行第二次对话。</p>
<p>第二次对话：<br>乙听到了甲说的话，但是他是老外，中文不好，不知道甲说的啥意思也不知道怎样回答，于是随便回答了一句学过的中文 ：我去厕所了。甲一听立刻笑喷了，“去厕所吃饭”?道不同不相为谋，离你远点吧，沟通失败。说明乙无法做出正确应答的情况下沟通失败。</p>
<p>如果乙听到了甲的话，做出了正确的应答，并且还进行了反问：我吃饭了，你呢？那么第二次握手成功。</p>
<p>通过前两次对话证明了乙能够听懂甲说的话，并且能做出正确的应答。 接下来进行第三次对话。</p>
<p>第三次对话：<br>甲刚和乙打了个招呼，突然老婆喊他，“你个死鬼，打个酱油咋这么半天，看我回家咋收拾你”，甲是个妻管严，听完吓得二话不说就跑回家了，把乙自己晾那了。乙心想：这什么人啊，得，我也回家吧，沟通失败。说明甲无法做出应答的情况下沟通失败。</p>
<p>如果甲也做出了正确的应答：我也吃了。那么第三次对话成功，两人已经建立起了顺畅的沟通渠道，接下来开始持续的聊天。</p>
<p>通过第二次和第三次的对话证明了甲能够听懂乙说的话，并且能做出正确的应答。</p>
<p>可见，两个人进行有效的语言沟通，这三次对话的过程是必须的。</p>
<p>为了保证服务端能收接受到客户端的信息并能做出正确的应答而进行前两次(第一次和第二次)握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次(第二次和第三次)握手。</p>
<p>这个例子举得挺好的。不过个人感觉为什么是三次而不是二次，不是因为为了证明甲能听懂乙并回应（第二次乙能正确的响应甲说明俩人之间沟通已无障碍了），而是怕出现以下情况而浪费感情。这个情景是这样的（例子有点不实际意会就好）：甲在路上跟乙打招呼，由于刮风什么的这句话被吹跑了，然后甲又跟打了个招呼，乙听到了并作出了回应。此时不管是三次握手还是两次握手两个人都能愉快的沟通。0.1秒后俩人四次挥手告别了。此时被风刮跑的那句话又传到了乙的耳朵里，乙认为甲又要跟他沟通，所以做出了响应的回应。（问题出现了）假如采用2次握手，乙就认定了甲要跟他沟通，于是就不停的等，浪费感情。可如果是采用3次握手，乙等了一会后发现甲没有回应他就认为甲走了然后自己也就走了！</p>
<p>这就很明白了，其实第三步是防止了乙的一直等待而浪费自己的时间，而不是为了保证甲能够正确回应乙的信息。。。后面的也会讲到。</p>
<p>引用知乎上的别人引用的一个回答，从另外一个角度阐释：</p>
<blockquote>
<p>在Google Groups的TopLanguage中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“TCP建立连接为什么是三次握手？”的问题，在众多回复中，有一条回复写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。这可视为对“三次握手”目的的另一种解答思路。</p>
</blockquote>
<p>上面的纯属大白话娱乐讲解，可能还有偏差，例子可能有点不得体。在我们真正了解TCP的三次握手和四次分手之前，必须了解一些基本的概念，最后和这大白话例子对比结合一下理解，说不定就会顿时融会贯通。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;TCP(Transmission Control Protocol)　传输控制协议。之前对于TCP的三次握手和四次分手也是模模糊糊，对于其中
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>爬虫|Requests的使用</title>
    <link href="http://yoursite.com/2018/04/14/%E7%88%AC%E8%99%AB-Request%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/14/爬虫-Request的使用/</id>
    <published>2018-04-14T08:50:12.000Z</published>
    <updated>2018-04-14T02:00:30.899Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识-requests"><a href="#初识-requests" class="headerlink" title="初识 requests"></a>初识 requests</h3><p>requests 库的宣言是</p>
<p>HTTP for Humans （给人用的 HTTP 库）</p>
<p>我们首先来验证一下。</p>
<p>在网络编程中，最最基本的任务包含：</p>
<ul>
<li>发送请求</li>
<li>登录</li>
<li>获取数据</li>
<li>解析数据</li>
<li>反序列化打印内容</li>
</ul>
<p>我们以 GitHub 为例，先看一下使用 urllib2 要怎么做。为了把事情弄简单点，我们假设实现已经知道，GET 请求 <a href="https://api.github.com/" target="_blank" rel="external">https://api.github.com/</a> 返回的内容是个 JSON 格式的数据（实际上通过 content-type 也能判断）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import urllib2</div><div class="line">import json</div><div class="line"></div><div class="line">gh_url  = &apos;https://api.github.com&apos;</div><div class="line">cs_user = &apos;user&apos;</div><div class="line">cs_psw  = &apos;password&apos;</div><div class="line"></div><div class="line">req = urllib2.Request(gh_url)</div><div class="line"></div><div class="line">password_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()</div><div class="line">password_manager.add_password(None, gh_url, cs_user, cs_psw)</div><div class="line"></div><div class="line">auth_manager = urllib2.HTTPBasicAuthHandler(password_manager)</div><div class="line">opener = urllib2.build_opener(auth_manager)</div><div class="line"></div><div class="line">urllib2.install_opener(opener)</div><div class="line"></div><div class="line">handler = urllib2.urlopen(req)</div><div class="line"></div><div class="line">if handler.getcode() == requests.codes.ok:</div><div class="line">    text = handler.read()</div><div class="line">    d_text = json.loads(text)</div><div class="line">    for k, v in d_text.items():</div><div class="line">        print k, v</div></pre></td></tr></table></figure></p>
<p>如果运行正确，那么代码应该返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">issues_url https://api.github.com/issues</div><div class="line">current_user_repositories_url https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;</div><div class="line">rate_limit_url https://api.github.com/rate_limit</div><div class="line">repository_url https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;</div><div class="line">...</div><div class="line">user_repositories_url https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;</div><div class="line">team_url https://api.github.com/teams</div></pre></td></tr></table></figure></p>
<p>同样的效果，用 requests 库则有如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url  = &apos;https://api.github.com&apos;</div><div class="line">cs_user = &apos;user&apos;</div><div class="line">cs_psw  = &apos;password&apos;</div><div class="line"></div><div class="line">r = requests.get(cs_url, auth=(cs_user, cs_psw))</div><div class="line"></div><div class="line">if r.status_code == requests.codes.ok</div><div class="line">    for k, v in r.json().items():</div><div class="line">        print k, v</div></pre></td></tr></table></figure></p>
<p>溢美之词就不用说了，读到这里的你心里肯定只有一声「卧槽，这才是 Python 该有的样子」。那么，接下来我们看看 requests 都有哪些黑魔法。</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>requests 的基本用法，呃，真是不能再基本了。最基本的操作，就是以某种 HTTP 方法向远端服务器发送一个请求而已；而 requests 库就是这么做的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://httpbin.org&apos;</div><div class="line"></div><div class="line">r = requests.get(&quot;%s/%s&quot; % (cs_url, &apos;get&apos;))</div><div class="line">r = requests.post(&quot;%s/%s&quot; % (cs_url, &apos;post&apos;))</div><div class="line">r = requests.put(&quot;%s/%s&quot; % (cs_url, &apos;put&apos;))</div><div class="line">r = requests.delete(&quot;%s/%s&quot; % (cs_url, &apos;delete&apos;))</div><div class="line">r = requests.patch(&quot;%s/%s&quot; % (cs_url, &apos;patch&apos;))</div><div class="line">r = requests.options(&quot;%s/%s&quot; % (cs_url, &apos;get&apos;))</div></pre></td></tr></table></figure>
<p>从语法上看，requests 库设计的非常自然。所谓 requests.get，就是以 GET 方式发送一个 REQUEST，得到一个 Response 类的结果，保存为 r。</p>
<p>你可以在 r 中取得所有你想得到的和 HTTP 有关的信息。下面，我们以 GET 方法为例，依次介绍。</p>
<h3 id="URL-传参-获取请求的-URL"><a href="#URL-传参-获取请求的-URL" class="headerlink" title="URL 传参 / 获取请求的 URL"></a>URL 传参 / 获取请求的 URL</h3><p>如果你经常上网（废话，看到这里的都上过网吧……），一定见过类似下面的链接：<a href="https://encrypted.google.com/search?q=hello" target="_blank" rel="external">https://encrypted.google.com/search?q=hello</a></p>
<p>即：</p>
<blockquote>
<p>&lt;协议&gt;://&lt;域名&gt;/&lt;接口&gt;?&lt;键1&gt;=&lt;值1&gt;&amp;&lt;键2&gt;=&lt;值2&gt;</p>
</blockquote>
<p>requests 库提供的 HTTP 方法，都提供了名为 params 的参数。这个参数可以接受一个 Python 字典，并自动格式化为上述格式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://www.so.com/s&apos;</div><div class="line">param  = &#123;&apos;ie&apos;:&apos;utf-8&apos;, &apos;q&apos;:&apos;query&apos;&#125;</div><div class="line"></div><div class="line">r = requests.get (cs_url, params = param)</div><div class="line">print r.url</div></pre></td></tr></table></figure>
<p>运行将得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.so.com/s?q=query&amp;ie=utf-8</div></pre></td></tr></table></figure></p>
<h3 id="HTTP-状态码-重定向跳转"><a href="#HTTP-状态码-重定向跳转" class="headerlink" title="HTTP 状态码 / 重定向跳转"></a>HTTP 状态码 / 重定向跳转</h3><p>requests 库定义的 Response 类可以方便地获取请求的 HTTP 状态码和重定向状态。</p>
<p>360 公司的搜索引擎，原名「好搜」，现在改为「360 搜索」；域名也从 www.haosou.com 改成了 www.so.com。如果你在地址栏输入 www.haosou.com，那么会经由 302 跳转到 www.so.com。我们借此来演示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://www.so.com/s&apos;</div><div class="line">param  = &#123;&apos;ie&apos;:&apos;utf-8&apos;, &apos;q&apos;:&apos;query&apos;&#125;</div><div class="line">r = requests.get (cs_url, params = param)</div><div class="line">print r.url, r.status_code</div><div class="line"></div><div class="line">cs_url = &apos;http://www.haosou.com/s&apos;</div><div class="line">r = requests.get (cs_url, params = param)</div><div class="line">print r.url, r.status_code, r.history</div></pre></td></tr></table></figure></p>
<p>结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://www.so.com/s?q=query&amp;ie=utf-8 200</div><div class="line">http://www.so.com/s?q=query&amp;ie=utf-8 200 [&lt;Response [302]&gt;]</div></pre></td></tr></table></figure></p>
<p>我们发现，requests 默认自动地处理了 302 跳转。在经过跳转的请求中，返回的 URL 和状态码都是跳转之后的信息；唯独在 history 中，用 Python 列表记录了跳转情况。</p>
<p>大多数情况下，自动处理是挺好的。不过，有时候我们也想单步追踪页面跳转情况。此时，可以给请求加上 allow_redirects = False 参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://www.so.com/s&apos;</div><div class="line">param  = &#123;&apos;ie&apos;:&apos;utf-8&apos;, &apos;q&apos;:&apos;query&apos;&#125;</div><div class="line">r = requests.get (cs_url, params = param)</div><div class="line">print r.url, r.status_code</div><div class="line"></div><div class="line">cs_url = &apos;http://www.haosou.com/s&apos;</div><div class="line">r = requests.get (cs_url, params = param, allow_redirects = False)</div><div class="line">print r.url, r.status_code, r.history</div></pre></td></tr></table></figure></p>
<p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://www.so.com/s?q=query&amp;ie=utf-8 200</div><div class="line">http://www.haosou.com/s?q=query&amp;ie=utf-8 302 []</div></pre></td></tr></table></figure></p>
<p>不允许 requests 自动处理跳转后，返回的 URL 和状态码都符合预期了。</p>
<h3 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h3><p>requests 的超时设置以秒为单位。例如，对请求加参数 timeout = 5 即可设置超时为 5 秒。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># a very short timeout is set intentionally</div><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://www.zhihu.com&apos;</div><div class="line">r = requests.get (cs_url, timeout = 0.000001)</div></pre></td></tr></table></figure></p>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>我们先来看一下 requests 发出的 HTTP 报文默认的请求头是什么样子的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://httpbin.org/get&apos;</div><div class="line">r = requests.get (cs_url)</div><div class="line">print r.content</div></pre></td></tr></table></figure></p>
<p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;args&quot;: &#123;&#125;,</div><div class="line">  &quot;headers&quot;: &#123;</div><div class="line">    &quot;Accept&quot;: &quot;*/*&quot;,</div><div class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</div><div class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</div><div class="line">    &quot;User-Agent&quot;: &quot;python-requests/2.7.0 CPython/2.7.10 Windows/7&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;origin&quot;: &quot;xx.xx.xx.xx&quot;,</div><div class="line">  &quot;url&quot;: &quot;http://httpbin.org/get&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通常我们比较关注其中的 User-Agent 和 Accept-Encoding。如果我们要修改 HTTP 头中的这两项内容，只需要将一个合适的字典参数传给 headers 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">my_headers = &#123;&apos;User-Agent&apos; : &apos;From Liam Huang&apos;, &apos;Accept-Encoding&apos; : &apos;gzip&apos;&#125;</div><div class="line">cs_url = &apos;http://httpbin.org/get&apos;</div><div class="line">r = requests.get (cs_url, headers = my_headers)</div><div class="line">print r.content</div></pre></td></tr></table></figure></p>
<p>返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;args&quot;: &#123;&#125;,</div><div class="line">  &quot;headers&quot;: &#123;</div><div class="line">    &quot;Accept&quot;: &quot;*/*&quot;,</div><div class="line">    &quot;Accept-Encoding&quot;: &quot;gzip&quot;,</div><div class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</div><div class="line">    &quot;User-Agent&quot;: &quot;From Liam Huang&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;origin&quot;: &quot;xx.xx.xx.xx&quot;,</div><div class="line">  &quot;url&quot;: &quot;http://httpbin.org/get&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，UA 和 AE 都已经被修改了。</p>
<h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>作为 HTTP 请求的响应，返回的内容中也有 HTTP 头。它是一个反序列化为 Python 字典的数据结构，可以通过 Response.headers 来查看。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://httpbin.org/get&apos;</div><div class="line">r = requests.get (cs_url)</div><div class="line">print r.headers</div></pre></td></tr></table></figure>
<p>返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;content-length&quot;: &quot;263&quot;,</div><div class="line">    &quot;server&quot;: &quot;nginx&quot;,</div><div class="line">    &quot;connection&quot;: &quot;keep-alive&quot;,</div><div class="line">    &quot;access-control-allow-credentials&quot;: &quot;true&quot;,</div><div class="line">    &quot;date&quot;: &quot;Fri, 26 Feb 2016 10:26:17 GMT&quot;,</div><div class="line">    &quot;access-control-allow-origin&quot;: &quot;*&quot;,</div><div class="line">    &quot;content-type&quot;: &quot;application/json&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h3><h4 id="字节模式-自动解包"><a href="#字节模式-自动解包" class="headerlink" title="字节模式 / 自动解包"></a>字节模式 / 自动解包</h4><p>长期以来，互联网都存在带宽有限的情况。因此，网络上传输的数据，很多情况下都是经过压缩的。经由 requests 发送的请求，当收到的响应内容经过 gzip 或 deflate 压缩时，requests 会自动为我们解包。我们可以用 Response.content 来获得以字节形式返回的相应内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://www.zhihu.com&apos;</div><div class="line">r = requests.get (cs_url)</div><div class="line"></div><div class="line">if r.status_code == requests.codes.ok:</div><div class="line">    print r.content</div></pre></td></tr></table></figure>
<p>这相当于 urllib2.urlopen(url).read()。</p>
<p>如果相应内容不是文本，而是二进制数据（比如图片），那么上述打印结果可能会糊你一脸。这里以图片为例，示例一下该怎么办。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from PIL import Image</div><div class="line">from StringIO import StringIO</div><div class="line"></div><div class="line">cs_url = &apos;http://liam0205.me/uploads/avatar/avatar-2.jpg&apos;</div><div class="line">r = requests.get (cs_url)</div><div class="line"></div><div class="line">if r.status_code == requests.codes.ok:</div><div class="line">    Image.open(StringIO(r.content)).show()</div></pre></td></tr></table></figure>
<h4 id="文本模式-编码"><a href="#文本模式-编码" class="headerlink" title="文本模式 / 编码"></a>文本模式 / 编码</h4><p>如果响应返回是文本，那么你可以用 Response.text 获得 Unicode 编码的响应返回内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://www.zhihu.com&apos;</div><div class="line">r = requests.get (cs_url)</div><div class="line"></div><div class="line">if r.status_code == requests.codes.ok:</div><div class="line">    print r.text</div></pre></td></tr></table></figure>
<p>要获得 Unicode 编码的结果，意味着 requests 会为我们做解码工作。那么 requests 是按照何种编码去对返回结果解码的呢？</p>
<p>requests 会读取 HTTP header 中关于字符集的内容。如果获取成功，则会依此进行解码；若不然，则会根据响应内容对编码进行猜测。具体来说，我们可以用 Response.encoding 来查看/修改使用的编码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url = &apos;http://www.zhihu.com&apos;</div><div class="line">r = requests.get (cs_url)</div><div class="line"></div><div class="line">if r.status_code == requests.codes.ok:</div><div class="line">    print r.encoding</div></pre></td></tr></table></figure>
<h4 id="反序列化-JSON-数据"><a href="#反序列化-JSON-数据" class="headerlink" title="反序列化 JSON 数据"></a>反序列化 JSON 数据</h4><p>开篇给出的第一个 requests 示例中，特别吸引人的一点就是 requests 无需任何其他库，就能解析序列化为 JSON 格式的数据。</p>
<p>我们以 IP 查询 Google 公共 DNS 为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">cs_url   = &apos;http://ip.taobao.com/service/getIpInfo.php&apos;</div><div class="line">my_param = &#123;&apos;ip&apos;:&apos;8.8.8.8&apos;&#125;</div><div class="line"></div><div class="line">r = requests.get(cs_url, params = my_param)</div><div class="line"></div><div class="line">print r.json()[&apos;data&apos;][&apos;country&apos;].encode(&apos;utf-8&apos;)</div></pre></td></tr></table></figure></p>
<p>结果将输出：</p>
<p><code>美国</code></p>
<p><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html#" target="_blank" rel="external">快速上手</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初识-requests&quot;&gt;&lt;a href=&quot;#初识-requests&quot; class=&quot;headerlink&quot; title=&quot;初识 requests&quot;&gt;&lt;/a&gt;初识 requests&lt;/h3&gt;&lt;p&gt;requests 库的宣言是&lt;/p&gt;
&lt;p&gt;HTTP for Hum
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>PHP|PHP连贯查询操作的两种实现原理</title>
    <link href="http://yoursite.com/2018/04/14/PHP-PHP%E8%BF%9E%E8%B4%AF%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/14/PHP-PHP连贯查询操作的两种实现原理/</id>
    <published>2018-04-13T19:15:56.000Z</published>
    <updated>2018-04-13T11:19:16.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>一些常见的框架都支持PHP连贯查询操作，那这是怎么实现的呢？</p>
<p><code>$result = $db-&gt;limit(&#39;0,10&#39;)-&gt;order(&#39;id desc&#39;)-&gt;findall();</code></p>
<p>“-&gt;”只能用于访问对象中的方法，所以 limit 和 order 肯定都返回的是对象。</p>
<h3 id="第一种：不使用-call"><a href="#第一种：不使用-call" class="headerlink" title="第一种：不使用__call()"></a>第一种：不使用__call()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class db &#123;</div><div class="line">	private $sql = array(</div><div class="line">		&quot;from&quot;  =&gt; &quot;&quot;,</div><div class="line">		&quot;where&quot; =&gt; &quot;&quot;,</div><div class="line">		&quot;order&quot; =&gt; &quot;&quot;,</div><div class="line">		&quot;limit&quot; =&gt; &quot;&quot;</div><div class="line">		);</div><div class="line"> </div><div class="line">	public function from($tableName) &#123;</div><div class="line">		$this-&gt;sql[&quot;from&quot;]=&quot;$tableName&quot;;</div><div class="line">		return $this;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	public function where($where=&apos;1=1&apos;) &#123;</div><div class="line">		$this-&gt;sql[&quot;where&quot;]=&quot;$where&quot;;</div><div class="line">		return $this;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	public function order($order=&apos;id DESC&apos;) &#123;</div><div class="line">		$this-&gt;sql[&quot;order&quot;]=&quot;BY $order&quot;;</div><div class="line">		return $this;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	public function limit($limit=&apos;30&apos;) &#123;</div><div class="line">		$this-&gt;sql[&quot;limit&quot;]=&quot;$limit&quot;;</div><div class="line">		return $this;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public function select($select=&apos;*&apos;) &#123;</div><div class="line">		$sql = &quot;SELECT $select &quot;;</div><div class="line">		foreach ($this-&gt;sql as $key =&gt; $value) &#123;</div><div class="line">			$sql .= strtoupper($key).&quot; $value &quot;;</div><div class="line">		&#125;</div><div class="line">		return $sql;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$db =new db();</div><div class="line">echo $db-&gt;from(&quot;testTable&quot;)-&gt;where(&quot;id=1&quot;)-&gt;order(&quot;id DESC&quot;)-&gt;limit(10)-&gt;select();</div><div class="line">// 输出 SELECT * FROM testTable WHERE id=1 ORDER BY id DESC LIMIT 10</div><div class="line">?&gt;</div><div class="line">`</div></pre></td></tr></table></figure>
<h3 id="第二种：-call"><a href="#第二种：-call" class="headerlink" title="第二种：__call()"></a>第二种：__call()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">class db &#123;</div><div class="line">	private $sql = array(</div><div class="line">		&quot;from&quot;  =&gt; &quot;&quot;,</div><div class="line">		&quot;where&quot; =&gt; &quot;&quot;,</div><div class="line">		&quot;order&quot; =&gt; &quot;&quot;,</div><div class="line">		&quot;limit&quot; =&gt; &quot;&quot;</div><div class="line">		);</div><div class="line"></div><div class="line">	public function __call($func, $args) &#123;</div><div class="line">		if (in_array($func, array(&apos;form&apos;,&apos;where&apos;,&apos;order&apos;,&apos;limit&apos;))) &#123;</div><div class="line">			$this-&gt;sql[$func] = $args;</div><div class="line">			return $this;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public function select($select=&apos;*&apos;) &#123;</div><div class="line">		$sql = &quot;SELECT $select &quot;;</div><div class="line">		foreach ($this-&gt;sql as $key =&gt; $value) &#123;</div><div class="line">			$sql .= strtoupper($key).&quot; $value &quot;;</div><div class="line">		&#125;</div><div class="line">		return $sql;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$db =new db();</div><div class="line">echo $db-&gt;from(&quot;testTable&quot;)-&gt;where(&quot;id=1&quot;)-&gt;order(&quot;BY id DESC&quot;)-&gt;limit(10)-&gt;select();</div><div class="line">// 输出 SELECT * FROM testTable WHERE id=1 ORDER BY id DESC LIMIT 10</div><div class="line">?&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;一些常见的框架都支持PHP连贯查询操作，那这是怎么实现的呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$result = $db-&amp;gt;limit(&amp;#
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统|浮点数的表示</title>
    <link href="http://yoursite.com/2018/04/14/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/04/14/深入理解计算机系统-浮点数的表示/</id>
    <published>2018-04-13T17:14:01.000Z</published>
    <updated>2018-04-13T09:22:17.684Z</updated>
    
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<h3 id="第三次小班课-浮点数"><a href="#第三次小班课-浮点数" class="headerlink" title="第三次小班课|浮点数"></a>第三次小班课|浮点数</h3><ul>
<li><h4 id="浮点数的表示及IEEE-浮点格式"><a href="#浮点数的表示及IEEE-浮点格式" class="headerlink" title="浮点数的表示及IEEE 浮点格式"></a>浮点数的表示及IEEE 浮点格式</h4></li>
<li><h4 id="浮点数的表示范围"><a href="#浮点数的表示范围" class="headerlink" title="浮点数的表示范围"></a>浮点数的表示范围</h4></li>
</ul>
<hr>
<h3 id="在讲之前，来段程序"><a href="#在讲之前，来段程序" class="headerlink" title="在讲之前，来段程序"></a>在讲之前，来段程序</h3><pre><code>C语言
#include&lt;stdio.h&gt;
int main(){
    float sum;
    int i;
    //将保存总和量清0
    sum = 0;
    //将0.1累加100次
    for(i=1;i&lt;=100;i++){
        sum += 0.1;
    }
    //显示结果
    printf(&quot;%f\n&quot;,sum);
    return 0;
}
</code></pre><p>代码的作用很简单，就是将0.1累加100次，大家猜猜结果是什么呀？</p>
<hr>
<h3 id="程序的结果"><a href="#程序的结果" class="headerlink" title="程序的结果"></a>程序的结果</h3><p><img src="/images/07.png" alt="result"></p>
<p>哇塞，神通无比的计算机也出错了，是程序出bug了？还是什么原因呢？</p>
<p>仔细观察，程序是没错的，要想找到答案，只有到计算机的内部，看看计算机是怎么处理小数的。</p>
<hr>
<h3 id="二进制小数"><a href="#二进制小数" class="headerlink" title="二进制小数"></a>二进制小数</h3><p>我们先来看看二进制是如何表示小数的，这有助于我们理解浮点数的表示。如果是一个十进制小数，相信各位都再熟悉不过了，对于12345.6789来说，它的值是由下列式子得到的。</p>
<p><img src="/images/03.png" alt="整数"></p>
<p>　　这对我们来说应该是常识，那么对于二进制小数也是类似的，考虑这样一个小数10010.1110，它的值则可以由以下式子得到。</p>
<p><img src="/images/02.png" alt="二进制小数"></p>
<p>　　从这个角度来看，二进制小数其实与十进制小数是一样的计算方式，只是这里是2的整数次幂而已。</p>
<p>　　在书中给出了二进制小数的公式，对于一个形式为bm….b0.b-1….b-n的二进制小数b来说，它的值为以下计算方式。</p>
<p><img src="/images/04.png" alt="二进制小数"></p>
<hr>
<h3 id="来看一个表"><a href="#来看一个表" class="headerlink" title="来看一个表"></a>来看一个表</h3><table>
<thead>
<tr>
<th>二进制数</th>
<th>十进制数</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.0000</td>
<td>0</td>
</tr>
<tr>
<td>0.0001</td>
<td>0.0625</td>
</tr>
<tr>
<td>0.0010</td>
<td>0.125</td>
</tr>
<tr>
<td>0.0011</td>
<td>0.1875</td>
</tr>
<tr>
<td>0.0100</td>
<td>0.25</td>
</tr>
<tr>
<td>0.0101</td>
<td>0.3125</td>
</tr>
<tr>
<td>0.0110</td>
<td>0.375</td>
</tr>
<tr>
<td>0.0111</td>
<td>0.4375</td>
</tr>
<tr>
<td>0.1000</td>
<td>0.5</td>
</tr>
<tr>
<td>0.1001</td>
<td>0.5625</td>
</tr>
<tr>
<td>0.1010</td>
<td>0.625</td>
</tr>
<tr>
<td>0.1011</td>
<td>0.6875</td>
</tr>
<tr>
<td>0.1100</td>
<td>0.75</td>
</tr>
<tr>
<td>0.1101</td>
<td>0.8125</td>
</tr>
<tr>
<td>0.1110</td>
<td>0.875</td>
</tr>
<tr>
<td>0.1111</td>
<td>0.9375</td>
</tr>
</tbody>
</table>
<p>对于连续的二进制数，对应的十进制数是不连续的。</p>
<hr>
<h3 id="IEEE标准"><a href="#IEEE标准" class="headerlink" title="IEEE标准"></a>IEEE标准</h3><blockquote>
<p>电气和电子工程师协会( IEEE，全称是Institute of Electrical and Electronics Engineers)是一个国际性的电子技术与信息科学工程师的协会，是目前全球最大的非营利性专业技术学会，其会员人数超过40万人，遍布160多个国家。IEEE致力于电气、电子、计算机工程和与科学有关的领域的开发和研究，在太空、计算机、电信、生物医学、电力及消费性电子产品等领域已制定了900多个行业标准，现已发展成为具有较大影响力的国际学术组织。</p>
</blockquote>
<p>根据IEEE标准，任意一个二进制浮点数V可以表示成下面的形式：</p>
<p><img src="/images/01.png" alt="IEEE标准"></p>
<hr>
<h3 id="不如来些例子"><a href="#不如来些例子" class="headerlink" title="不如来些例子"></a>不如来些例子</h3><p><img src="/images/01.png" alt="IEEE标准"></p>
<ul>
<li>十进制的5.0，写成二进制是101.0，相当于1.01×2^2。那么，按照上面V的格式，可以得出s=0，M=1.01，E=2。</li>
<li>十进制的-5.0，写成二进制是-101.0，相当于-1.01×2^2。那么，s=1，M=1.01，E=2。</li>
</ul>
<hr>
<h3 id="M-尾数部分"><a href="#M-尾数部分" class="headerlink" title="M 尾数部分"></a>M 尾数部分</h3><ul>
<li>M 尾数部分使用正则表达式，可以将表现形式多样的浮点数统一为一种表现形式。例如，十进制数0.75有如下表示方法：</li>
</ul>
<p><img src="/images/05.jpg" alt="0.75"></p>
<p>对于十进制数来说，应该遵循”小数点前面是0，小数点后面第一位不能是0的”这样的规则。同理，对二进制数来说，它也应该有自己的规则：“将小数点前面的值固定为1的正则表达式”。具体的操作就是将二进制数进行小数左移或右移数次后，整数部分第一位变为 1 。同时，在计算机的存储中，第一位的 1 不保存，原因是第一位必须为 1 。因此，省略改部分后，就节省了一个数据位，从而能表示更多的数据范围。</p>
<pre><code>1011.0011                     ...原始数值
    |
0001.0110011                  ...右移是整数部分使第一位变为 1
    |
0001.01100110000000000000000  ...确保小数点后的长度为23位
    |
01100110000000000000000       ...仅保留小数点后面的部分，完成正则表达式
</code></pre><hr>
<h3 id="E-指数部分"><a href="#E-指数部分" class="headerlink" title="E 指数部分"></a>E 指数部分</h3><ul>
<li>E 指数部分采用的是EXCESS系统，使用这种方法主要是<strong>为了表示负数时不用使用符号位</strong>。在某些情况下，在指数部分，需要通过“负00次幂”的形式来表示负数。EXCESS系统是指，通过将指数部分表示范围的中间值设为0，使得负数不用用符号位来表示。</li>
<li>也就是说，当指数部分是八位单精度浮点数时，最大值11111111 = 255 的 1/2，即01111111 = 127 表述的是 0 ；是 11 位双精度浮点数时 11111111111 = 2047 的 1/2.即01111111111 = 1023 表述 0。</li>
</ul>
<p><img src="/images/06.jpg" alt="0.75"></p>
<hr>
<h3 id="来实际操作一些"><a href="#来实际操作一些" class="headerlink" title="来实际操作一些"></a>来实际操作一些</h3><p>举个例子，十进制数 0.75 在32位的计算机中是怎么表示的呢？来个程序验证一下。</p>
<pre><code>#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
int main(){
    float data;
    unsigned long buff;
    int i;
    char s[34];
    scanf(&quot;%f&quot;,&amp;data);
    //把数据复制4字节长度的整数变量buff中以逐个取出每一位
    memcpy(&amp;buff,&amp;data,4);
    for(i=33;i&gt;=0;i--){
        if(i==1 || i==10){
            s[i] = &apos;-&apos;;
        }else{
            if(buff%2==1){
                s[i] = &apos;1&apos;;
            }else{
                s[i] = &apos;0&apos;;
            }
            buff/=2;
        }
    }
    s[34] = &apos;\0&apos;;
    printf(&quot;%s\n&quot;,s );
    return 0;
}
</code></pre><hr>
<h3 id="result"><a href="#result" class="headerlink" title="result"></a>result</h3><p>程序执行的结果</p>
<p><img src="/images/08.png" alt="result"></p>
<p>内部表示</p>
<pre><code>符号部分 ... 0表示整数
|   指数部分 ...转换成十进制数是126，在EXCESS系统下，表示的是 126-127 = -1
|      |
0-01111110-10000000000000000000000
                    |
        尾数部分...表示的是1.以后的部分，也就是1.10000000000000000000000
该数据用二进制表示为 1.1x2^-1,用十进制表示为 1.5x2^-1 = 0.75
</code></pre><hr>
<h3 id="开头的0-1呢？"><a href="#开头的0-1呢？" class="headerlink" title="开头的0.1呢？"></a>开头的0.1呢？</h3><p><img src="/images/10.png" alt="result"></p>
<pre><code>符号部分 ... 0表示整数
|   指数部分 ...转换成十进制数是123，在EXCESS系统下，表示的是 123-127 = -4
|      |
0-01111011-10011001100110011001101
                    |
        尾数部分...表示的是1.以后的部分，也就是1.10011001100110011001101
该数据用二进制表示为 1.10011001100110011001101x2^-4,
用十进制表示为 1.600000023841858 x2^-4 = 0.1000000014901161
</code></pre><hr>
<h3 id="一些精华"><a href="#一些精华" class="headerlink" title="一些精华"></a>一些精华</h3><p>针对阶码E的值，浮点数的值可以分为三种不同的情况，分别是规格化的，非规格化的以及特殊值，这三种情况就是浮点数的奥义所在了。首先给出一个书中对于单精度的三种情况的图示描述，分别是1、2、3，其中3也就是特殊值又分了两种情况3a和3b。</p>
<p><img src="/images/11.jpg" alt="special"></p>
<hr>
<h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3><p>规格化的浮点数是上述的第1种情况，对于单精度来说，也就是指数不为0且不为255的这种情况。</p>
<p>在此范围内的浮点数，阶码会被转换成一个“偏置”后的有符号数。“偏置”的含义就是在原有的值的基础上加上一个偏移量，对于阶码位数为k的情况来说，偏移量$Bias = 2^{k-1}-1$。假设e是阶码的无符号数值，那么真实的阶码E = e - Bias。举个例子，假设阶码位数为8，则Bias = 127。由于8位阶码下的规格化的浮点数的阶码范围是1至254，因此真实阶码的范围则为-126至127。</p>
<p>对于尾数的解释，则是一个小于1的小数或者0。也就是假设尾数位表示为fn-1…f0，则f的值为0.fn-1…f0。这只是尾数的值，当计算浮点数数值的时候，会在尾数值的基础上加1，也就是真实的尾数M = 1 + f。相当于我们省掉了1位二进制，形成了浮点数表示的约定，默认尾数的值还有一个最高位的1。</p>
<hr>
<h3 id="规范化取值范围"><a href="#规范化取值范围" class="headerlink" title="规范化取值范围"></a>规范化取值范围</h3><p>　对于规格化的浮点数来说，同样有三个比较重要的取值。</p>
<p>1、当阶码为最低位为1，其余全为0，尾数为n个0时，此时的值为最小的规格化的值。它此时的阶码恰好与非规格化的阶码相同，都为$E=2-2^{k-1}$而它的尾数值则很好计算，由于尾数全部为0，则M = 1 + f = 1。因此此时的值为$2^{2 - 2^{k-1}}$</p>
<p>###<code>0-00000001-00000000000000000000000</code></p>
<p>2、当阶码为最高位为0，其余全为1，尾数为n个0时，此时的值为1。因为在偏置之后，阶码E = 0 ，而尾数M = 1 + f = 1。</p>
<p>###<code>0-01111111-00000000000000000000000</code></p>
<p>3、当阶码为最低位为0，其余全为1，尾数为n个1时，此时的值为最大的规格化的值。此时的阶码 $E = 2^{k-1}-1$， 尾数 $M = 2 - 2^{-n}$。 因此此时的值为$(2 - 2^{-n}) <em> 2^{-1} + 2^{k-1}$， 也可以化简一下为$(1 - 2^{-n-1}) </em> 2^{2^{k-1}}$</p>
<p>###<code>0-11111110-11111111111111111111111</code></p>
<hr>
<h3 id="非规格化的"><a href="#非规格化的" class="headerlink" title="非规格化的"></a>非规格化的</h3><p>非规格化的浮点数对应图中的第2种情况，也就是阶码全为0的时候。</p>
<p>按照上面规格化的阶码求值方式来说，非规格化的阶码值应该固定在-Bias这个值上面。不过这里有一个小技巧，我们设定阶码的值E = 1 - Bias。这样做是为了能够平滑的从非规格化的浮点数过渡到规格化的浮点数，有关这一点后面我们再详细看。</p>
<p>对于尾数的解释，非规格化的方式与规格化不同，它不会对尾数进行加1的处理，也就是说，真实的尾数M = f。这是为了能够表示0这个数值，否则的话尾数总是大于1，那么无论如何都将得不到0这个数值。</p>
<p>非规格化的浮点数除了可以表示0以外，它还有一个作用，就是可以表示接近于0的数值。另外，在浮点数当中，0的表示有两种，一种是位表示全部为0，则为+0.0。还有一种则是符号位为1，其余全为0，此时为-0.0。</p>
<hr>
<h3 id="非规格化的取值范围"><a href="#非规格化的取值范围" class="headerlink" title="非规格化的取值范围"></a>非规格化的取值范围</h3><p>对于非规格化的浮点数来说，由于阶码固定为k个0，因此真实阶码都为<br>$$ E = 1 - (2^{k-1} - 1) = 2 - 2^{k-1}$$<br>那么我们可以得到下面几个重要的取值。</p>
<p>1、当尾数为n个0时，此时的值为+0.0。</p>
<p>###<code>0-00000000-00000000000000000000000</code></p>
<p>2、当尾数为最低位为1，其余全为0时，此时的值为最小的非0值。它此时的尾数<br>$$M = f = 2^{-n}$$<br>因此此时的值为<br>$$2^{-n} * 2^{2 - 2^{k-1}} = 2^{-n+2 - 2^{k-1}}$$</p>
<p>###<code>0-00000000-00000000000000000000001</code></p>
<p>3、当尾数为n个1时，此时的值为最大的非规格化的值。它此时的尾数<br>$$M = f = 1 - 2^{-n}$$<br>因此此时的值为<br>$$(1 - 2^{-n}) * 2^{2 - 2^{k-1}}$$</p>
<p>###<code>0-00000000-11111111111111111111</code></p>
<hr>
<h3 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h3><p>特殊值则对应图中的3a和3b这两种情况，也就是阶码全为1的时候。</p>
<p>在阶码全为1时，如果尾数位全为0，则表示无穷大。符号位为0则表示正无穷大，相反则表示负无穷大。倘若尾数位不全为0时，此时则表示NaN，表示不是一个数字。这一点在Javascript当中有一个相关的函数与这个NaN的含义有点类似，它的作用是用来判断一个参数是否是一个数字。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/images/12.jpg" alt="总结"></p>
<hr>
<p><a href="http://www.cnblogs.com/zuoxiaolong/p/computer11.html" target="_blank" rel="external">深入理解计算机系统（2.7）—二进制浮点数，IEEE标准（重要）</a><br><a href="https://blog.csdn.net/shuzfan/article/details/53814424" target="_blank" rel="external">浮点数表示</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}
});
&lt;/script&gt;
&lt;script type=&quot;tex
    
    </summary>
    
      <category term="深入理解计算机系统" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="深入理解计算机系统" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>干货|一些好的东西</title>
    <link href="http://yoursite.com/2018/04/14/%E5%B9%B2%E8%B4%A7-%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>http://yoursite.com/2018/04/14/干货-一些好的东西/</id>
    <published>2018-04-13T16:21:18.000Z</published>
    <updated>2018-04-16T02:20:59.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些好的书籍"><a href="#一些好的书籍" class="headerlink" title="一些好的书籍"></a>一些好的书籍</h3><ul>
<li>程序是怎么跑起来的</li>
<li>网络是怎样连接的</li>
<li>计算机是怎样跑起来的</li>
<li>计算机程序设计艺术（TAOCP）</li>
<li>计算机程序的构造和解释（SICP）</li>
<li>算法导论（CLRS）</li>
<li>深入理解计算机系统（CSAPP）</li>
<li>程序设计语言-实践之路</li>
<li>面向对象分析与设计</li>
</ul>
<h3 id="一些好的电影"><a href="#一些好的电影" class="headerlink" title="一些好的电影"></a>一些好的电影</h3><h3 id="一些好的工具"><a href="#一些好的工具" class="headerlink" title="一些好的工具"></a>一些好的工具</h3><ul>
<li>tampermonkey  搭配 <a href="https://greasyfork.org" target="_blank" rel="external">https://greasyfork.org</a></li>
</ul>
<h3 id="一些好的博客"><a href="#一些好的博客" class="headerlink" title="一些好的博客"></a>一些好的博客</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一些好的书籍&quot;&gt;&lt;a href=&quot;#一些好的书籍&quot; class=&quot;headerlink&quot; title=&quot;一些好的书籍&quot;&gt;&lt;/a&gt;一些好的书籍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序是怎么跑起来的&lt;/li&gt;
&lt;li&gt;网络是怎样连接的&lt;/li&gt;
&lt;li&gt;计算机是怎样跑起来的&lt;
    
    </summary>
    
      <category term="干货" scheme="http://yoursite.com/categories/%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="干货" scheme="http://yoursite.com/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>面试|php常考面试题</title>
    <link href="http://yoursite.com/2018/04/12/%E9%9D%A2%E8%AF%95-php%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/12/面试-php常考面试题/</id>
    <published>2018-04-12T08:57:19.000Z</published>
    <updated>2018-04-24T16:26:34.797Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.techug.com/post/php-interview-tips.html" target="_blank" rel="external">一个16年毕业生所经历的php面试</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.techug.com/post/php-interview-tips.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个16年毕业生所经历的php面试&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试|Java常考面试题</title>
    <link href="http://yoursite.com/2018/04/12/%E9%9D%A2%E8%AF%95-Java%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/12/面试-Java常考面试题/</id>
    <published>2018-04-12T08:57:04.000Z</published>
    <updated>2018-04-24T08:17:22.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDK和JRE的区别是什么？"><a href="#JDK和JRE的区别是什么？" class="headerlink" title="JDK和JRE的区别是什么？"></a>JDK和JRE的区别是什么？</h3><p>JRE： Java Runtime Environment<br>JDK：Java Development Kit<br>JRE顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。<br>JDK顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。<br>如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。<br>JRE根据不同操作系统（如：windows，linux等）和不同JRE提供商（IBM,ORACLE等）有很多版本 </p>
<p>再说说java的跨平台吧:<br>java源程序先经过javac编译器编译成二进制的.class字节码文件（java的跨平台指的就是.class字节码文件的跨平台，.class字节码文件是与平台无关的），.class文件再运行在jvm上，java解释器（jvm的一部分）会将其解释成对应平台的机器码执行，所以java所谓的跨平台就是在不同平台上安装了不同的jvm，而在不同平台上生成的.class文件都是一样的，而.class文件再由对应平台的jvm解释成对应平台的机器码执行</p>
<p>最后解释下机器码和字节码的区别:<br> 一，机器码，完全依附硬件而存在～并且不同硬件由于内嵌指令集不同，即使相同的0 1代码<br>意思也可能是不同的～换句话说，根本不存在跨平台性～比如～不同型号的CPU,你给他个指令10001101，他们可能会解析为不同的结果～<br>二，我们知道JAVA是跨平台的，为什么呢？因为他有一个jvm,不论那种硬件，只要你装有jvm,那么他就认识这个JAVA字节码～～～～至于底层的机器码，咱不用管，有jvm搞定，他会把字节码再翻译成所在机器认识的机器码～～～</p>
<h3 id="是否可以在static环境中访问非static变量？"><a href="#是否可以在static环境中访问非static变量？" class="headerlink" title="是否可以在static环境中访问非static变量？"></a>是否可以在static环境中访问非static变量？</h3><p>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p>
<h3 id="Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="Java支持的数据类型有哪些？什么是自动拆装箱？"></a>Java支持的数据类型有哪些？什么是自动拆装箱？</h3><p>Java语言支持的8种基本数据类型是：</p>
<ul>
<li>byte</li>
<li>short</li>
<li>int</li>
<li>long</li>
<li>float</li>
<li>double</li>
<li>boolean</li>
<li>char</li>
</ul>
<p>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。</p>
<p>Java支持的数据类型包括两种：一种是基本数据类型，包含byte，char,short, boolean ,int , long, float,double;另一种是引用类型：如String等，其实是对象的引用，JVM中虚拟栈中存的是对象的地址，创建的对象实质在堆中，通过地址来找到堆中的对象的过程，即为引用类型。自动装箱就是Java编译器在基本数据类型和对应的对象包装类型间的转化，即int转化为Integer,自动拆箱是Integer调用其方法将其转化为int的过程 .</p>
<h3 id="Java支持多继承么？"><a href="#Java支持多继承么？" class="headerlink" title="Java支持多继承么？"></a>Java支持多继承么？</h3><p>Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JDK和JRE的区别是什么？&quot;&gt;&lt;a href=&quot;#JDK和JRE的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;JDK和JRE的区别是什么？&quot;&gt;&lt;/a&gt;JDK和JRE的区别是什么？&lt;/h3&gt;&lt;p&gt;JRE： Java Runtime Envi
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机算法|我的学习之路</title>
    <link href="http://yoursite.com/2018/04/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/04/12/计算机算法-我的学习之路/</id>
    <published>2018-04-12T00:23:58.000Z</published>
    <updated>2018-04-11T16:50:50.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>自己作为一名大二的准CS本科生，正在学习计算机算法这门课，但由于学校开设的课不咋地，同时自己又深知算法的重要性，只能自己另寻出路了。</p>
<h3 id="My-Way"><a href="#My-Way" class="headerlink" title="My Way"></a>My Way</h3><p><a href="http://open.163.com/special/opencourse/algorithms.html" target="_blank" rel="external">网易云-麻省理工公开课</a><br><a href="https://www.bilibili.com/video/av13229392/" target="_blank" rel="external">bliblili-斯坦福公开课</a><br><a href="https://www.coursera.org/specializations/algorithms" target="_blank" rel="external">coursera</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;自己作为一名大二的准CS本科生，正在学习计算机算法这门课，但由于学校开设的课不咋地，同时自己又深知算法的重要性，只能自己另寻出路了。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机算法" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="计算机算法" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统|我的学习之路</title>
    <link href="http://yoursite.com/2018/04/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/04/11/深入理解计算机系统-我的学习之路/</id>
    <published>2018-04-11T11:43:41.000Z</published>
    <updated>2018-04-13T09:14:37.510Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>自己作为一名大二的准CS本科生，正在学习深入学习计算机系统这门课，但由于学校开设的课不咋地，同时自己又深知底层知识的重要性，只能自己另寻出路了。</p>
<h3 id="My-Way"><a href="#My-Way" class="headerlink" title="My Way"></a>My Way</h3><p><a href="http://www.cnblogs.com/zuoxiaolong/category/518480.html" target="_blank" rel="external">博客教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;自己作为一名大二的准CS本科生，正在学习深入学习计算机系统这门课，但由于学校开设的课不咋地，同时自己又深知底层知识的重要性，只能自己另寻出路
    
    </summary>
    
      <category term="深入学习计算机系统" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="深入学习计算机系统" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统|我的学习之路</title>
    <link href="http://yoursite.com/2018/04/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/04/11/操作系统-我的学习之路/</id>
    <published>2018-04-11T10:20:12.000Z</published>
    <updated>2018-04-11T03:22:06.058Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>自己作为一名大二的准CS本科生，正在学习操作系统这门课，但由于学校开设的课不咋地，同时自己又深知操作系统的重要性，只能自己另寻出路了。</p>
<h3 id="学习之路"><a href="#学习之路" class="headerlink" title="学习之路"></a>学习之路</h3><p>幸运的是自己生在互联网的时代，自己淘到了哈工大的李治军老师主讲的公开课，棒棒的。</p>
<p>课程视频资料:</p>
<p><a href="http://mooc.study.163.com/course/1000002004?tid=1000002003#/info" target="_blank" rel="external">操作系统之基础</a><br><a href="http://mooc.study.163.com/course/1000002008?tid=1000003004#/info" target="_blank" rel="external">操作系统之进程与线程</a><br><a href="http://mooc.study.163.com/course/1000003007?tid=1000003005#/info" target="_blank" rel="external">操作系统之内存管理</a><br><a href="http://mooc.study.163.com/course/1000002009?tid=1000002008#/info" target="_blank" rel="external">操作系统之外设与文件系统</a></p>
<p>哈工大课程实验配套资料:<br><a href="https://www.jianshu.com/p/01774f28b401" target="_blank" rel="external">写在实验之前</a><br><a href="https://github.com/DeathKing/hit-oslab" target="_blank" rel="external">GItHub环境仓库</a><br><a href="https://github.com/hoverwinter/HIT-OSLab" target="_blank" rel="external">GitHub代码</a><br><a href="https://www.kancloud.cn/digest/os-experiment/120076" target="_blank" rel="external">看云实验手册</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;自己作为一名大二的准CS本科生，正在学习操作系统这门课，但由于学校开设的课不咋地，同时自己又深知操作系统的重要性，只能自己另寻出路了。&lt;/p
    
    </summary>
    
      <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>运维|Nginx+Php-fpm运行原理详解</title>
    <link href="http://yoursite.com/2018/04/09/%E8%BF%90%E7%BB%B4-Nginx+Php-fpm%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/04/09/运维-Nginx+Php-fpm运行原理详解/</id>
    <published>2018-04-09T11:41:10.000Z</published>
    <updated>2018-04-09T08:00:30.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代理与反向代理"><a href="#代理与反向代理" class="headerlink" title="代理与反向代理"></a>代理与反向代理</h3><p>现实生活中的例子<br>1、正向代理：访问google.com</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解01.png" alt="正向代理" title="Nginx+Php-fpm运行原理详解01"></p>
<p>如上图，因为google被墙，我们需要vpn翻墙才能访问google.com。</p>
<blockquote>
<p>vpn对于“我们”来说，是可以感知到的（我们连接vpn）<br>vpn对于”google服务器”来说，是不可感知的(google只知道有http请求过来)。</p>
</blockquote>
<p>对于人来说可以感知到，但服务器感知不到的服务器，我们叫他正向代理服务器。</p>
<p>2、反向代理：通过反向代理实现负载均衡</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解02.png" alt="反向代理" title="Nginx+Php-fpm运行原理详解02"></p>
<p>如上图，我们访问baidu.com的时候，baidu有一个代理服务器，通过这个代理服务器，可以做负载均衡，路由到不同的server。</p>
<blockquote>
<p>此代理服务器,对于“我们”来说是不可感知的(我们只能感知到访问的是百度的服务器，不知道中间还有代理服务器来做负载均衡)。</p>
</blockquote>
<p>此代理服务器，对于”server1 server2 server3”是可感知的(代理服务器负载均衡路由到不同的server)<br>对于人来说不可感知，但对于服务器来说是可以感知的，我们叫他反向代理服务器</p>
<p>总结<br>说白了：“正向”、“反向”是相对于人的感知来说的。<br>人能感受到的代理就是正向代理，人感受不到的代理就是反向代理。</p>
<h3 id="初识Nginx与Php-fpm"><a href="#初识Nginx与Php-fpm" class="headerlink" title="初识Nginx与Php-fpm"></a>初识Nginx与Php-fpm</h3><h4 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h4><p>Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。</p>
<h4 id="Php-fpm是什么"><a href="#Php-fpm是什么" class="headerlink" title="Php-fpm是什么"></a>Php-fpm是什么</h4><h5 id="cgi、fast-cgi协议"><a href="#cgi、fast-cgi协议" class="headerlink" title="cgi、fast-cgi协议"></a>cgi、fast-cgi协议</h5><p>cgi的历史<br>早期的webserver只处理html等静态文件，但是随着技术的发展，出现了像php等动态语言。<br>webserver处理不了了，怎么办呢？那就交给php解释器来处理吧！<br>交给php解释器处理很好，但是，php解释器如何与webserver进行通信呢？</p>
<p>为了解决不同的语言解释器(如php、python解释器)与webserver的通信，于是出现了cgi协议。只要你按照cgi协议去编写程序，就能实现语言解释器与webwerver的通信。如php-cgi程序。</p>
<p>fast-cgi的改进<br>有了cgi协议，解决了php解释器与webserver通信的问题，webserver终于可以处理动态语言了。<br>但是，webserver每收到一个请求，都会去fork一个cgi进程，请求结束再kill掉这个进程。这样有10000个请求，就需要fork、kill php-cgi进程10000次。</p>
<p>有没有发现很浪费资源？</p>
<p>于是，出现了cgi的改良版本，fast-cgi。fast-cgi每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。这样每次就不用重新fork一个进程了，大大提高了效率。</p>
<h5 id="php-fpm是什么"><a href="#php-fpm是什么" class="headerlink" title="php-fpm是什么"></a>php-fpm是什么</h5><p>php-fpm即php-Fastcgi Process Manager.<br>php-fpm是 FastCGI 的实现，并提供了进程管理的功能。<br>进程包含 master 进程和 worker 进程两种进程。<br>master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个(具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。</p>
<h3 id="Nginx如何与Php-fpm结合"><a href="#Nginx如何与Php-fpm结合" class="headerlink" title="Nginx如何与Php-fpm结合"></a>Nginx如何与Php-fpm结合</h3><p>上面我们说了，Nginx不只有处理http请求的功能，还能做反向代理。<br>Nginx通过反向代理功能将动态请求转向后端Php-fpm。</p>
<p>下面我们来配置一个全新的Nginx+Php-fpm</p>
<ol>
<li>配置nginx.conf文件</li>
</ol>
<p>进入nginx目录下，编辑 nginx.conf文件。<br>如图，在nginx.conf最后一行，添加include文件</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解03.png" alt="How -1" title="Nginx+Php-fpm运行原理详解03"></p>
<ol>
<li>添加对应的server<br>进入上面include的路径，添加一个server</li>
</ol>
<p><img src="/images/Nginx+Php-fpm运行原理详解04.png" alt="添加server" title="Nginx+Php-fpm运行原理详解04"></p>
<p>下面我们解释一下配置项的含义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80; #监听80端口，接收http请求</div><div class="line">    server_name  www.example.com; #就是网站地址</div><div class="line">    root /usr/local/etc/nginx/www/huxintong_admin; # 准备存放代码工程的路径</div><div class="line">    #路由到网站根目录www.example.com时候的处理</div><div class="line">    location / &#123;</div><div class="line">        index index.php; #跳转到www.example.com/index.php</div><div class="line">        autoindex on;</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    #当请求网站下php文件的时候，反向代理到php-fpm</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        include /usr/local/etc/nginx/fastcgi.conf; #加载nginx的fastcgi模块</div><div class="line">        fastcgi_intercept_errors on;</div><div class="line">        fastcgi_pass   127.0.0.1:9000; #nginx fastcgi进程监听的IP地址和端口</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总而言之：当我们访问www.example.com的时候，处理流程是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">  www.example.com</div><div class="line">        |</div><div class="line">        |</div><div class="line">      Nginx</div><div class="line">        |</div><div class="line">        |</div><div class="line">路由到www.example.com/index.php</div><div class="line">        |</div><div class="line">        |</div><div class="line">加载nginx的fast-cgi模块</div><div class="line">        |</div><div class="line">        |</div><div class="line">fast-cgi监听127.0.0.1:9000地址</div><div class="line">        |</div><div class="line">        |</div><div class="line">www.example.com/index.php请求到达127.0.0.1:9000</div><div class="line">        |</div><div class="line">        |</div><div class="line">     等待处理...</div></pre></td></tr></table></figure>
<p>下面我们启用php的php-fpm来处理这个请求</p>
<p>打开php-fpm.conf文件，我们看到如下配置：</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解05.png" alt="php-fpm" title="Nginx+Php-fpm运行原理详解05"></p>
<blockquote>
<p>即:php-fpm模块监听127.0.0.1:9000端口，等待请求到来去处理。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>nginx与php-fpm的结合，完整的流程是这样的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> www.example.com</div><div class="line">        |</div><div class="line">        |</div><div class="line">      Nginx</div><div class="line">        |</div><div class="line">        |</div><div class="line">路由到www.example.com/index.php</div><div class="line">        |</div><div class="line">        |</div><div class="line">加载nginx的fast-cgi模块</div><div class="line">        |</div><div class="line">        |</div><div class="line">fast-cgi监听127.0.0.1:9000地址</div><div class="line">        |</div><div class="line">        |</div><div class="line">www.example.com/index.php请求到达127.0.0.1:9000</div><div class="line">        |</div><div class="line">        |</div><div class="line">php-fpm 监听127.0.0.1:9000</div><div class="line">        |</div><div class="line">        |</div><div class="line">php-fpm 接收到请求，启用worker进程处理请求</div><div class="line">        |</div><div class="line">        |</div><div class="line">php-fpm 处理完请求，返回给nginx</div><div class="line">        |</div><div class="line">        |</div><div class="line">nginx将结果通过http返回给浏览器</div></pre></td></tr></table></figure>
<p><img src="/images/Nginx+Php-fpm运行原理详解06.png" alt="运行原理" title="Nginx+Php-fpm运行原理详解06"></p>
<h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><h4 id="反向代理和负载均衡是什么关系"><a href="#反向代理和负载均衡是什么关系" class="headerlink" title="反向代理和负载均衡是什么关系"></a>反向代理和负载均衡是什么关系</h4><p>反向代理和负载均衡这两个词经常出现在一起，但他们实际上是不同的概念，负载均衡它更多的是强调的是一种算法或策略，将请求分布到不同的机器上，因此实际上也起到了反向代理的作用。</p>
<h4 id="proxy-pass-和-fastcgi-pass-的区别"><a href="#proxy-pass-和-fastcgi-pass-的区别" class="headerlink" title="proxy_pass 和 fastcgi_pass 的区别"></a>proxy_pass 和 fastcgi_pass 的区别</h4><p>一个是反向代理模块，一个是转发给 factcgi 后端处理。</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解07.png" alt="proxy_pass 和 fastcgi_pass 的区别" title="Nginx+Php-fpm运行原理详解07"></p>
<p><a href="https://segmentfault.com/a/1190000010443248" target="_blank" rel="external">阿里云服务器CentOS7.0安装Nginx 1.12.1</a><br><a href="http://www.cnblogs.com/freeweb/p/5425554.html" target="_blank" rel="external">Linux下安装php环境并且配置Nginx支持php-fpm模块</a><br><a href="https://www.jianshu.com/p/495a02eb2672" target="_blank" rel="external">CentOS7搭建配置Nginx+PHP+MySQL</a><br><a href="https://segmentfault.com/a/1190000007322358" target="_blank" rel="external">nginx与php-fpm关系大揭秘</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代理与反向代理&quot;&gt;&lt;a href=&quot;#代理与反向代理&quot; class=&quot;headerlink&quot; title=&quot;代理与反向代理&quot;&gt;&lt;/a&gt;代理与反向代理&lt;/h3&gt;&lt;p&gt;现实生活中的例子&lt;br&gt;1、正向代理：访问google.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>浮点数的二进制表示</title>
    <link href="http://yoursite.com/2018/04/09/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/04/09/浮点数的二进制表示/</id>
    <published>2018-04-08T16:38:58.000Z</published>
    <updated>2018-04-10T09:04:54.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">　　void main(void)&#123;</div><div class="line"></div><div class="line">　　　　int num=9; /* num是整型变量，设为9 */</div><div class="line"></div><div class="line">　　　　float* pFloat=&amp;num; /* pFloat表示num的内存地址，但是设为浮点数 */</div><div class="line"></div><div class="line">　　　　printf(&quot;num的值为：%d\n&quot;,num); /* 显示num的整型值 */</div><div class="line"></div><div class="line">　　　　printf(&quot;*pFloat的值为：%f\n&quot;,*pFloat); /* 显示num的浮点值 */</div><div class="line"></div><div class="line">　　　　*pFloat=9.0; /* 将num的值改为浮点数 */</div><div class="line"></div><div class="line">　　　　printf(&quot;num的值为：%d\n&quot;,num); /* 显示num的整型值 */</div><div class="line"></div><div class="line">　　　　printf(&quot;*pFloat的值为：%f\n&quot;,*pFloat); /* 显示num的浮点值 */</div><div class="line"></div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p>大家知道程序运行的结果是什么嘛？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">num的值为：9</div><div class="line">*pFloat的值为：0.000000</div><div class="line">num的值为：1091567616</div><div class="line">*pFloat的值为：9.000000</div></pre></td></tr></table></figure>
<p>我很惊讶，num和*pFloat在内存中明明是同一个数，为什么浮点数和整数的解读结果会差别这么大？</p>
<p>要理解这个结果，一定要搞懂浮点数在计算机内部的表示方法。我读了一些资料，下面就是我的笔记。</p>
<h3 id="int的表示"><a href="#int的表示" class="headerlink" title="int的表示"></a>int的表示</h3><p>在讨论浮点数之前，先看一下整数在计算机内部是怎样表示的。<br><code>int num=9;</code></p>
<p>上面这条命令，声明了一个整数变量，类型为int，值为9（二进制写法为1001）。普通的32位计算机，用4个字节表示int变量，所以9就被保存为00000000 00000000 00000000 00001001，写成16进制就是0x00000009。</p>
<p>那么，我们的问题就简化成：为什么0x00000009还原成浮点数，就成了0.000000？</p>
<h3 id="IEEE标准"><a href="#IEEE标准" class="headerlink" title="IEEE标准"></a>IEEE标准</h3><p>根据国际标准IEEE 754，任意一个二进制浮点数V可以表示成下面的形式：</p>
<p><img src="/images/浮点数的二进制表示01.png" alt="IEEE754" title="浮点数的二进制表示01"></p>
<p>举例来说，十进制的5.0，写成二进制是101.0，相当于1.01×2^2。那么，按照上面V的格式，可以得出s=0，M=1.01，E=2。</p>
<p>十进制的-5.0，写成二进制是-101.0，相当于-1.01×2^2。那么，s=1，M=1.01，E=2。</p>
<p>IEEE 754规定，对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p>
<p><img src="/images/浮点数的二进制表示02.png" alt="32bit" title="浮点数的二进制表示02"></p>
<p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p>
<p><img src="/images/浮点数的二进制表示03.png" alt="64bit" title="浮点数的二进制表示03"></p>
<p>IEEE 754对有效数字M和指数E，还有一些特别规定。</p>
<p>前面说过，1≤M&lt;2，也就是说，M可以写成1.xxxxxx的形式，其中xxxxxx表示小数部分。IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxxxx部分。比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。以32位浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字。</p>
<p>至于指数E，情况就比较复杂。</p>
<p>首先，E为一个无符号整数（unsigned int）。这意味着，如果E为8位，它的取值范围为0~255；如果E为11位，它的取值范围为0~2047。但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，E的真实值必须再减去一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。</p>
<p>比如，2^10的E是10，所以保存成32位浮点数时，必须保存成10+127=137，即10001001。</p>
<p>然后，指数E还可以再分成三种情况：</p>
<p>（1）E不全为0或不全为1。这时，浮点数就采用上面的规则表示，即指数E的计算值减去127（或1023），得到真实值，再将有效数字M前加上第一位的1。</p>
<p>（2）E全为0。这时，浮点数的指数E等于1-127（或者1-1023），有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数。这样做是为了表示±0，以及接近于0的很小的数字。</p>
<p>（3）E全为1。这时，如果有效数字M全为0，表示±无穷大（正负取决于符号位s）；如果有效数字M不全为0，表示这个数不是一个数（NaN）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工具|Dos下的debug工具使用</title>
    <link href="http://yoursite.com/2018/04/01/%E5%B7%A5%E5%85%B7-Dos%E4%B8%8B%E7%9A%84debug%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/01/工具-Dos下的debug工具使用/</id>
    <published>2018-04-01T00:04:11.000Z</published>
    <updated>2018-04-03T01:30:19.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Dubug是dos,windows下提供的调试工具，使用该工具，可以查看和修改寄存器，内存的内容。同时可以在机器码级别跟踪程序源码的运行。</p>
<h3 id="常用的debug功能"><a href="#常用的debug功能" class="headerlink" title="常用的debug功能"></a>常用的debug功能</h3><ul>
<li>用Debug的R命令查看、改变CPU寄存器内容；</li>
<li>用Debug的D命令查看内存中的内容；</li>
<li>用Debug的E命令查看内存中的内容；</li>
<li>用Debug的U命令将内存中机器指令翻译成汇编指令；</li>
<li>用Debug的T命令执行一条机器指令；</li>
<li>用Debug的A命令以汇编指令的格式在内存中写入一条机器指令；</li>
</ul>
<p><a href="https://blog.csdn.net/u013018721/article/details/51154153" target="_blank" rel="external">Dos下的调试工具debug的使用教程 </a></p>
<h3 id="汇编结尾int-20h-和int-21-h-啥区别"><a href="#汇编结尾int-20h-和int-21-h-啥区别" class="headerlink" title="汇编结尾int 20h 和int 21 h 啥区别"></a>汇编结尾int 20h 和int 21 h 啥区别</h3><p>int 20h只适用于ms-dos（相对应的有PC-DOS、FREE-DOS等等），而且int 20h要求入口参数CS=PSP段</p>
<h3 id="int指令引发的中断"><a href="#int指令引发的中断" class="headerlink" title="int指令引发的中断"></a>int指令引发的中断</h3><p>int n指令，相当于引发一个n号中断。</p>
<p>执行过程相当于：</p>
<p>（1）取中断类型码n。<br>（2）标志寄存器入栈；设置IF=0，TF=0。<br>（3）CS，IP入栈<br>（4）（IP）=（n<em>4），（CS）=（n</em>4+2）</p>
<h4 id="int-21h中断"><a href="#int-21h中断" class="headerlink" title="int 21h中断"></a>int 21h中断</h4><p>它是DOS提供的中断例程，包含了DOS提供给程序员在编程时调用的子程序。</p>
<p>前面我们一直用下面的代码返回:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mov  ax,4c00h  </div><div class="line">int 21h</div></pre></td></tr></table></figure></p>
<p>其实这是用了21号中断例程的4ch号子程序，al是用来存放程序返回值的，上面的代码即0.<br>本质就是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov ah,4ch  </div><div class="line">mov al,0  </div><div class="line">int 21h</div></pre></td></tr></table></figure></p>
<h4 id="带返回码的结束（AH-4CH）"><a href="#带返回码的结束（AH-4CH）" class="headerlink" title="带返回码的结束（AH=4CH）"></a>带返回码的结束（AH=4CH）</h4><p>功能：返回DOS</p>
<p>入口参数：无</p>
<p>调用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MOV    AH,4CH</div><div class="line">INT      21H</div></pre></td></tr></table></figure></p>
<p>通过4CH功能调用能够结束当前正在执行的程序，返回DOS系统，一般用于汇编程序的结束位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Dubug是dos,windows下提供的调试工具，使用该工具，可以查看和修改寄存器，内存的内容。同时可以在机器码级别跟踪程序源码的运行。&lt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>工具|gdb调试</title>
    <link href="http://yoursite.com/2018/03/27/%E5%B7%A5%E5%85%B7-gdb%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2018/03/27/工具-gdb调试/</id>
    <published>2018-03-27T14:48:03.000Z</published>
    <updated>2018-03-30T09:46:30.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GDB概述"><a href="#GDB概述" class="headerlink" title="GDB概述"></a>GDB概述</h3><p>GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像VC、BCB等IDE的调试，但如果你是在UNIX平台下做软件，你会发现GDB这个调试工具有比VC、BCB的图形化调试器更强大的功能。所谓“寸有所长，尺有所短”就是这个道理。</p>
<p>一般来说，GDB主要帮忙你完成下面四个方面的功能：</p>
<ol>
<li>启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。</li>
<li>可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）</li>
<li>当程序被停住时，可以检查此时你的程序中所发生的事。</li>
<li>动态的改变你程序的执行环境。</li>
</ol>
<p>从上面看来，GDB和一般的调试工具没有什么两样，基本上也是完成这些功能，不过在细节上，你会发现GDB这个调试工具的强大，大家可能比较习惯了图形化的调试工具，但有时候，命令行的调试工具却有着图形化工具所不能完成的功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">源程序：tst.c</div><div class="line"></div><div class="line">     1 #include &lt;stdio.h&gt;</div><div class="line">     2</div><div class="line">     3 int func(int n)</div><div class="line">     4 &#123;</div><div class="line">     5         int sum=0,i;</div><div class="line">     6         for(i=0; i&lt;n; i++)</div><div class="line">     7         &#123;</div><div class="line">     8                 sum+=i;</div><div class="line">     9         &#125;</div><div class="line">    10         return sum;</div><div class="line">    11 &#125;</div><div class="line">    12</div><div class="line">    13</div><div class="line">    14 main()</div><div class="line">    15 &#123;</div><div class="line">    16         int i;</div><div class="line">    17         long result = 0;</div><div class="line">    18         for(i=1; i&lt;=100; i++)</div><div class="line">    19         &#123;</div><div class="line">    20                 result += i;</div><div class="line">    21         &#125;</div><div class="line">    22</div><div class="line">    23        printf(&quot;result[1-100] = %d /n&quot;, result );</div><div class="line">    24        printf(&quot;result[1-250] = %d /n&quot;, func(250) );</div><div class="line">    25 &#125;</div><div class="line"></div><div class="line">编译生成执行文件：（Linux下）</div><div class="line">    hchen/test&gt; gcc -g tst.c -o tst</div><div class="line"></div><div class="line">使用GDB调试：</div><div class="line"></div><div class="line">hchen/test&gt; gdb tst  &lt;---------- 启动GDB</div><div class="line">GNU gdb 5.1.1</div><div class="line">Copyright 2002 Free Software Foundation, Inc.</div><div class="line">GDB is free software, covered by the GNU General Public License, and you are</div><div class="line">welcome to change it and/or distribute copies of it under certain conditions.</div><div class="line">Type &quot;show copying&quot; to see the conditions.</div><div class="line">There is absolutely no warranty for GDB.  Type &quot;show warranty&quot; for details.</div><div class="line">This GDB was configured as &quot;i386-suse-linux&quot;...</div><div class="line">(gdb) l     &lt;-------------------- l命令相当于list，从第一行开始例出原码。</div><div class="line">1        #include &lt;stdio.h&gt;</div><div class="line">2</div><div class="line">3        int func(int n)</div><div class="line">4        &#123;</div><div class="line">5                int sum=0,i;</div><div class="line">6                for(i=0; i&lt;n; i++)</div><div class="line">7                &#123;</div><div class="line">8                        sum+=i;</div><div class="line">9                &#125;</div><div class="line">10               return sum;</div><div class="line">(gdb)       &lt;-------------------- 直接回车表示，重复上一次命令</div><div class="line">11       &#125;</div><div class="line">12</div><div class="line">13</div><div class="line">14       main()</div><div class="line">15       &#123;</div><div class="line">16               int i;</div><div class="line">17               long result = 0;</div><div class="line">18               for(i=1; i&lt;=100; i++)</div><div class="line">19               &#123;</div><div class="line">20                       result += i;    </div><div class="line">(gdb) break 16    &lt;-------------------- 设置断点，在源程序第16行处。</div><div class="line">Breakpoint 1 at 0x8048496: file tst.c, line 16.</div><div class="line">(gdb) break func  &lt;-------------------- 设置断点，在函数func()入口处。</div><div class="line">Breakpoint 2 at 0x8048456: file tst.c, line 5.</div><div class="line">(gdb) info break  &lt;-------------------- 查看断点信息。</div><div class="line">Num Type           Disp Enb Address    What</div><div class="line">1   breakpoint     keep y   0x08048496 in main at tst.c:16</div><div class="line">2   breakpoint     keep y   0x08048456 in func at tst.c:5</div><div class="line">(gdb) r           &lt;--------------------- 运行程序，run命令简写</div><div class="line">Starting program: /home/hchen/test/tst</div><div class="line"></div><div class="line">Breakpoint 1, main () at tst.c:17    &lt;---------- 在断点处停住。</div><div class="line">17               long result = 0;</div><div class="line">(gdb) n          &lt;--------------------- 单条语句执行，next命令简写。</div><div class="line">18               for(i=1; i&lt;=100; i++)</div><div class="line">(gdb) n</div><div class="line">20                       result += i;</div><div class="line">(gdb) n</div><div class="line">18               for(i=1; i&lt;=100; i++)</div><div class="line">(gdb) n</div><div class="line">20                       result += i;</div><div class="line">(gdb) c          &lt;--------------------- 继续运行程序，continue命令简写。</div><div class="line">Continuing.</div><div class="line">result[1-100] = 5050       &lt;----------程序输出。</div><div class="line"></div><div class="line">Breakpoint 2, func (n=250) at tst.c:5</div><div class="line">5                int sum=0,i;</div><div class="line">(gdb) n</div><div class="line">6                for(i=1; i&lt;=n; i++)</div><div class="line">(gdb) p i        &lt;--------------------- 打印变量i的值，print命令简写。</div><div class="line">$1 = 134513808</div><div class="line">(gdb) n</div><div class="line">8                        sum+=i;</div><div class="line">(gdb) n</div><div class="line">6                for(i=1; i&lt;=n; i++)</div><div class="line">(gdb) p sum</div><div class="line">$2 = 1</div><div class="line">(gdb) n</div><div class="line">8                        sum+=i;</div><div class="line">(gdb) p i</div><div class="line">$3 = 2</div><div class="line">(gdb) n</div><div class="line">6                for(i=1; i&lt;=n; i++)</div><div class="line">(gdb) p sum</div><div class="line">$4 = 3</div><div class="line">(gdb) bt        &lt;--------------------- 查看函数堆栈。</div><div class="line">#0  func (n=250) at tst.c:5</div><div class="line">#1  0x080484e4 in main () at tst.c:24</div><div class="line">#2  0x400409ed in __libc_start_main () from /lib/libc.so.6</div><div class="line">(gdb) finish    &lt;--------------------- 退出函数。</div><div class="line">Run till exit from #0  func (n=250) at tst.c:5</div><div class="line">0x080484e4 in main () at tst.c:24</div><div class="line">24              printf(&quot;result[1-250] = %d /n&quot;, func(250) );</div><div class="line">Value returned is $6 = 31375</div><div class="line">(gdb) c     &lt;--------------------- 继续运行。</div><div class="line">Continuing.</div><div class="line">result[1-250] = 31375    &lt;----------程序输出。</div><div class="line"></div><div class="line">Program exited with code 027. &lt;--------程序退出，调试结束。</div><div class="line">(gdb) q     &lt;--------------------- 退出gdb。</div><div class="line">hchen/test&gt;</div></pre></td></tr></table></figure>
<p>好了，有了以上的感性认识，还是让我们来系统地认识一下gdb吧。</p>
<h3 id="使用GDB"><a href="#使用GDB" class="headerlink" title="使用GDB"></a>使用GDB</h3><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>file &lt;文件名&gt;</td>
<td>加载被调试的可执行程序文件。因为一般都在被调试程序所在目录下执行GDB，因而文本名不需要带路径。</td>
<td>(gdb) file gdb-sample</td>
</tr>
<tr>
<td>r</td>
<td>Run的简写，运行被调试的程序。如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。</td>
<td>(gdb) r</td>
</tr>
<tr>
<td>c</td>
<td>Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。</td>
<td>(gdb) c</td>
</tr>
<tr>
<td>b &lt;行号&gt;; b &lt;函数名称&gt; ;b <em>&lt;函数名称&gt;; b </em>&lt;代码地址&gt;; d [编号]</td>
<td>b: Breakpoint的简写，设置断点。两可以使用“行号”“函数名称”“执行地址”等方式指定断点位置。其中在函数名称前面加“*”符号表示将断点设置在“由编译器生成的prolog代码处”。如果不了解汇编，可以不予理会此用法。d: Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。</td>
<td>(gdb) b 8 (gdb) b main  (gdb) b <em>main  (gdb) b </em>0x804835c  (gdb) d</td>
</tr>
<tr>
<td>s, n</td>
<td>s: 执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；n: 执行一行源程序代码，此行代码中的函数调用也一并执行。s 相当于其它调试器中的“Step Into (单步跟踪进入)”；n 相当于其它调试器中的“Step Over (单步跟踪)”。这两个命令必须在有源代码调试信息的情况下才可以使用（GCC编译时使用“-g”参数）。</td>
<td>(gdb) s   (gdb) n</td>
</tr>
<tr>
<td>si, ni</td>
<td>si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指令，而s/n针对的是源代码。</td>
<td>(gdb) si (gdb) ni</td>
</tr>
<tr>
<td>p &lt;变量名称&gt;</td>
<td>Print的简写，显示指定变量（临时变量或全局变量）的值。</td>
<td>(gdb) p i  (gdb) p nGlobalVar</td>
</tr>
<tr>
<td>display …   ; undisplay &lt;编号&gt;</td>
<td>display，设置程序中断后欲显示的数据及其格式。例如，如果希望每次程序中断后可以看到即将被执行的下一条汇编指令，可以使用命令“display /i $pc”其中 $pc 代表当前汇编指令，/i表示以十六进行显示。当需要关心汇编代码时，此命令相当有用。undispaly，取消先前的display设置，编号从1开始递增。</td>
<td>(gdb) display /i $pc (gdb) undisplay 1</td>
</tr>
<tr>
<td>i</td>
<td>Info的简写，用于显示各类信息，详情请查阅“help i”。</td>
<td>(gdb) i r</td>
</tr>
<tr>
<td>q</td>
<td>Quit的简写，退出GDB调试环境。</td>
<td>(gdb) q</td>
</tr>
<tr>
<td>help [命令名称]</td>
<td>GDB帮助命令，提供对GDB名种命令的解释说明。如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。</td>
<td>(gdb) help display</td>
</tr>
</tbody>
</table>
<p>注:[断点还可以根据条件表达式设置断点]</p>
<p>程序在运行过程中，当某个条件满足时，程序在某行中断暂停执行</p>
<ul>
<li>方法1 命令格式：break行号或函数名 if  条件</li>
<li>方法2  watch &lt;条件表达式&gt;</li>
</ul>
<p>==whatis 命令==<br>作用：用来显示某个变量或表达式值的数据类型<br>格式：whatis &lt;变量或表达式&gt;</p>
<p>==set 命令==<br>作用：用来给变量赋值,当程序继续运行时，将使用更改后的值。<br>格式：set variable 变量=值   相当于print 变量=值</p>
<p>==next和step命令==</p>
<p>作用：一次一条地执行程序代码</p>
<p>next和step的区别：</p>
<ol>
<li>如果遇到函数调用，next会把该函数调用当作一条语句来执行，再次输入next会执行函数调用后的语句</li>
<li>step则会跟踪进入函数，一次一条地执行函数内的代码，直到函数的代码执行完，才执行函数调用后的语句</li>
</ol>
<p>== nexti和stepi命令==</p>
<p>作用：用来单步执行一条机器指令，注意不是单步执行一行语句。单步执行一行语句的命令是</p>
<p>next和step命令通常一条语句由多条机器指令构成</p>
<p>注意：nexti和next类似，不会跟踪进入函数内部去执行;Stepi和step类似，跟踪进入函数执行。</p>
<p>== list ==<br>list命令后面还可以更一些参数，来显示更多功能：</p>
<ul>
<li><linenum>    行号。</linenum></li>
<li>&lt;+&gt; [offset]    当前行号的正偏移量。</li>
<li>&lt;-&gt; [offset]     当前行号的负偏移量。</li>
<li><filename:linenum> 文件的中的行行。</filename:linenum></li>
<li><function>             函数的代码</function></li>
<li><filename:function>     文件中的函数。</filename:function></li>
<li>&lt;*address&gt; 程序运行时的语句在内存中的地址。</li>
</ul>
<h3 id="查看函数返回值"><a href="#查看函数返回值" class="headerlink" title="查看函数返回值"></a>查看函数返回值</h3><p>查看函数返回值是在调试的过程中经常遇到的需求。例如，对于如下函数</p>
<pre><code>int foo()
{
    return 100;
}
</code></pre><p>我们可以以如下方式获取函数的返回值：</p>
<ol>
<li><p>通过finish命令运行至函数结束，此时会打印函数返回值。</p>
<p> (gdb) finish<br> Run till exit from #0 foo () at main.c:9<br> main () at main.c:15<br> 15 }<br> Value returned is $2 = 100</p>
</li>
<li>返回值会存储在eax寄存器中，通过查看信息可以获取返回值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) p $eax</div><div class="line">$3 = 100</div><div class="line">(gdb) info registers</div><div class="line">eax 0x64 100</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="查看连续内存"><a href="#查看连续内存" class="headerlink" title="查看连续内存"></a>查看连续内存</h3><p>可以使用GDB的”@”操作符查看连续内存，”@”的左边是第一个内存的地址的值，”@”的右边则你你想查看内存的长度。</p>
<p>例如，对于如下代码：int arr[] = {2, 4, 6, 8, 10};，可以通过如下命令查看arr前三个单元的数据。</p>
<pre><code>(gdb) p *arr@3
$2 = {2, 4, 6}
</code></pre><h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><p>可以使用examine命令（简写为x）来查看内存地址中的值。x命令的语法如下所示：</p>
<p><code>x /&lt;n/f/u&gt; &lt;addr&gt;</code></p>
<ul>
<li>n 表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。</li>
<li>f 表示显示的格式，如果是字符串，则用s，如果是数字，则可以用i。</li>
<li>u 表示从当前地址往后请求的字节数，默认是4个bytes。（b单字节，h双字节，w四字节，g八字节）</li>
<li><addr> 表示一个内存地址。</addr></li>
</ul>
<p>例如：以两字节为单位显示前面的那个数组的地址后32字节内存信息如下.</p>
<pre><code>(gdb) x /16uh arr
0xbffff4cc: 2 0 4 0 6 0 8 0
0xbffff4dc: 10 0 34032 2052 0 0 0 0
</code></pre><h3 id="自动显示"><a href="#自动显示" class="headerlink" title="自动显示"></a>自动显示</h3><p>在VisualStudio中，可以通过监视窗口动态查看变量的值。在gdb中，也提供了类似的命令display，它的语法是：</p>
<ul>
<li>display expr</li>
<li>display fmt expr</li>
<li>display fmt addr</li>
</ul>
<p>expr是一个表达式，fmt表示显示的格式，addr表示内存地址。当你用display设定好了一个或多个表达式后，只要你的程序被停下来（单步跟踪时），GDB会自动显示你所设置的这些表达式的值。</p>
<h3 id="几个相关的命令如下："><a href="#几个相关的命令如下：" class="headerlink" title="几个相关的命令如下："></a>几个相关的命令如下：</h3><ul>
<li>undisplay <dnums...>        不显示dispaly</dnums...></li>
<li>delete display [dnums]    <em> 删除自动显示，不带dnums参数则删除所有自动显示，也支持范围删除，如： delete </em> display 1,3-5</li>
<li>disable display <dnums...>    使display失效</dnums...></li>
<li>enable display <dnums...>    恢复display</dnums...></li>
<li>info display        查看display信息</li>
</ul>
<h3 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h3><ul>
<li>查看所有的局部变量:<code>(gdb) info local</code></li>
<li>查看此时的栈状态 (反映了函数调用，见Linux从程序到进程):<code>(gdb) info stack</code></li>
</ul>
<h3 id="objdump命令的使用"><a href="#objdump命令的使用" class="headerlink" title="objdump命令的使用"></a>objdump命令的使用</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>objdump -f test</td>
<td>显示test的文件头信息</td>
</tr>
<tr>
<td>objdump -d test</td>
<td>反汇编test中的需要执行指令的那些section</td>
</tr>
<tr>
<td>objdump -D test</td>
<td>与-d类似，但反汇编test中的所有section</td>
</tr>
<tr>
<td>objdump -h test</td>
<td>显示test的Section Header信息</td>
</tr>
<tr>
<td>objdump -x test</td>
<td>显示test的全部Header信息</td>
</tr>
<tr>
<td>objdump -s test</td>
<td>除了显示test的全部Header信息，还显示他们对应的十六进制文件代码</td>
</tr>
</tbody>
</table>
<h4 id="for-example"><a href="#for-example" class="headerlink" title="for example"></a>for example</h4><p>将C源代码和反汇编出来的指令对照：</p>
<ol>
<li>编译成目标文件（要加-g选项） <code>gcc -g -o test.c</code></li>
<li>输出C源代码和反汇编出来的指令对照的格式 <code>objdump -S test.o</code></li>
</ol>
<p><a href="https://blog.csdn.net/haoel/article/details/2879" target="_blank" rel="external">用GDB调试程序(一)</a><br><a href="https://blog.csdn.net/liigo/article/details/582231" target="_blank" rel="external">GDB十分钟教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GDB概述&quot;&gt;&lt;a href=&quot;#GDB概述&quot; class=&quot;headerlink&quot; title=&quot;GDB概述&quot;&gt;&lt;/a&gt;GDB概述&lt;/h3&gt;&lt;p&gt;GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像VC、BCB
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
