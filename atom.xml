<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>只为不凡而来</title>
  <subtitle>小智的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-12T08:20:06.118Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wuduozhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>爬虫|解读http的秘密&lt;进阶篇&gt;</title>
    <link href="http://yoursite.com/2018/02/12/%E7%88%AC%E8%99%AB-%E8%A7%A3%E8%AF%BBhttp%E7%9A%84%E7%A7%98%E5%AF%86-%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>http://yoursite.com/2018/02/12/爬虫-解读http的秘密-进阶篇/</id>
    <published>2018-02-12T15:47:52.000Z</published>
    <updated>2018-02-12T08:20:06.118Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇我们介绍了爬虫中HTTP的基础内容，相信看过的朋友们应该对HTTP已经有个初步的认识了。本篇博主将分享一些HTTP的高级内容，以及在爬虫中的应用，让大家更深入理解。这些内容包括：</p>
<ul>
<li>Cookie解读</li>
<li>Session解读</li>
<li>HTTPs解读</li>
</ul>
<h3 id="Cookie解读"><a href="#Cookie解读" class="headerlink" title="Cookie解读"></a>Cookie解读</h3><h4 id="什么是Cookie？"><a href="#什么是Cookie？" class="headerlink" title="什么是Cookie？"></a>什么是Cookie？</h4><p>==Cookie==原意是”小甜点”的意思，但是在互联网上被用作储存在用户本地终端上的数据。</p>
<p>百度百科是这么解释的：</p>
<blockquote>
<p>Cookie，有时也用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 session<br>跟踪而储存在用户本地终端上的数据（通常经过加密）。定义于 RFC2109 和 2965 中的都已废弃，最新取代的规范是<br>RFC6265。（可以叫做浏览器缓存）</p>
</blockquote>
<h4 id="为什么要使用Cookie？"><a href="#为什么要使用Cookie？" class="headerlink" title="为什么要使用Cookie？"></a>为什么要使用Cookie？</h4><p>首先，需要明确一个很重要的概念：HTTP是一个无状态的协议。</p>
<p>什么意思呢？举一个简单的例子来理解一下。</p>
<h5 id="lt-应用一-gt"><a href="#lt-应用一-gt" class="headerlink" title="&lt;应用一&gt;"></a>&lt;应用一&gt;</h5><p>比如，我们网上购物的时候，浏览了几个网页，选了几样商品放入了购物车。但是由于HTTP的无状态特点，当我们结账的时候服务器并不知道操作的用户是谁，即无法记录上下文的信息，这严重的妨碍了web应用程序交互式的操作。</p>
<p>为了解决HTTP的无状态的问题，Cookie就应运而生了。Cookie绕开了HTTP的无状态性，提供了一种”额外手段”维护了用户跟服务器会话中的状态。<strong>说白了，Cookie就是一小段数据储存在本地，记录并标识了用户身份，以便服务器辨认。</strong>这其实相当于让一个失忆的人从此有了记忆。因此，无论当我们购买几次商品，退货，结账等，服务器都能通过这个标识来判断出你是谁。</p>
<p>还有一个常见的例子，就是==登录==。</p>
<h4 id="lt-应用二-gt"><a href="#lt-应用二-gt" class="headerlink" title="&lt;应用二&gt;"></a>&lt;应用二&gt;</h4><p>当我们登录某个网站输入用户名和密码后，一般浏览器会提示是”是否保存密码”。我们通常会勾选保存，那么这样带来的好处就是在以后的一段时间我们访问该网站都会自动登录而不必每次都去敲用户名和密码了。</p>
<p>也正是这个原因，简化了爬虫中模拟登录的问题，每次登录只要post一个Cookie信息就可以了，而避免了每次都post登录信息。当然，这只针对一部分网站而言，一些复杂的网站会定期的变换一些算法，使得Cookie频繁的失效，这时候就需要post登录信息了或者模拟找到算法的规律。</p>
<p>关于==爬虫模拟登录==的详细内容后续后专门开一篇和大家分享。</p>
<h3 id="Cookie的分类"><a href="#Cookie的分类" class="headerlink" title="Cookie的分类"></a>Cookie的分类</h3><p>Cookie有两种类型：持久化Cookie，非持久化Cookie。</p>
<ul>
<li>持久化Cookie：表示Cookie会保存到本地磁盘上，关闭浏览器再次打开，Cookie依然有效直到设置的expire时间。</li>
<li>非持久化Cookie：表示Cookie会在本地内存中，生命周期会受浏览器开关状态影响，只要浏览器关闭，Cookie则失效。</li>
</ul>
<h3 id="HTTP-Cookie的交互过程"><a href="#HTTP-Cookie的交互过程" class="headerlink" title="HTTP+Cookie的交互过程"></a>HTTP+Cookie的交互过程</h3><p>下面是HTTP请求中使用Cookie所实现的整个web交互过程。</p>
<p><img src="/images/爬虫-http-07.jpg" alt="爬虫--cookie" title="爬虫-http-07"></p>
<p>博主以一个==访问豆瓣==的实际例子作为上述过程的具体说明和描述。</p>
<h4 id="步骤1的请求头"><a href="#步骤1的请求头" class="headerlink" title="步骤1的请求头"></a>步骤1的请求头</h4><p><img src="/images/爬虫-http-08.jpg" alt="爬虫--cookie" title="爬虫-http-08"></p>
<p>看到请求头里面没有Cookie，只是常规的头域字段信息。</p>
<h4 id="步骤2-gt-3的响应头"><a href="#步骤2-gt-3的响应头" class="headerlink" title="步骤2-&gt;3的响应头"></a>步骤2-&gt;3的响应头</h4><p><img src="/images/爬虫-http-09.jpg" alt="爬虫--cookie" title="爬虫-http-09"></p>
<p>服务器根据==POST请求==（用户名密码等）生成一个Cookie，并通过响应头的==set-Cookie字段==返回此Cookie信息。</p>
<h4 id="步骤5的请求头"><a href="#步骤5的请求头" class="headerlink" title="步骤5的请求头"></a>步骤5的请求头</h4><p><img src="/images/爬虫-http-10.jpg" alt="爬虫--cookie" title="爬虫-http-10"></p>
<p>再一次刷新页面的请求头中就有了获取Cookie信息。</p>
<h4 id="步骤7的响应头"><a href="#步骤7的响应头" class="headerlink" title="步骤7的响应头"></a>步骤7的响应头</h4><p><img src="/images/爬虫-http-11.jpg" alt="爬虫--cookie" title="爬虫-http-11"></p>
<p>第二次的响应头==无set-Cookie==字段信息，因为服务器已经辨别了这个用户刚刚提交的Cookie信息。</p>
<h3 id="5-Cookie的格式和属性"><a href="#5-Cookie的格式和属性" class="headerlink" title="5.Cookie的格式和属性"></a>5.Cookie的格式和属性</h3><p>==格式==</p>
<ul>
<li>客户端发送Cookie（键值对）：Cookie：key1=value1; key2=value2; key3=value3</li>
<li>服务器响应Cookie：Set-Cookie: name=value；expires=date；path=path；domain=domain_name；secure</li>
</ul>
<p>==属性==</p>
<ul>
<li>name：为一个Cookie的名称。</li>
<li>domain：为可以访问此Cookie的域名，该域名可以使多个web服务器共享Cookie。</li>
<li>path：表示Cookie所在目录，“/”表示根目录。</li>
<li>expires/max-age：为Cookie的生命周期。若设置该值，则到此时间Cookie会失效。若没有设置该值，默认与session一起失效。浏览器关闭，Cookie失效。</li>
<li>secure：布尔值，指定Cookie的传输方式，默认是不安全的HTTP连接。</li>
<li>http：Cookie的httponly属性，若此属性为true，则只能在http的请求头中携带Cookie信息。</li>
</ul>
<h3 id="Session解读"><a href="#Session解读" class="headerlink" title="Session解读"></a>Session解读</h3><h4 id="什么是Session？"><a href="#什么是Session？" class="headerlink" title="什么是Session？"></a>什么是Session？</h4><p>百度百科是这么解释的：</p>
<blockquote>
<p>Session: 在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p>
</blockquote>
<h4 id="为什么要使用Session？"><a href="#为什么要使用Session？" class="headerlink" title="为什么要使用Session？"></a>为什么要使用Session？</h4><p>同样是因为HTTP是一个无状态协议。Session和Cookie的存在都是为了解决这个问题的。</p>
<p>由于服务器本身并不会维持用户的上下文，因此为了实现会话的跟踪，不得不想出一种办法。<br>==Session正是一种保存上下文的机制==，对于每一个用户来讲，用户所产生的变量值都保存在了服务器端，这样就使得整个会话都衔接的上，而每个用户有自己独一无二的ID，我们叫做==SessionID==。</p>
<h4 id="Session和Cookie有什么联系？"><a href="#Session和Cookie有什么联系？" class="headerlink" title="Session和Cookie有什么联系？"></a>Session和Cookie有什么联系？</h4><p>这个要从SessionID说起。我们上面提到服务器会每个用户创建一个SessionID，那么我们该如何使用它呢?</p>
<h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>这是我们最常用的方式，Cookie相当于一个SessionID的高级应用，是SessionID的载体或者容器。我们说Cookie可以用来识别用户身份，也是因为SessionID的缘故。</p>
<p><strong>因此，可以说Session是服务端的解决方案，实现了web的会话跟踪，而Cookie是客户端的解决方案，实现了跟踪过程的用户识别。</strong></p>
<p>Session是真正解决HTTP无状态的方案，而Cookie只是实现了Session过程中的SessionID方式。</p>
<h5 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h5><p>Cookie的使用给用户带来了极大的方便，以及很好的用户体验。但是Cookie存在着一些安全问题，Cookie储存在本地会很大程度暴露用户信息。因此，用户可以选择禁用Cookie。</p>
<p>那么另一种实现SessionID的方式就是URL重写。URL重写就是把SessionID附加在URL里，可以作为URL路径附加信息或者查询字符串附加在URL后面。</p>
<p><strong>就是说用户所有的请求的URL中都要有==sesssionID==这个东西，否则无法保持会话的持久状态。</strong></p>
<h5 id="表单隐藏字段"><a href="#表单隐藏字段" class="headerlink" title="表单隐藏字段"></a>表单隐藏字段</h5><p>服务器会修改表单，设置一个SessionID的隐藏字段，用户需要将SessionID填写到隐藏字段中提交表单，以让服务器知道用户身份。</p>
<p><strong>隐藏字段也是爬虫中的反爬策略之一</strong>，如果我们爬虫提交的表单没有填写隐藏字段，那么服务器会认为这是一种爬虫行为而禁掉，或者提交的内容不正确也可能造成同样的后果。因此，每次爬取前有必要查看一下是否存在隐藏字段。当然，关于隐藏字段还有更复杂的玩法这里就不详细介绍了。</p>
<h4 id="Session的关闭"><a href="#Session的关闭" class="headerlink" title="Session的关闭"></a>Session的关闭</h4><h5 id="关闭浏览器"><a href="#关闭浏览器" class="headerlink" title="关闭浏览器"></a>关闭浏览器</h5><p>有时候我们可能会误以为关闭了浏览器，Session就消失了。其实，Session并没有消失（session存储在服务器中），如果消失，消失的也是Cookie（如果储存在内存的话）。</p>
<p><strong>Session是储存在服务端的，注意是服务端</strong>。而服务端是不会知道浏览器什么时候关闭了的，但是服务端又不能一直开着Session，那样会损耗服务器资源。因此，为了解决这个问题，服务端一般会设置Session超时，通过检测用户活动状态来判断是否超时。如果超时，那么整个会话Session才真正消失，不然还是会开着直到超时。</p>
<p>如果Cookie是本地储存在磁盘上的，在我们关闭浏览器的很短一段时间内再次打开浏览器，还是会回到刚才那个Session会话。但是如果Cookie储存在内存中，再次打开时浏览器已经忘记了Cookie，那么就无法和刚才的会话连接上了。</p>
<p>结论是：==关闭浏览器并不会使服务端Session对象消失。==</p>
<h5 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h5><p>注销和关闭浏览器有着本质的区别，注销实际上会使Session对象消失。就比如我们在网页上点击注销一样，用户信息就都被清空了。如果需要连接Session，需要重新创建Session。</p>
<p>结论是：==注销会使服务端Session对象消失。==</p>
<h3 id="HTTPs解读"><a href="#HTTPs解读" class="headerlink" title="HTTPs解读"></a>HTTPs解读</h3><h4 id="什么是HTTPs"><a href="#什么是HTTPs" class="headerlink" title="什么是HTTPs?"></a>什么是HTTPs?</h4><blockquote>
<p>HTTPS（全称：Hyper Text Transfer Protocol over Secure SocketLayer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。<br>它是一个URIscheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器NetscapeNavigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。</p>
</blockquote>
<h4 id="HTTPs与HTTP的区别"><a href="#HTTPs与HTTP的区别" class="headerlink" title="HTTPs与HTTP的区别"></a>HTTPs与HTTP的区别</h4><blockquote>
<p>超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息。HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此HTTP协议不适合传输一些敏感信息，比如信用卡号、密码等。<br>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。<br>HTTPS和HTTP的区别主要为以下四点：</p>
<ul>
<li>一、https协议需要到ca申请证书，一般免费证书很少，需要交费。</li>
<li>二、http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</li>
<li>三、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li>
<li>四、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li>
</ul>
</blockquote>
<h4 id="HTTPs对爬虫的影响"><a href="#HTTPs对爬虫的影响" class="headerlink" title="HTTPs对爬虫的影响"></a>HTTPs对爬虫的影响</h4><p>乍一看感觉HTTPs有点像反爬的手段，通过上面的了解，我们发现HTTPs是对服务器端的验证，通过CA证书保证了我们访问的网站是有身份的，而非其他假网站。相反，我们爬虫模拟的是客户端，并不受HTTPs的限制。</p>
<p><strong>因此，HTTPs不影响我们爬虫</strong>。</p>
<p>但是，我们在爬虫的过程仍然也会遇到过类似SSL不通过之类的错误。比如，博主以前用requests访问HTTPs的时候遇到过这样的坑，但最后究其原因是同时打开了fiddler造成的。</p>
<blockquote>
<p>转载 <a href="https://segmentfault.com/a/1190000013074959" target="_blank" rel="external">https://segmentfault.com/a/1190000013074959</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇我们介绍了爬虫中HTTP的基础内容，相信看过的朋友们应该对HTTP已经有个初步的认识了。本篇博主将分享一些HTTP的高级内容，以及在爬虫中的应用，让大家更深入理解。这些内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie解读&lt;/li&gt;
&lt;li&gt;Session解读&lt;/li
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫|解读http的秘密&lt;基础篇&gt;</title>
    <link href="http://yoursite.com/2018/02/12/%E7%88%AC%E8%99%AB-%E8%A7%A3%E8%AF%BBhttp%E7%9A%84%E7%A7%98%E5%AF%86-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2018/02/12/爬虫-解读http的秘密-基础篇/</id>
    <published>2018-02-12T14:57:36.000Z</published>
    <updated>2018-02-12T07:44:58.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>在学习爬虫的过程中，相信大家对HTTP这个词已经不陌生了，它好像从未离开过我们的视线。被迫所需，我们每次都要使用开发者工具去查看请求头，响应头，以及头中的各个字段，使用别人封装好的模块填入信息，敲几行代码就解决了。面对简单的爬取任务，我们也许根本不用管它是什么，但可能等我们真正遇到问题的时候，却无从下手。</p>
<p>认识并深刻理解HTTP对于爬虫的实现过程是非常有帮助的。为了更好的让大家理解爬虫中的HTTP，博主将分为两篇对HTTP进行讲述，&lt;基础篇&gt; 和 &lt;高阶篇&gt;。本篇为基础篇，将从以下几个部分进行阐述。</p>
<ul>
<li>什么是HTTP</li>
<li>一个完整的HTTP请求过程</li>
<li>HTTP请求报文</li>
</ul>
<h3 id="什么是HTTP？"><a href="#什么是HTTP？" class="headerlink" title="什么是HTTP？"></a>什么是HTTP？</h3><h4 id=""><a href="#" class="headerlink" title=""></a><http的介绍></http的介绍></h4><p>引自百度百科的权威回答：</p>
<blockquote>
<p>超文本传输协议（HTTP，HyperText Transfer Protocol)<br>是互联网上应用最为广泛的一种网络协议。所有WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。<br>1960年美国人TedNelson构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了HTTP超文本传输协议标准架构的发展根基。TedNelson组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（InternetEngineering Task Force ）共同合作研究，最终发布了一系列的RFC，其中著名的RFC 2616定义了HTTP 1.1。<br><strong>HTTP协议是用于从WWW服务器传输超文本到本地浏览器的传输协议</strong>。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。</p>
</blockquote>
<h4 id="-1"><a href="#-1" class="headerlink" title=""></a><http的模型></http的模型></h4><p>HTTP采用了浏览器/服务器这种请求/响应模型，浏览器永远是HTTP请求的发起者，服务器为响应者。</p>
<p><img src="/images/爬虫-http-01.jpg" alt="爬虫-http-01" title="爬虫-http-01"></p>
<p>这样在浏览器客户端没有发起请求的情况下，服务器是不能主动推送消息给客户端的。这也可以说是http协议的一个缺点吧。</p>
<h4 id="-2"><a href="#-2" class="headerlink" title=""></a><http的定位></http的定位></h4><p>HTTP是一个<strong>应用层协议</strong>，是我们想从服务器端获取信息的最直观的请求。比如，在爬虫中使用的<strong><urllib模块></urllib模块></strong>，<strong><requests模块></requests模块></strong>等都是封装了HTTP协议，作为一个HTTP客户端实现了博文，图片，视频等信息源的下载。</p>
<p>但是HTTP也不是直接就可以用的，它的请求是建立在一些底层协议的基础上完成的。如<strong>TCP/IP</strong>协议栈中，HTTP需要TCP的三次握手连接成功后才能向服务器发起请求。当然，如果是<strong>HTTPS</strong>的话，还需要<strong>TSL</strong>和<strong>SSL</strong>安全层。</p>
<p><img src="/images/爬虫-http-02.jpg" alt="爬虫-http-02" title="爬虫-http-02"></p>
<h3 id="一个完整的HTTP请求过程"><a href="#一个完整的HTTP请求过程" class="headerlink" title="一个完整的HTTP请求过程"></a>一个完整的HTTP请求过程</h3><p>既然==HTTP==协议需要建立在其它底层协议基础上，我们来看看一个完整的HTTP请求是什么样的。</p>
<p>当我们点击一个链接或者输入一个链接的时候，整个HTTP的请求过程就开始了，然后经过以下步骤得到最后的信息，我们这里简单介绍一下前四个步骤，旨在了解HTTP。</p>
<p><img src="/images/爬虫-http-03.jpg" alt="爬虫-http-03" title="爬虫-http-03"></p>
<ul>
<li><strong>域名解析</strong>：首先会搜索各种本地DNS缓存，如果没有就会向DNS服务器（互联网提供商）发起域名解析，以获取IP地址。</li>
<li><strong>建立TCP连接</strong>：当获取IP后，将创建套接字socket连接，也就是TCP的3次握手连接，默认端口号80。</li>
<li><strong>HTTP请求</strong>：一旦TCP连接成功后，浏览器/爬虫就可以向服务器发起HTTP请求报文了，报文内容包含请求行、请求头部、请求主体。</li>
<li><strong>服务器响应</strong>：服务器响应，并返回一个HTTP响应包（如果成功会返回状态码200）和请求的HTML代码。</li>
</ul>
<p>上面的步骤<3>和<4>可以简单的示意如下，更方便大家理解。其中，请求和响应都包含特定格式的信息，具体我们接下来会继续解读。</4></3></p>
<p><img src="/images/爬虫-http-04.jpg" alt="爬虫-http-04" title="爬虫-http-04"></p>
<p>响应HTTP请求会返回响应状态码，根据状态码可以知道返回信息的状态。状态码规定如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">1xx: 信息响应类，表示接收到请求并且继续处理 </div><div class="line">100——必须继续发出请求 </div><div class="line">101——要求服务器根据请求转换HTTP协议版本</div><div class="line">2xx: 处理成功响应类，表示动作被成功接收、理解和接受 </div><div class="line">200——交易成功</div><div class="line">201——提示知道新文件的URL</div><div class="line">202——接受和处理、但处理未完成</div><div class="line">203——返回信息不确定或不完整</div><div class="line">204——请求收到，但返回信息为空</div><div class="line">205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</div><div class="line">206——服务器已经完成了部分用户的GET请求</div><div class="line"></div><div class="line">3xx: 重定向响应类，为了完成指定的动作，必须接受进一步处理</div><div class="line">300——请求的资源可在多处得到</div><div class="line">301——删除请求数据</div><div class="line">302——在其他地址发现了请求数据</div><div class="line">303——建议客户访问其他URL或访问方式</div><div class="line">304——客户端已经执行了GET，但文件未变化</div><div class="line">305——请求的资源必须从服务器指定的地址得到</div><div class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</div><div class="line">307——申明请求的资源临时性删除</div><div class="line"></div><div class="line">4xx: 客户端错误，客户请求包含语法错误或者是不能正确执行</div><div class="line">400——错误请求，如语法错误</div><div class="line">401——未授权</div><div class="line">402——保留有效ChargeTo头响应</div><div class="line">403——禁止访问</div><div class="line">404——没有发现文件、查询或URl</div><div class="line">405——在Request-Line字段定义的方法不允许</div><div class="line">406——根据发送的Accept，请求资源不可访问</div><div class="line">407——用户必须首先在代理服务器上得到授权</div><div class="line">408——客户端没有在指定的时间内完成请求</div><div class="line">409——对当前资源状态，请求不能完成</div><div class="line">410——服务器不再有此资源且无进一步地址</div><div class="line">411——服务器拒绝用户定义的Content-Length</div><div class="line">412——一个或多个请求头字段在当前请求中错误</div><div class="line">413——请求的资源大于服务器允许的大小</div><div class="line">414——请求的资源URL长于服务器允许的长度</div><div class="line">415——请求资源不支持请求项目格式</div><div class="line">416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</div><div class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</div><div class="line">5xx: 服务端错误，服务器不能正确执行一个正确的请求</div><div class="line">500——内部服务器错误</div><div class="line">501——未实现</div><div class="line">502——网关错误</div></pre></td></tr></table></figure>
<h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><p>相信你已经对HTTP的请求过程有了大致的了解了，下面我们来详细介绍HTTP请求的==报文信息==。<br>报文内容包含==请求行==、==请求头部==、==请求主体==</p>
<p><img src="/images/爬虫-http-05.jpg" alt="爬虫--http-05" title="爬虫-http-05"></p>
<p>下面我们来看一下通过开发者工具请求网址<a href="https://www.baidu.com/截取下来的HTTP请求报文内容，对比一下上面的标准格式。" target="_blank" rel="external">https://www.baidu.com/截取下来的HTTP请求报文内容，对比一下上面的标准格式。</a></p>
<p><img src="/images/爬虫-http-06.jpg" alt="爬虫-http-06" title="爬虫-http-06"></p>
<p>我们发现请求报文的格式与上面基本一致，正式我们想要的。那么，接下来我们将要逐个的介绍以上各个信息</p>
<h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>==GET==是HTTP的请求方式之一，HTTP/1.1协议中共定义了8种方法与服务器交互，有 GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT，其中比较常用的是==GET==和==POST==方法了。</p>
<ul>
<li>HEAD: 从服务器得到除了请求体与GET请求一样的响应</li>
<li>GET：通过URL获取查询资源信息（爬虫特定URL爬取）</li>
<li>POST：提交表单（爬虫中的模拟登录）</li>
<li>PUT：上传文件（浏览器不支持）</li>
<li>DELETE：删除</li>
<li>OPTIONS：返回服务器对特定资源支持的HTTP请求方法</li>
<li>TRACE：返回服务器收到的请求，用于测试或诊断 </li>
<li>CONNECT：预留给管道连接方式的代理服务</li>
</ul>
<p>==GET==请求方法后URL（这里是/）和版本1.1，别忘了空格。</p>
<h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>HTTP的头域包括==通用头==、==请求头==、==响应头==和==实体头==四部分。因为在爬虫过程中，我们经常会提交headers请求头信息用于伪装，所以我们这里对请求头着重讲解一下。</p>
<p>请求头是请求报文特有的，它向服务器提交了一些额外的信息，例如通过Accept字段信息，我们客户端可以告诉服务器我们接受一些什么类型的数据。而我们其实可以把这些字段信息就当成==键值对==对待。</p>
<p>下面我们看看这些字段都代表了什么意思？</p>
<h4 id="Accept"><a href="#Accept" class="headerlink" title="==Accept=="></a>==Accept==</h4><p>内容：text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8<br>含义：告诉浏览器我们接受MIME的类型</p>
<h4 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="==Accept-Encoding=="></a>==Accept-Encoding==</h4><p>内容：gzip, deflate, br<br>含义：如果有这个字段，则代表客户端支持压缩将内容编码，去掉后会支持任意编码。<br>注意：爬虫时一般不要把它加上，博主最开始就是不懂全都复制过来，结果因为这个就是不好使卡住好长时间。</p>
<h4 id="Accept-Lanague"><a href="#Accept-Lanague" class="headerlink" title="==Accept-Lanague=="></a>==Accept-Lanague==</h4><p>内容：zh-CN,zh;q=0.9<br>含义：告诉服务器能够接受的语言，没有则代表任何语言</p>
<h4 id="Connection"><a href="#Connection" class="headerlink" title="==Connection=="></a>==Connection==</h4><p>内容：keep-alive<br>含义：告诉服务器需要持久有效的连接状态（HTTP1.1默认会进行持久连接）</p>
<h4 id="Host"><a href="#Host" class="headerlink" title="==Host=="></a>==Host==</h4><p>内容：www.baidu.com<br>含义：客户端指定自己想访问的web服务器域名/IP地址和端口号</p>
<h4 id="Cache-control"><a href="#Cache-control" class="headerlink" title="==Cache-control=="></a>==Cache-control==</h4><p>内容：max-age=0<br>含义：(引自百度百科)</p>
<blockquote>
<p>Cache-Control<br>是最重要的规则。这个字段用于指定所有缓存机制在整个请求/响应链中必须服从的指令。这些指令指定用于阻止缓存对请求或响应造成不利干扰的行为。这些指令通常覆盖默认缓存算法。缓存指令是单向的，即请求中存在一个指令并不意味着响应中将存在同一个指令。<br>网页的缓存是由HTTP消息头中的“Cache-control”来控制的，常见的取值有private、no-cache、max-age、must-revalidate等，默认为private。</p>
</blockquote>
<p>但是HTTP请求和响应的Cache-Control是不完全一样的。<br>常见的请求Cache-Control取值有==no-cache==, ==no-store==, ==max-age==, ==max-stale==, ==min-fresh==, ==only-if-cached==。</p>
<p>响应的Cache-Control取值有==public==, ==private==,==no-cache==, ==no- store==, ==no-transform==, ==must-revalidate==, ==proxy-revalidate==, ==max-age==。</p>
<p>我们这里主要介绍请求时的常见Cache-Control取值。</p>
<h5 id="max-age-lt-0"><a href="#max-age-lt-0" class="headerlink" title="max-age&lt;=0"></a><1>max-age&lt;=0</1></h5><p>本例中使用max-age=0，表示每次请求会访问服务器，通过Last-Modified来判断文件是否被修改，如果被修改，返回状态码200并得到最新文件，否则将返回304状态码并读取缓存文件。</p>
<h5 id="max-age-gt-0"><a href="#max-age-gt-0" class="headerlink" title="max-age&gt;0"></a><2>max-age&gt;0</2></h5><p>表示会直接从浏览器提取缓存。</p>
<h5 id="no-cache"><a href="#no-cache" class="headerlink" title="no-cache"></a><3>no-cache</3></h5><p>表示不会在浏览器缓存进行提取，而是强制的向服务器发出请求，这样可以保证客户端能够收到最权威的回应。</p>
<h5 id="no-store"><a href="#no-store" class="headerlink" title="no-store"></a><4>no-store</4></h5><p>所有内容都不会被缓存到缓存或Internet临时文件中。</p>
<h4 id="Upgrade-Insecure-Requests"><a href="#Upgrade-Insecure-Requests" class="headerlink" title="==Upgrade-Insecure-Requests=="></a>==Upgrade-Insecure-Requests==</h4><p>内容：1<br>含义：表示浏览器/爬虫可以处理HTTPS协议，并能自动升级请求从HTTP到HTTPS。</p>
<h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="==User-Agent=="></a>==User-Agent==</h4><p>内容：Mozilla/5.0 (Windows NT 6.1; WOW64) ..Safari/537.36<br>含义：（这个是爬虫中最常用了）用于伪装成浏览器身份请求网页。它的意思自然就是表示浏览器的身份，说明是用的哪种浏览器进行的操作。</p>
<h4 id="Cookies"><a href="#Cookies" class="headerlink" title="==Cookies=="></a>==Cookies==</h4><p>含义：（这个也是爬虫中很重要的了，通常用于模拟登录）<br>Cookies是用于维持服务端的会话状态，由服务器端写入，然后在后续请求中，供服务器读取使用。</p>
<p><em>以上就是本例中出现的所有字段信息内容。当然，还有其它一些常用字段信息，这里也一起说明一下。</em></p>
<h3 id="其它请求头字段信息"><a href="#其它请求头字段信息" class="headerlink" title="其它请求头字段信息"></a>其它请求头字段信息</h3><h4 id="Referer"><a href="#Referer" class="headerlink" title="==Referer=="></a>==Referer==</h4><p>含义：（这个也是爬虫常用到的 ==防盗链==）<br>客户端通过当前URL代表的页面出发访问我们请求的页面。爬虫中，一般我们只要把它设置成请求的网页链接就好了。</p>
<h4 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="==Accept-Charset=="></a>==Accept-Charset==</h4><p>含义：（这个也是爬虫常用到的）<br>表示浏览器可接受的字符集，可以是utf-8，gbk等</p>
<h4 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="==If-Modified-Since=="></a>==If-Modified-Since==</h4><p>内容：Thu, 10 Apr 2008 09:14:42 GMT<br>含义：请求的内容在指定日期以后一旦被修改就被返回对象内容，否则返回“Not Modified”</p>
<h4 id="Pragma"><a href="#Pragma" class="headerlink" title="==Pragma=="></a>==Pragma==</h4><blockquote>
<p>Pragma头域用来包含实现特定的指令，最常用的是Pragma:no-cache。在HTTP/1.1协议中，它的含义和Cache-Control:no-cache相同。</p>
</blockquote>
<h4 id="Range"><a href="#Range" class="headerlink" title="==Range=="></a>==Range==</h4><p>含义：告诉浏览器自己想取对象的哪个部分。例如，Range: bytes=1173546</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;在学习爬虫的过程中，相信大家对HTTP这个词已经不陌生了，它好像从未离开过我们的视线。被迫所需，我们每次都要使用开发者工具去
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>运维|CentOS搭建JavaWeb环境</title>
    <link href="http://yoursite.com/2018/02/11/%E8%BF%90%E7%BB%B4-CentOS%E6%90%AD%E5%BB%BAJavaWeb%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/02/11/运维-CentOS搭建JavaWeb环境/</id>
    <published>2018-02-11T11:59:39.000Z</published>
    <updated>2018-02-12T06:36:15.786Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h3><p>这里列出的软件版本仅代表写作本文档使用的版本。操作时，请您以实际软件版本为准。</p>
<p>操作系统：CentOS 7.4<br>Tomcat 版本：Tomcat 8.0.49<br>JDK 版本：JDK 1.8.0_141</p>
<h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><p>CentOS 7.4 系统默认开启了防火墙。您可以关闭防火墙，也可以参考官网文档在防火墙里添加规则，放行 80、443 或 8080 端口入方向规则。</p>
<p>关闭防火墙：</p>
<blockquote>
<p>systemctl stop firewalld.service</p>
</blockquote>
<p>关闭防火墙开机自启动功能：</p>
<blockquote>
<p>systemctl disable firewalld.service</p>
</blockquote>
<p>创建一般用户 www，运行 tomcat：</p>
<blockquote>
<p>useradd www</p>
</blockquote>
<p>在安全组中放行 8080 端口。具体操作，请参考 添加安全组规则(如果在阿里云服务器)。</p>
<p>创建网站根目录：</p>
<blockquote>
<p>mkdir -p /data/wwwroot/default</p>
</blockquote>
<p>新建 Tomcat 测试页面：</p>
<blockquote>
<p>echo Tomcat test &gt; /data/wwwroot/default/index.jsp<br>chown -R www.www /data/wwwroot</p>
</blockquote>
<p>下载源代码</p>
<blockquote>
<p>wget <a href="https://mirrors.aliyun.com/apache/tomcat/tomcat-8/v8.0.49/bin/apache-tomcat-8.0.49.tar.gz" target="_blank" rel="external">https://mirrors.aliyun.com/apache/tomcat/tomcat-8/v8.0.49/bin/apache-tomcat-8.0.49.tar.gz</a></p>
</blockquote>
<p>说明：源代码版本会不断升级。您可以在 <strong><a href="https://mirrors.aliyun.com/apache/tomcat/tomcat-8/" target="_blank" rel="external">https://mirrors.aliyun.com/apache/tomcat/tomcat-8/</a></strong> 目录下获取合适的安装包地址。</p>
<blockquote>
<p>wget <a href="http://mirrors.linuxeye.com/jdk/jdk-8u141-linux-x64.tar.gz" target="_blank" rel="external">http://mirrors.linuxeye.com/jdk/jdk-8u141-linux-x64.tar.gz</a></p>
</blockquote>
<p>说明：源代码版本会不断升级。您可以在 <strong><a href="http://mirrors.linuxeye.com/jdk/" target="_blank" rel="external">http://mirrors.linuxeye.com/jdk/</a></strong> 目录下获取合适的安装包地址。</p>
<h3 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h3><p>按以下步骤安装 JDK。</p>
<p>1.新建一个目录：</p>
<blockquote>
<p>mkdir /usr/java</p>
</blockquote>
<p>解压 jdk-8u141-linux-x64.tar.gz 到 /usr/java。</p>
<blockquote>
<p>tar xzf jdk-8u141-linux-x64.tar.gz -C /usr/java</p>
</blockquote>
<p>设置环境变量：</p>
<p>编辑 /etc/profile：<strong>vi /etc/profile</strong>。</p>
<p>按 i 键进入编辑模式。</p>
<p>在 /etc/profile 文件中添加以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#set java environment</div><div class="line">export JAVA_HOME=/usr/java/jdk1.8.0_141</div><div class="line">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>按 Esc 键退出编辑模式，输入 :wq 保存并关闭文件。</p>
<p>加载环境变量：<strong>source /etc/profile</strong>。</p>
<p>查看 jdk 版本。当出现 jdk 版本信息时，表示 JDK 已经安装成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java -version</div><div class="line">java version &quot;1.8.0_141&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)</div></pre></td></tr></table></figure></p>
<h3 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h3><p>按以下步骤安装 Tomcat。</p>
<ol>
<li>依次运行以下命令解压 apache-tomcat-8.5.23.tar.gz，重命名 Tomcat 目录，并设置用户权限。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xzf apache-tomcat-8.0.49.tar.gz</div><div class="line">mv apache-tomcat-8.0.49 /usr/local/tomcat/</div><div class="line">chown -R www.www /usr/local/tomcat/</div></pre></td></tr></table></figure>
</li>
</ol>
<p>说明：</p>
<p>在 /usr/local/tomcat/ 目录里：</p>
<ul>
<li>bin 目录中存放 Tomcat 的一些脚本文件，包含启动和关闭 Tomcat 服务脚本。</li>
<li>conf：存放 Tomcat 服务器的各种全局配置文件，其中最重要的是 server.xml 和 web.xml。</li>
<li>webapps：Tomcat 的主要 Web 发布目录，默认情况下把 Web 应用文件放于此目录。</li>
<li>logs：存放 Tomcat 执行时的日志文件。</li>
</ul>
<p>2.配置 server.xml 文件：</p>
<p>切换到 /usr/local/tomcat/conf/ 目录：<strong>cd /usr/local/tomcat/conf/</strong>。</p>
<p>重命名 server.xml 文件：<strong>mv server.xml server.xml_bk</strong>。</p>
<p>创建一个新的 server.xml 文件：</p>
<p>运行命令 <strong>vi server.xml</strong>。</p>
<p>按 i 键进入编辑模式。</p>
<p>添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line"> &lt;Server port=&quot;8006&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class="line">&lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;/&gt;</div><div class="line">&lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;/&gt;</div><div class="line">&lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;/&gt;</div><div class="line">&lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot;/&gt;</div><div class="line">&lt;GlobalNamingResources&gt;</div><div class="line">  &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class="line">            type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class="line">            description=&quot;User database that can be updated and saved&quot;</div><div class="line">            factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class="line">            pathname=&quot;conf/tomcat-users.xml&quot;/&gt;</div><div class="line">&lt;/GlobalNamingResources&gt;</div><div class="line">&lt;Service name=&quot;Catalina&quot;&gt;</div><div class="line">  &lt;Connector port=&quot;8080&quot;</div><div class="line">            protocol=&quot;HTTP/1.1&quot;</div><div class="line">            connectionTimeout=&quot;20000&quot;</div><div class="line">            redirectPort=&quot;8443&quot;</div><div class="line">            maxThreads=&quot;1000&quot;</div><div class="line">            minSpareThreads=&quot;20&quot;</div><div class="line">            acceptCount=&quot;1000&quot;</div><div class="line">            maxHttpHeaderSize=&quot;65536&quot;</div><div class="line">            debug=&quot;0&quot;</div><div class="line">            disableUploadTimeout=&quot;true&quot;</div><div class="line">            useBodyEncodingForURI=&quot;true&quot;</div><div class="line">            enableLookups=&quot;false&quot;</div><div class="line">            URIEncoding=&quot;UTF-8&quot;/&gt;</div><div class="line">  &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class="line">    &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class="line">      &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class="line">             resourceName=&quot;UserDatabase&quot;/&gt;</div><div class="line">    &lt;/Realm&gt;</div><div class="line">    &lt;Host name=&quot;localhost&quot; appBase=&quot;/data/wwwroot/default&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class="line">      &lt;Context path=&quot;&quot; docBase=&quot;/data/wwwroot/default&quot; debug=&quot;0&quot; reloadable=&quot;false&quot; crossContext=&quot;true&quot;/&gt;</div><div class="line">      &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class="line">        prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class="line">    &lt;/Host&gt;</div><div class="line">  &lt;/Engine&gt;</div><div class="line">&lt;/Service&gt;</div><div class="line">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>
<p>设置 JVM 内存参数：</p>
<p>运行命令 <strong>vi /usr/local/tomcat/bin/setenv.sh</strong>， 创建 /usr/local/tomcat/bin/setenv.sh。<br>按 i 键进入编辑模式。<br>添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JAVA_OPTS=’-Djava.security.egd=file:/dev/./urandom -server -Xms256m -Xmx496m -Dfile.encoding=UTF-8’</div></pre></td></tr></table></figure></p>
<p>按 Esc 键退出编辑模式，输入 :wq 保存并退出文件。</p>
<p>-server:一定要作为第一个参数，在多个CPU时性能佳<br>-Xms：初始Heap大小，使用的最小内存,cpu性能高时此值应设的大一些<br>-Xmx：java heap最大值，使用的最大内存<br>上面两个值是分配JVM的最小和最大内存，取决于硬件物理内存的大小，建议均设为物理内存的一半。<br>-XX:PermSize:设定内存的永久保存区域<br>-XX:MaxPermSize:设定最大内存的永久保存区域<br>-XX:MaxNewSize:<br>-Xss 15120 这使得JBoss每增加一个线程（thread)就会立即消耗15M内存，而最佳值应该是128K,默认值好像是512k.<br>+XX:AggressiveHeap 会使得 Xms没有意义。这个参数让jvm忽略Xmx参数,疯狂地吃完一个G物理内存,再吃尽一个G的swap。<br>-Xss：每个线程的Stack大小<br>-verbose:gc 现实垃圾收集信息<br>-Xloggc:gc.log 指定垃圾收集日志文件<br>-Xmn：young generation的heap大小，一般设置为Xmx的3、4分之一<br>-XX:+UseParNewGC ：缩短minor收集的时间<br>-XX:+UseConcMarkSweepGC ：缩短major收集的时间</p>
<p>3.设置 Tomcat 自启动脚本。</p>
<p>下载脚本：<strong>wget <a href="https://github.com/lj2007331/oneinstack/raw/master/init.d/Tomcat-init" target="_blank" rel="external">https://github.com/lj2007331/oneinstack/raw/master/init.d/Tomcat-init</a></strong></p>
<p>重命名 Tomcat-init。<strong>mv Tomcat-init /etc/init.d/tomcat</strong></p>
<p>添加执行权限：<strong>chmod +x /etc/init.d/tomcat</strong></p>
<p>设置启动脚本 JAVA_HOME：<strong>sed -i ‘s@^export JAVA_HOME=.*@export JAVA_HOME=/usr/java/jdk1.8.0_141@’ /etc/init.d/tomcat</strong></p>
<p>4.设置自启动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chkconfig --add tomcat</div><div class="line">chkconfig tomcat on</div></pre></td></tr></table></figure></p>
<p>5.启动 Tomcat。</p>
<blockquote>
<p>service tomcat start</p>
</blockquote>
<p>6.在浏览器地址栏中输入 <a href="http://ip:8080" target="_blank" rel="external">http://ip:8080</a> 进行访问。出现如图所示页面时表示安装成功。</p>
<p><img src="/images/搭建JavaWeb服务器.png" alt="enter description here" title="搭建JavaWeb服务器"></p>
<h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><h4 id="卸载老版本MySQL"><a href="#卸载老版本MySQL" class="headerlink" title="卸载老版本MySQL"></a>卸载老版本MySQL</h4><p>查找并删除mysql有关的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">find / -name mysql</div><div class="line">rm -rf 上边查找到的路径，多个路径用空格隔开</div><div class="line">#或者下边一条命令即可</div><div class="line">find / -name mysql|xargs rm -rf</div></pre></td></tr></table></figure></p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><blockquote>
<p>wget <a href="http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.33-linux-glibc2.5-x86_64.tar.gz" target="_blank" rel="external">http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.33-linux-glibc2.5-x86_64.tar.gz</a></p>
</blockquote>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><blockquote>
<p>tar -zxvf mysql-5.6.33-linux-glibc2.5-x86_64.tar.gz</p>
</blockquote>
<h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><blockquote>
<p>mv mysql-5.6.33-linux-glibc2.5-x86_64/  /usr/local/mysql</p>
</blockquote>
<h4 id="添加mysql用户组和mysql用户"><a href="#添加mysql用户组和mysql用户" class="headerlink" title="添加mysql用户组和mysql用户"></a>添加mysql用户组和mysql用户</h4><p>先检查是否有mysql用户组和mysql用户</p>
<blockquote>
<p>groups mysql</p>
</blockquote>
<p>若无，则添加；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">groupadd mysql</div><div class="line">useradd -r -g mysql mysql</div></pre></td></tr></table></figure></p>
<h4 id="进入mysql目录更改权限"><a href="#进入mysql目录更改权限" class="headerlink" title="进入mysql目录更改权限"></a>进入mysql目录更改权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/mysql</div><div class="line">chown -R mysql:mysql ./</div></pre></td></tr></table></figure>
<h4 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h4><blockquote>
<p>./scripts/mysql_install_db –user=mysql</p>
</blockquote>
<p>安装完之后修改当前目录拥有者为root用户，修改data目录拥有者为mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown -R root:root ./</div><div class="line">chown -R mysql:mysql data</div></pre></td></tr></table></figure>
<h4 id="更改mysql密码"><a href="#更改mysql密码" class="headerlink" title="更改mysql密码"></a>更改mysql密码</h4><p>上一步安装脚本执行输出的日志中告诉我们如何更改密码了</p>
<p><img src="/images/搭建JavaWeb服务器-mysql.png" alt="搭建JavaWeb服务器--mysql" title="搭建JavaWeb服务器-mysql"></p>
<p>但是如果直接执行这两条命令就会报错<br><img src="/images/搭建JavaWeb服务器--mysql.png" alt="搭建JavaWeb服务器--mysql" title="搭建JavaWeb服务器--mysql"></p>
<p>因为这时还没有启动mysql，这算是一个坑。启动方法如下：</p>
<blockquote>
<p>./support-files/mysql.server start</p>
</blockquote>
<p><img src="/images/搭建JavaWeb服务器---mysql.png" alt="搭建JavaWeb服务器---mysql" title="搭建JavaWeb服务器---mysql"></p>
<p>如果MySQL启动报错，则可能是已经存在MySQL进程，杀掉即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ps aux|grep mysql</div><div class="line">kill -9 上边的进程号</div><div class="line">#或者下边一条命令即可杀掉所有MySQL进程</div><div class="line">ps aux|grep mysql|awk &apos;&#123;print $2&#125;&apos;|xargs kill -9</div></pre></td></tr></table></figure></p>
<p>MySQL启动之后再执行如下命令更改密码：</p>
<blockquote>
<p>./bin/mysqladmin -u root -h localhost.localdomain password ‘root’</p>
</blockquote>
<p>密码更改后即可登录MySQL</p>
<blockquote>
<p>./bin/mysql -h127.0.0.1 -uroot -proot</p>
</blockquote>
<p><img src="/images/搭建JavaWeb服务器----mysql.png" alt="搭建JavaWeb服务器----mysql" title="搭建JavaWeb服务器----mysql"></p>
<p>登录之后将其他用户的密码也可改为root<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">update mysql.user set password=password(&apos;root&apos;) where user=&apos;root&apos;;</div><div class="line">flush privileges;</div></pre></td></tr></table></figure></p>
<h4 id="增加远程登录权限"><a href="#增加远程登录权限" class="headerlink" title="增加远程登录权限"></a>增加远程登录权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grant all privileges on *.* to root@&apos;%&apos; identified by &apos;root&apos;;</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<h4 id="将MySQL加入Service系统服务"><a href="#将MySQL加入Service系统服务" class="headerlink" title="将MySQL加入Service系统服务"></a>将MySQL加入Service系统服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cp support-files/mysql.server /etc/init.d/mysqld</div><div class="line">chkconfig --add mysqld</div><div class="line">chkconfig mysqld on</div><div class="line">service mysqld restart</div><div class="line">service mysqld status</div></pre></td></tr></table></figure>
<p><img src="/images/搭建JavaWeb服务器-----mysql.png" alt="搭建JavaWeb服务器-----mysql" title="搭建JavaWeb服务器-----mysql"></p>
<h4 id="配置my-cnf-配置可能会出错-这一步可以忽"><a href="#配置my-cnf-配置可能会出错-这一步可以忽" class="headerlink" title="配置my.cnf[配置可能会出错|这一步可以忽]"></a>配置my.cnf[配置可能会出错|这一步可以忽]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim my.cnf</div><div class="line">#添加以下两条语句并保存退出</div><div class="line">default-character-set=utf8</div><div class="line">lower_case_table_names=1</div><div class="line">max_allowed_packet=100M</div></pre></td></tr></table></figure>
<p>配置好之后，重启mysqld服务</p>
<p><img src="/images/搭建JavaWeb服务器#mysql.png" alt="搭建JavaWeb服务器#mysql" title="搭建JavaWeb服务器#mysql"></p>
<blockquote>
<p>引用 <a href="https://help.aliyun.com/document_detail/51376.html?spm=a2c4g.11186623.2.6.f7qoYA" target="_blank" rel="external">https://help.aliyun.com/document_detail/51376.html?spm=a2c4g.11186623.2.6.f7qoYA</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置要求&quot;&gt;&lt;a href=&quot;#配置要求&quot; class=&quot;headerlink&quot; title=&quot;配置要求&quot;&gt;&lt;/a&gt;配置要求&lt;/h3&gt;&lt;p&gt;这里列出的软件版本仅代表写作本文档使用的版本。操作时，请您以实际软件版本为准。&lt;/p&gt;
&lt;p&gt;操作系统：CentOS 7.4
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java|徒手撸框架--实现Aop</title>
    <link href="http://yoursite.com/2018/02/10/Java-%E5%BE%92%E6%89%8B%E6%92%B8%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0Aop/"/>
    <id>http://yoursite.com/2018/02/10/Java-徒手撸框架-实现Aop/</id>
    <published>2018-02-10T15:50:24.000Z</published>
    <updated>2018-02-10T08:20:36.397Z</updated>
    
    <content type="html"><![CDATA[<p>Spring框架有两大特性，一个是IOC,另一个是AOP.对于Spring Aop的实现讲解的都不太透彻，大部分文章介绍了Spring Aop的底层技术使用了动态代理，至于Spring Aop的具体实现都语焉不详。这类文章看以后以后，我脑子里浮现的就是这样一个画面：</p>
<p><img src="/images/徒手鲁框架--04.jpg" alt="徒手鲁框架--04" title="徒手鲁框架--04"></p>
<p>我的想法就是，带领大家，首先梳理 Spring Aop的实现，然后屏蔽细节，自己实现一个Aop框架。加深对Spring Aop的理解。在了解上图1-4步骤的同时，补充 4 到 5 步骤之间的其他细节。</p>
<p>读完这篇文章你将会了解：</p>
<ul>
<li>Aop是什么？</li>
<li>为什么要使用Aop？</li>
<li>Spirng 实现Aop的思路是什么</li>
<li>自己根据Spring 思想实现一个 Aop框架</li>
</ul>
<h3 id="Aop-是什么？"><a href="#Aop-是什么？" class="headerlink" title="Aop 是什么？"></a>Aop 是什么？</h3><p>面向切面的程序设计（aspect-oriented programming，AOP）。通过预编译方式和运行期动态代理实现程序功能统一维护的一种技术。</p>
<h3 id="为什么需要使用Aop？"><a href="#为什么需要使用Aop？" class="headerlink" title="为什么需要使用Aop？"></a>为什么需要使用Aop？</h3><p>面向切面编程，实际上就是通过预编译或者动态代理技术在不修改源代码的情况下给原来的程序统一添加功能的一种技术。我们看几个关键词，第一个是“动态代理技术”，这个就是Spring Aop实现底层技术。第二个“不修改源代码”，这个就是Aop最关键的地方，也就是我们平时所说的非入侵性。。第三个“添加功能”，不改变原有的源代码，为程序添加功能。</p>
<p>举个例子：如果某天你需要统计若干方法的执行时间，如果不是用Aop技术，你要做的就是为每一个方法开始的时候获取一个开始时间，在方法结束的时候获取结束时间。二者之差就是方法的执行时间。如果对每一个需要统计的方法都做如上的操作，那代码简直就是灾难。如果我们使用Aop技术，在不修改代码的情况下，添加一个统计方法执行时间的切面。代码就变得十分优雅。具体这个切面怎么实现？看完下面的文章你一定就会知道。</p>
<h3 id="Spring-Aop-是怎么实现的？"><a href="#Spring-Aop-是怎么实现的？" class="headerlink" title="Spring Aop 是怎么实现的？"></a>Spring Aop 是怎么实现的？</h3><p>所谓：</p>
<blockquote>
<p>计算机程序 = 数据结构 + 算法</p>
</blockquote>
<p>在阅读过Spring源码之后，你就会对这个说法理解更深入了。</p>
<p>Spring Aop实现的代码非常非常的绕。也就是说 Spring 为了灵活做了非常深层次的抽象。同时 Spring为了兼容 @AspectJ 的Aop协议，使用了很多 Adapter （适配器）模式又进一步的增加了代码的复杂程度。</p>
<p>Spring 的 Aop 实现主要以下几个步骤：</p>
<ul>
<li>初始化 Aop 容器。</li>
<li>读取配置文件。</li>
<li>将配置文件装换为 Aop 能够识别的数据结构 – Advisor。这里展开讲一讲这个advisor。Advisor对象中包又含了两个重要的数据结构，一个是 Advice，一个是 Pointcut。Advice的作用就是描述一个切面的行为，pointcut描述的是切面的位置。两个数据结的组合就是”在哪里，干什么“。这样 Advisor 就包含了”在哪里干什么“的信息，就能够全面的描述切面了。</li>
<li>Spring 将这个 Advisor 转换成自己能够识别的数据结构 – AdvicedSupport。Spirng 动态的将这些方法拦截器织入到对应的方法。</li>
<li>生成动态代理代理。</li>
<li>提供调用，在使用的时候，调用方调用的就是代理方法。也就是已经织入了增强方法的方法。</li>
</ul>
<h3 id="自己实现一个-Aop-框架"><a href="#自己实现一个-Aop-框架" class="headerlink" title="自己实现一个 Aop 框架"></a>自己实现一个 Aop 框架</h3><p>同样，我也是参考了Aop的设计。只实现了基于方法的拦截器。去除了很多的实现细节。</p>
<p>使用上一讲的 IoC 框架管理对象。使用 Cglib 作为动态代理的基础类。使用 maven 管理 jar 包和 module。所以上一讲的 IoC 框架会作为一个 modules 引入项目。</p>
<p>下面我们就来实现我们的Aop 框架吧。</p>
<p>首先来看看代码的基本结构。</p>
<p><img src="/images/徒手鲁框架--05.jpg" alt="徒手鲁框架--05" title="徒手鲁框架--05"></p>
<p>我们首先对包每个包都干了什么做一个简单介绍。</p>
<ul>
<li>invocation 描述的就是一个方法的调用。注意这里指的是“方法的调用”，而不是调用这个动作。</li>
<li>interceptor 大家最熟悉的拦截器，拦截器拦截的目标就是 invcation 包里面的调用。</li>
<li>advisor 这个包里的对象，都是用来描述切面的数据结构。</li>
<li>adapter 这个包里面是一些适配器方法。对于”适配器”不了解的同学可以去看看”设计模式”里面的”适配模式”。他的作用就是将 advice 包里的对象适配为 interceptor。</li>
<li>bean 描述我们 json 配置文件的对象。</li>
<li>core 我们框架的核心逻辑。</li>
</ul>
<p>这个时候宏观的看我们大概梳理出了一条路线， adaper 将 advisor 适配为 interceptor 去拦截 invoction。</p>
<p>下面我们从这个链条的最末端讲起：</p>
<h4 id="invcation"><a href="#invcation" class="headerlink" title="invcation"></a>invcation</h4><p>首先 MethodInvocation 作为所有方法调用的接口。要描述一个方法的调用包含三个方法，获取方法本身getMethod,获取方法的参数getArguments，还有执行方法本身proceed()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface MethodInvocation &#123;</div><div class="line">    Method getMethod();</div><div class="line">    Object[] getArguments();</div><div class="line">    Object proceed() throws Throwable;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ProxyMethodInvocation 看名字就知道，是代理方法的调用，增加了一个获取代理的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface ProxyMethodInvocation extends MethodInvocation &#123;</div><div class="line">    Object getProxy();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="interceptor"><a href="#interceptor" class="headerlink" title="interceptor"></a>interceptor</h4><p>AopMethodInterceptor 是 Aop 容器所有拦截器都要实现的接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface AopMethodInterceptor &#123;</div><div class="line">    Object invoke(MethodInvocation mi) throws Throwable;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同时我们实现了两种拦截器BeforeMethodAdviceInterceptor和AfterRunningAdviceInterceptor,顾名思义前者就是在方法执行以前拦截，后者就在方法运行结束以后拦截：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class BeforeMethodAdviceInterceptor implements AopMethodInterceptor &#123;</div><div class="line">    private BeforeMethodAdvice advice;</div><div class="line">    public BeforeMethodAdviceInterceptor(BeforeMethodAdvice advice) &#123;</div><div class="line">        this.advice = advice;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Object invoke(MethodInvocation mi) throws Throwable &#123;</div><div class="line">        advice.before(mi.getMethod(),mi.getArguments(),mi);</div><div class="line">        return mi.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class AfterRunningAdviceInterceptor implements AopMethodInterceptor &#123;</div><div class="line">    private AfterRunningAdvice advice;</div><div class="line"></div><div class="line">    public AfterRunningAdviceInterceptor(AfterRunningAdvice advice) &#123;</div><div class="line">        this.advice = advice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object invoke(MethodInvocation mi) throws Throwable &#123;</div><div class="line">        Object returnVal = mi.proceed();</div><div class="line">        advice.after(returnVal,mi.getMethod(),mi.getArguments(),mi);</div><div class="line">        return returnVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看了上面的代码我们发现，实际上 mi.proceed()才是执行原有的方法。而advice我们上文就说过，是描述增强的方法”干什么“的数据结构，所以对于这个before拦截器，我们就把advice对应的增强方法放在了真正执行的方法前面。而对于after拦截器而言，就放在了真正执行的方法后面。</p>
<p>这个时候我们过头来看最关键的 ReflectioveMethodeInvocation<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public class ReflectioveMethodeInvocation implements ProxyMethodInvocation &#123;</div><div class="line">    public ReflectioveMethodeInvocation(Object proxy, Object target, Method method, Object[] arguments, List&lt;AopMethodInterceptor&gt; interceptorList) &#123;</div><div class="line">        this.proxy = proxy;</div><div class="line">        this.target = target;</div><div class="line">        this.method = method;</div><div class="line">        this.arguments = arguments;</div><div class="line">        this.interceptorList = interceptorList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected final Object proxy;</div><div class="line"></div><div class="line">    protected final Object target;</div><div class="line"></div><div class="line">    protected final Method method;</div><div class="line"></div><div class="line">    protected Object[] arguments = new Object[0];</div><div class="line"></div><div class="line">    //存储所有的拦截器</div><div class="line">    protected final List&lt;AopMethodInterceptor&gt; interceptorList;</div><div class="line"></div><div class="line">    private int currentInterceptorIndex = -1;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getProxy() &#123;</div><div class="line">        return proxy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Method getMethod() &#123;</div><div class="line">        return method;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object[] getArguments() &#123;</div><div class="line">        return arguments;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object proceed() throws Throwable &#123;</div><div class="line"></div><div class="line">        //执行完所有的拦截器后，执行目标方法</div><div class="line">        if(currentInterceptorIndex == this.interceptorList.size() - 1) &#123;</div><div class="line">            return invokeOriginal();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //迭代的执行拦截器。回顾上面的讲解，我们实现的拦击都会执行 im.proceed() 实际上又会调用这个方法。实现了一个递归的调用，直到执行完所有的拦截器。</div><div class="line">        AopMethodInterceptor interceptor = interceptorList.get(++currentInterceptorIndex);</div><div class="line">        return interceptor.invoke(this);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected Object invokeOriginal() throws Throwable&#123;</div><div class="line">        return ReflectionUtils.invokeMethodUseReflection(target,method,arguments);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在实际的运用中，我们的方法很可能被多个方法的拦截器所增强。所以我们，使用了一个list来保存所有的拦截器。所以我们需要递归的去增加拦截器。当处理完了所有的拦截器之后，才会真正调用调用被增强的方法。我们可以认为，前文所述的动态的织入代码就发生在这里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class CglibMethodInvocation extends ReflectioveMethodeInvocation &#123;</div><div class="line"></div><div class="line">    private MethodProxy methodProxy;</div><div class="line"></div><div class="line">    public CglibMethodInvocation(Object proxy, Object target, Method method, Object[] arguments, List&lt;AopMethodInterceptor&gt; interceptorList, MethodProxy methodProxy) &#123;</div><div class="line">        super(proxy, target, method, arguments, interceptorList);</div><div class="line">        this.methodProxy = methodProxy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected Object invokeOriginal() throws Throwable &#123;</div><div class="line">        return methodProxy.invoke(target,arguments);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CglibMethodInvocation 只是重写了 invokeOriginal 方法。使用代理类来调用被增强的方法。</p>
<h4 id="advisor"><a href="#advisor" class="headerlink" title="advisor"></a>advisor</h4><p>这个包里面都是一些描述切面的数据结构，我们讲解两个重要的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class Advisor &#123;</div><div class="line">    //干什么</div><div class="line">    private Advice advice;</div><div class="line">    //在哪里</div><div class="line">    private Pointcut pointcut;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上文所说，advisor 描述了在哪里，干什么。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class AdvisedSupport extends Advisor &#123;</div><div class="line">    //目标对象</div><div class="line">    private TargetSource targetSource;</div><div class="line">    //拦截器列表</div><div class="line">    private List&lt;AopMethodInterceptor&gt; list = new LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    public void addAopMethodInterceptor(AopMethodInterceptor interceptor)&#123;</div><div class="line">        list.add(interceptor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void addAopMethodInterceptors(List&lt;AopMethodInterceptor&gt; interceptors)&#123;</div><div class="line">        list.addAll(interceptors);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个AdvisedSupport就是 我们Aop框架能够理解的数据结构，这个时候问题就变成了–对于哪个目标，增加哪些拦截器。</p>
<h4 id="core"><a href="#core" class="headerlink" title="core"></a>core</h4><p>有了上面的准备，我们就开始讲解核心逻辑了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">public class CglibAopProxy implements AopProxy&#123;</div><div class="line">    private AdvisedSupport advised;</div><div class="line">    private Object[] constructorArgs;</div><div class="line">    private Class&lt;?&gt;[] constructorArgTypes;</div><div class="line">    public CglibAopProxy(AdvisedSupport config)&#123;</div><div class="line">        this.advised = config;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getProxy() &#123;</div><div class="line">        return getProxy(null);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Object getProxy(ClassLoader classLoader) &#123;</div><div class="line">        Class&lt;?&gt; rootClass = advised.getTargetSource().getTagetClass();</div><div class="line">        if(classLoader == null)&#123;</div><div class="line">            classLoader = ClassUtils.getDefultClassLoader();</div><div class="line">        &#125;</div><div class="line">        Enhancer enhancer = new Enhancer();</div><div class="line">        enhancer.setSuperclass(rootClass.getSuperclass());</div><div class="line">        //增加拦截器的核心方法</div><div class="line">        Callback callbacks = getCallBack(advised);</div><div class="line">        enhancer.setCallback(callbacks);</div><div class="line">        enhancer.setClassLoader(classLoader);</div><div class="line">        if(constructorArgs != null &amp;&amp; constructorArgs.length &gt; 0)&#123;</div><div class="line">            return enhancer.create(constructorArgTypes,constructorArgs);</div><div class="line">        &#125;</div><div class="line">        return enhancer.create();</div><div class="line">    &#125;</div><div class="line">    private Callback getCallBack(AdvisedSupport advised) &#123;</div><div class="line">        return new DynamicAdvisedIcnterceptor(advised.getList(),advised.getTargetSource());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CglibAopProxy就是我们代理对象生成的核心方法。使用 cglib 生成代理类。我们可以与之前ioc框架的代码。比较发现区别就在于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Callback callbacks = getCallBack(advised);</div><div class="line">enhancer.setCallback(callbacks);</div></pre></td></tr></table></figure></p>
<p>callback与之前不同了，而是写了一个getCallback()的方法，我们就来看看 getCallback 里面的 DynamicAdvisedIcnterceptor到底干了啥。</p>
<p>篇幅问题，这里不会介绍 cglib 的使用，对于callback的作用，不理解的同学需要自行学习。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class DynamicAdvisedInterceptor implements MethodInterceptor&#123;</div><div class="line"></div><div class="line">    protected final List&lt;AopMethodInterceptor&gt; interceptorList;</div><div class="line">    protected final TargetSource targetSource;</div><div class="line"></div><div class="line">    public DynamicAdvisedInterceptor(List&lt;AopMethodInterceptor&gt; interceptorList, TargetSource targetSource) &#123;</div><div class="line">        this.interceptorList = interceptorList;</div><div class="line">        this.targetSource = targetSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable &#123;</div><div class="line">        MethodInvocation invocation = new CglibMethodInvocation(obj,targetSource.getTagetObject(),method, args,interceptorList,proxy);</div><div class="line">        return invocation.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里需要注意，DynamicAdvisedInterceptor这个类实现的 MethodInterceptor 是 gclib的接口，并非我们之前的 AopMethodInterceptor。</p>
<p>我们近距离观察 intercept 这个方法我们看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MethodInvocation invocation = new CglibMethodInvocation(obj,targetSource.getTagetObject(),method, args,interceptorList,proxy);</div></pre></td></tr></table></figure></p>
<p>通过这行代码，我们的整个逻辑终于连起来了。也就是这个动态的拦截器，把我们通过 CglibMethodInvocation 织入了增强代码的方法，委托给了 cglib 来生成代理对象。</p>
<p>至此我们的 Aop 的核心功能就实现了。</p>
<p><strong>AopBeanFactoryImpl</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">public class AopBeanFactoryImpl extends BeanFactoryImpl&#123;</div><div class="line"></div><div class="line">    private static final ConcurrentHashMap&lt;String,AopBeanDefinition&gt; aopBeanDefinitionMap = new ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    private static final ConcurrentHashMap&lt;String,Object&gt; aopBeanMap = new ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getBean(String name) throws Exception &#123;</div><div class="line">        Object aopBean = aopBeanMap.get(name);</div><div class="line"></div><div class="line">        if(aopBean != null)&#123;</div><div class="line">            return aopBean;</div><div class="line">        &#125;</div><div class="line">        if(aopBeanDefinitionMap.containsKey(name))&#123;</div><div class="line">            AopBeanDefinition aopBeanDefinition = aopBeanDefinitionMap.get(name);</div><div class="line">            AdvisedSupport advisedSupport = getAdvisedSupport(aopBeanDefinition);</div><div class="line">            aopBean = new CglibAopProxy(advisedSupport).getProxy();</div><div class="line">            aopBeanMap.put(name,aopBean);</div><div class="line">            return aopBean;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return super.getBean(name);</div><div class="line">    &#125;</div><div class="line">    protected void registerBean(String name, AopBeanDefinition aopBeanDefinition)&#123;</div><div class="line">        aopBeanDefinitionMap.put(name,aopBeanDefinition);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private AdvisedSupport getAdvisedSupport(AopBeanDefinition aopBeanDefinition) throws Exception &#123;</div><div class="line"></div><div class="line">        AdvisedSupport advisedSupport = new AdvisedSupport();</div><div class="line">        List&lt;String&gt; interceptorNames = aopBeanDefinition.getInterceptorNames();</div><div class="line">        if(interceptorNames != null &amp;&amp; !interceptorNames.isEmpty())&#123;</div><div class="line">            for (String interceptorName : interceptorNames) &#123;</div><div class="line"></div><div class="line">                Advice advice = (Advice) getBean(interceptorName);</div><div class="line"></div><div class="line">                Advisor advisor = new Advisor();</div><div class="line">                advisor.setAdvice(advice);</div><div class="line"></div><div class="line">                if(advice instanceof BeforeMethodAdvice)&#123;</div><div class="line">                    AopMethodInterceptor interceptor = BeforeMethodAdviceAdapter.getInstants().getInterceptor(advisor);</div><div class="line">                    advisedSupport.addAopMethodInterceptor(interceptor);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                if(advice instanceof AfterRunningAdvice)&#123;</div><div class="line">                    AopMethodInterceptor interceptor = AfterRunningAdviceAdapter.getInstants().getInterceptor(advisor);</div><div class="line">                    advisedSupport.addAopMethodInterceptor(interceptor);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TargetSource targetSource = new TargetSource();</div><div class="line">        Object object = getBean(aopBeanDefinition.getTarget());</div><div class="line">        targetSource.setTagetClass(object.getClass());</div><div class="line">        targetSource.setTagetObject(object);</div><div class="line">        advisedSupport.setTargetSource(targetSource);</div><div class="line">        return advisedSupport;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AopBeanFactoryImpl是我们产生代理对象的工厂类，继承了上一讲我们实现的 IoC 容器的BeanFactoryImpl。重写了 getBean方法，如果是一个切面代理类，我们使用Aop框架生成代理类，如果是普通的对象，我们就用原来的IoC容器进行依赖注入。<br>getAdvisedSupport就是获取 Aop 框架认识的数据结构。</p>
<p>剩下没有讲到的类都比较简单，大家看源码就行。与核心逻辑无关。</p>
<h4 id="写个方法测试一下"><a href="#写个方法测试一下" class="headerlink" title="写个方法测试一下"></a>写个方法测试一下</h4><p>我们需要统计一个方法的执行时间。面对这个需求我们怎么做？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class StartTimeBeforeMethod implements BeforeMethodAdvice&#123;</div><div class="line">    @Override</div><div class="line">    public void before(Method method, Object[] args, Object target) &#123;</div><div class="line">        long startTime = System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;开始计时&quot;);</div><div class="line">        ThreadLocalUtils.set(startTime);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class EndTimeAfterMethod implements AfterRunningAdvice &#123;</div><div class="line">    @Override</div><div class="line">    public Object after(Object returnVal, Method method, Object[] args, Object target) &#123;</div><div class="line">        long endTime = System.currentTimeMillis();</div><div class="line">        long startTime = ThreadLocalUtils.get();</div><div class="line">        ThreadLocalUtils.remove();</div><div class="line">        System.out.println(&quot;方法耗时：&quot; + (endTime - startTime) + &quot;ms&quot;);</div><div class="line">        return returnVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法开始前，记录时间，保存到 ThredLocal里面，方法结束记录时间，打印时间差。完成统计。</p>
<p>目标类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class TestService &#123;</div><div class="line">    public void testMethod() throws InterruptedException &#123;</div><div class="line">        System.out.println(&quot;this is a test method&quot;);</div><div class="line">        Thread.sleep(1000);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;beforeMethod&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.aop.test.StartTimeBeforeMethod&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;afterMethod&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.aop.test.EndTimeAfterMethod&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;testService&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.aop.test.TestService&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;testServiceProxy&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.aop.core.ProxyFactoryBean&quot;,</div><div class="line">    &quot;target&quot;:&quot;testService&quot;,</div><div class="line">    &quot;interceptorNames&quot;:[</div><div class="line">      &quot;beforeMethod&quot;,</div><div class="line">      &quot;afterMethod&quot;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MainTest &#123;</div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        AopApplictionContext aopApplictionContext = new AopApplictionContext(&quot;application.json&quot;);</div><div class="line">        aopApplictionContext.init();</div><div class="line">        TestService testService = (TestService) aopApplictionContext.getBean(&quot;testServiceProxy&quot;);</div><div class="line">        testService.testMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终我们的执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">开始计时</div><div class="line">this is a test method</div><div class="line">方法耗时：1015ms</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>至此 Aop 框架完成。</p>
<blockquote>
<p>引用 <a href="https://www.xilidou.com/2018/01/13/spring-aop/" target="_blank" rel="external">https://www.xilidou.com/2018/01/13/spring-aop/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring框架有两大特性，一个是IOC,另一个是AOP.对于Spring Aop的实现讲解的都不太透彻，大部分文章介绍了Spring Aop的底层技术使用了动态代理，至于Spring Aop的具体实现都语焉不详。这类文章看以后以后，我脑子里浮现的就是这样一个画面：&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java|徒手撸框架--实现IoC</title>
    <link href="http://yoursite.com/2018/02/10/Java-%E5%BE%92%E6%89%8B%E6%92%B8%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0IoC/"/>
    <id>http://yoursite.com/2018/02/10/Java-徒手撸框架-实现IoC/</id>
    <published>2018-02-10T14:45:42.000Z</published>
    <updated>2018-02-11T15:15:00.338Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h3><p>Spring 作为 J2ee 开发事实上的标准，是每个Java开发人员都需要了解的框架。但是Spring 的 IoC 和 Aop 的特性，对于初级的Java开发人员来说还是比较难于理解的。所以我就想写一系列的文章给大家讲解这些特性。从而能够进一步深入了解 Spring 框架。</p>
<p>读完这篇文章，你将会了解：</p>
<ul>
<li>什么是依赖注入和控制反转</li>
<li>Ioc有什么用</li>
<li>Spring的 Ioc 是怎么实现的</li>
<li>按照Spring的思路开发一个简单的Ioc框架</li>
</ul>
<h3 id="IoC-是什么？"><a href="#IoC-是什么？" class="headerlink" title="IoC 是什么？"></a>IoC 是什么？</h3><p>wiki百科的解释是：</p>
<blockquote>
<p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p>
</blockquote>
<h3 id="Ioc-有什么用？"><a href="#Ioc-有什么用？" class="headerlink" title="Ioc 有什么用？"></a>Ioc 有什么用？</h3><p>看完上面的解释你一定没有理解什么是 Ioc，因为是第一次看见上面的话也觉得云里雾里。</p>
<p>不过通过上面的描述我们可以大概的了解到，使用IoC的目的是为了解耦。也就是说IoC 是解耦的一种方法。</p>
<p>我们知道Java 是一门面向对象的语言，在 Java 中 Everything is Object，我们的程序就是由若干对象组成的。当我们的项目越来越大，合作的开发者越来越多的时候，我们的类就会越来越多，类与类之间的引用就会成指数级的增长。如下图所示：</p>
<p><img src="/images/徒手鲁框架--01.jpg" alt="徒手鲁框架--01" title="徒手鲁框架--01"></p>
<p>这样的工程简直就是灾难，如果我们引入 Ioc 框架。由框架来维护类的生命周期和类之间的引用。我们的系统就会变成这样：</p>
<p><img src="/images/徒手鲁框架--02.jpg" alt="徒手鲁框架--02" title="徒手鲁框架--02"></p>
<p>这个时候我们发现，我们类之间的关系都由 IoC 框架负责维护类，同时将类注入到需要的类中。也就是类的使用者只负责使用，而不负责维护。把专业的事情交给专业的框架来完成。大大的减少开发的复杂度。</p>
<p>用一个类比来理解这个问题。Ioc框架就是我们生活中的房屋中介，首先中介会收集市场上的房源，分别和各个房源的房东建立联系。当我们需要租房的时候，并不需要我们四处寻找各类租房信息。我们直接找房屋中介，中介就会根据你的需求提供相应的房屋信息。大大提升了租房的效率，减少了你与各类房东之间的沟通次数。</p>
<h3 id="Spring-的-IoC-是怎么实现的"><a href="#Spring-的-IoC-是怎么实现的" class="headerlink" title="Spring 的 IoC 是怎么实现的"></a>Spring 的 IoC 是怎么实现的</h3><p>了解Spring框架最直接的方法就阅读Spring的源码。但是Spring的代码抽象的层次很高，且处理的细节很高。对于大多数人来说不是太容易理解。我读了Spirng的源码以后以我的理解做一个总结,Spirng IoC 主要是以下几个步骤。</p>
<ul>
<li><ol>
<li>初始化 IoC 容器。</li>
</ol>
</li>
<li><ol>
<li>读取配置文件。</li>
</ol>
</li>
<li><ol>
<li>将配置文件转换为容器识别对的数据结构（这个数据结构在Spring中叫做 BeanDefinition</li>
</ol>
</li>
<li><ol>
<li>利用数据结构依次实例化相应的对象</li>
</ol>
</li>
<li><ol>
<li>注入对象之间的依赖关系</li>
</ol>
</li>
</ul>
<h3 id="自己实现一个IoC框架"><a href="#自己实现一个IoC框架" class="headerlink" title="自己实现一个IoC框架"></a>自己实现一个IoC框架</h3><p>为了方便，我们参考Spirng的IoC实现，去除所有与核心原理无关的逻辑。极简的实现 IoC 的框架。 项目使用 json 作为配置文件。使用 maven 管理 jar 包的依赖。</p>
<p>在这个框架中我们的对象都是单例的，并不支持Spirng的多种作用域。框架的实现使用了cglib和Java的反射。项目中我还使用了lombok用来简化代码。</p>
<p>下面我们就来编写 IoC 框架吧。</p>
<p>首先我们看看这个框架的基本结构：</p>
<p><img src="/images/徒手鲁框架--03.jpg" alt="徒手鲁框架--03" title="徒手鲁框架--03"></p>
<p>从宏观上观察一下这个框架，包含了2个package、在包 bean 中定义了我们框架的数据结构。core 是我们框架的核心逻辑所在。utils 是一些通用工具类。接下来我们就逐一讲解一下：</p>
<h4 id="1-bean-定义了框架的数据结构"><a href="#1-bean-定义了框架的数据结构" class="headerlink" title="1. bean 定义了框架的数据结构"></a>1. bean 定义了框架的数据结构</h4><p>BeanDefinition 是我们项目的核心数据结构。用于描述我们需要 IoC 框架管理的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Data</div><div class="line">@ToString</div><div class="line">public class BeanDefinition &#123;</div><div class="line"></div><div class="line">    private String name;</div><div class="line"></div><div class="line">    private String className;</div><div class="line"></div><div class="line">    private String interfaceName;</div><div class="line"></div><div class="line">    private List&lt;ConstructorArg&gt; constructorArgs;</div><div class="line"></div><div class="line">    private List&lt;PropertyArg&gt; propertyArgs;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>包含了对象的 name，class的名称。如果是接口的实现，还有该对象实现的接口。以及构造函数的传参的列表 constructorArgs 和需要注入的参数列表 propertyArgList。</p>
<h4 id="2-再看看我们的工具类包里面的对象："><a href="#2-再看看我们的工具类包里面的对象：" class="headerlink" title="2. 再看看我们的工具类包里面的对象："></a>2. 再看看我们的工具类包里面的对象：</h4><p>ClassUtils 负责处理 Java 类的加载,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class ClassUtils &#123;</div><div class="line">    public static ClassLoader getDefultClassLoader()&#123;</div><div class="line">        return Thread.currentThread().getContextClassLoader();</div><div class="line">    &#125;</div><div class="line">    public static Class loadClass(String className)&#123;</div><div class="line">        try &#123;</div><div class="line">            return getDefultClassLoader().loadClass(className);</div><div class="line">        &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们只写了一个方法，就是通过 className 这个参数获取对象的 Class。</p>
<p>BeanUtils 负责处理对象的实例化，这里我们使用了 cglib 这个工具包，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class BeanUtils &#123;</div><div class="line">    public static &lt;T&gt; T instanceByCglib(Class&lt;T&gt; clz,Constructor ctr,Object[] args) &#123;</div><div class="line">        Enhancer enhancer = new Enhancer();</div><div class="line">        enhancer.setSuperclass(clz);</div><div class="line">        enhancer.setCallback(NoOp.INSTANCE);</div><div class="line">        if(ctr == null)&#123;</div><div class="line">            return (T) enhancer.create();</div><div class="line">        &#125;else &#123;</div><div class="line">            return (T) enhancer.create(ctr.getParameterTypes(),args);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ReflectionUtils 主要通过 Java 的反射原理来完成对象的依赖注入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ReflectionUtils &#123;</div><div class="line"></div><div class="line">    public static void injectField(Field field,Object obj,Object value) throws IllegalAccessException &#123;</div><div class="line">        if(field != null) &#123;</div><div class="line">            field.setAccessible(true);</div><div class="line">            field.set(obj, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>injectField(Field field,Object obj,Object value) 这个方法的作用就是，设置 obj 的 field 为 value。</p>
<p>JsonUtils 的作用就是为了解析我们的json配置文件。代码比较长，与我们的 IoC 原理关系不大，感兴趣的同学可以自行从github上下载代码看看。</p>
<p>有了这几个趁手的工具，我们就可以开始完成 Ioc 框架的核心代码了。</p>
<h4 id="3-核心逻辑"><a href="#3-核心逻辑" class="headerlink" title="3. 核心逻辑"></a>3. 核心逻辑</h4><p>我的 IoC 框架，目前只支持一种 ByName 的注入。所以我们的 BeanFactory 就只有一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface BeanFactory &#123;</div><div class="line">    Object getBean(String name) throws Exception;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们实现了这个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">public class BeanFactoryImpl implements BeanFactory&#123;</div><div class="line"></div><div class="line">    private static final ConcurrentHashMap&lt;String,Object&gt; beanMap = new ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    private static final ConcurrentHashMap&lt;String,BeanDefinition&gt; beanDefineMap= new ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    private static final Set&lt;String&gt; beanNameSet = Collections.synchronizedSet(new HashSet&lt;&gt;());</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getBean(String name) throws Exception &#123;</div><div class="line">        //查找对象是否已经实例化过</div><div class="line">        Object bean = beanMap.get(name);</div><div class="line">        if(bean != null)&#123;</div><div class="line">            return bean;</div><div class="line">        &#125;</div><div class="line">        //如果没有实例化，那就需要调用createBean来创建对象</div><div class="line">        bean =  createBean(beanDefineMap.get(name));</div><div class="line">        </div><div class="line">        if(bean != null) &#123;</div><div class="line"></div><div class="line">            //对象创建成功以后，注入对象需要的参数</div><div class="line">            populatebean(bean);</div><div class="line">            </div><div class="line">            //再吧对象存入Map中方便下次使用。</div><div class="line">            beanMap.put(name,bean;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //结束返回</div><div class="line">        return bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void registerBean(String name, BeanDefinition bd)&#123;</div><div class="line">        beanDefineMap.put(name,bd);</div><div class="line">        beanNameSet.add(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Object createBean(BeanDefinition beanDefinition) throws Exception &#123;</div><div class="line">        String beanName = beanDefinition.getClassName();</div><div class="line">        Class clz = ClassUtils.loadClass(beanName);</div><div class="line">        if(clz == null) &#123;</div><div class="line">            throw new Exception(&quot;can not find bean by beanName&quot;);</div><div class="line">        &#125;</div><div class="line">        List&lt;ConstructorArg&gt; constructorArgs = beanDefinition.getConstructorArgs();</div><div class="line">        if(constructorArgs != null &amp;&amp; !constructorArgs.isEmpty())&#123;</div><div class="line">            List&lt;Object&gt; objects = new ArrayList&lt;&gt;();</div><div class="line">            for (ConstructorArg constructorArg : constructorArgs) &#123;</div><div class="line">                objects.add(getBean(constructorArg.getRef()));</div><div class="line">            &#125;</div><div class="line">            return BeanUtils.instanceByCglib(clz,clz.getConstructor(),objects.toArray());</div><div class="line">        &#125;else &#123;</div><div class="line">            return BeanUtils.instanceByCglib(clz,null,null);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void populatebean(Object bean) throws Exception &#123;</div><div class="line">        Field[] fields = bean.getClass().getSuperclass().getDeclaredFields();</div><div class="line">        if (fields != null &amp;&amp; fields.length &gt; 0) &#123;</div><div class="line">            for (Field field : fields) &#123;</div><div class="line">                String beanName = field.getName();</div><div class="line">                beanName = StringUtils.uncapitalize(beanName);</div><div class="line">                if (beanNameSet.contains(field.getName())) &#123;</div><div class="line">                    Object fieldBean = getBean(beanName);</div><div class="line">                    if (fieldBean != null) &#123;</div><div class="line">                        ReflectionUtils.injectField(field,bean,fieldBean);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先我们看到在 BeanFactory 的实现中。我们有两 HashMap，beanMap 和 beanDefineMap。 beanDefineMap 存储的是对象的名称和对象对应的数据结构的映射。</p>
<p>容器初始化的时候，会调用 BeanFactoryImpl.registerBean 方法。把 对象的 BeanDefination 数据结构，存储起来。</p>
<p>当我们调用 getBean() 的方法的时候。会先到 beanMap 里面查找，有没有实例化好的对象。如果没有，就会qubeanDefineMap查找这个对象对应的 BeanDefination。再利用DeanDefination去实例化一个对象。</p>
<p>对象实例化成功以后，我们还需要注入相应的参数，调用 populatebean()这个方法。在 populateBean 这个方法中，会扫描对象里面的Field，如果对象中的 Field 是我们IoC容器管理的对象，那就会调用 我们上文实现的 ReflectionUtils.injectField来注入对象。</p>
<p>一切准备妥当之后，我们对象就完成了整个 IoC 流程。最后这个对象放入 beanMap 中,方便下一次使用。</p>
<p>所以我们可以知道 BeanFactory 是管理和生成对象的地方。</p>
<h4 id="4-容器"><a href="#4-容器" class="headerlink" title="4. 容器"></a>4. 容器</h4><p>我们所谓的容器，就是对BeanFactory的扩展，负责管理 BeanFactory。我们的这个IoC 框架使用 Json 作为配置文件，所以我们容器就命名为 JsonApplicationContext。当然之后你愿意实现 XML 作为配置文件的容器你就可以自己写一个 XmlApplicationContext，如果基于注解的容器就可以叫AnnotationApplcationContext。这些实现留个大家去完成。</p>
<p>我们看看 ApplicationContext 的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class JsonApplicationContext extends BeanFactoryImpl&#123;</div><div class="line">    private String fileName;</div><div class="line">    public JsonApplicationContext(String fileName) &#123;</div><div class="line">        this.fileName = fileName;</div><div class="line">    &#125;</div><div class="line">    public void init()&#123;</div><div class="line">        loadFile();</div><div class="line">    &#125;</div><div class="line">    private void loadFile()&#123;</div><div class="line">        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);</div><div class="line">        List&lt;BeanDefinition&gt; beanDefinitions = JsonUtils.readValue(is,new TypeReference&lt;List&lt;BeanDefinition&gt;&gt;()&#123;&#125;);</div><div class="line">        if(beanDefinitions != null &amp;&amp; !beanDefinitions.isEmpty()) &#123;</div><div class="line">            for (BeanDefinition beanDefinition : beanDefinitions) &#123;</div><div class="line">                registerBean(beanDefinition.getName(), beanDefinition);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个容器的作用就是 读取配置文件。将配置文件转换为容器能够理解的 BeanDefination。然后使用 registerBean 方法。注册这个对象。</p>
<p>至此，一个简单版的 IoC 框架就完成。</p>
<h4 id="5-框架的使用"><a href="#5-框架的使用" class="headerlink" title="5. 框架的使用"></a>5. 框架的使用</h4><p>我们写一个测试类来看看我们这个框架怎么使用：</p>
<p>首先我们有三个对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Hand &#123;</div><div class="line">    public void waveHand()&#123;</div><div class="line">        System.out.println(&quot;挥一挥手&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Mouth &#123;</div><div class="line">    public void speak()&#123;</div><div class="line">        System.out.println(&quot;say hello world&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Robot &#123;</div><div class="line">    //需要注入 hand 和 mouth </div><div class="line">    private Hand hand;</div><div class="line">    private Mouth mouth;</div><div class="line"></div><div class="line">    public void show()&#123;</div><div class="line">        hand.waveHand();</div><div class="line">        mouth.speak();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们需要为我们的 Robot 机器人注入 hand 和 mouth。</p>
<p>配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;robot&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.ioc.entity.Robot&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;hand&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.ioc.entity.Hand&quot;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    &quot;name&quot;:&quot;mouth&quot;,</div><div class="line">    &quot;className&quot;:&quot;com.xilidou.framework.ioc.entity.Mouth&quot;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>这个时候写一个测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        JsonApplicationContext applicationContext = new JsonApplicationContext(&quot;application.json&quot;);</div><div class="line">        applicationContext.init();</div><div class="line">        Robot aiRobot = (Robot) applicationContext.getBean(&quot;robot&quot;);</div><div class="line">        aiRobot.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行以后输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">挥一挥手</div><div class="line">say hello world</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>可以看到我们成功的给我的 aiRobot 注入了 hand 和 mouth。</p>
<p>至此我们 Ioc 框架开发完成。</p>
<blockquote>
<p>引用<a href="https://www.xilidou.com/2018/01/08/spring-ioc/" target="_blank" rel="external">https://www.xilidou.com/2018/01/08/spring-ioc/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在开头&quot;&gt;&lt;a href=&quot;#写在开头&quot; class=&quot;headerlink&quot; title=&quot;写在开头&quot;&gt;&lt;/a&gt;写在开头&lt;/h3&gt;&lt;p&gt;Spring 作为 J2ee 开发事实上的标准，是每个Java开发人员都需要了解的框架。但是Spring 的 IoC 和 A
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PHP|正则表达式</title>
    <link href="http://yoursite.com/2018/02/10/PHP-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/02/10/PHP-正则表达式/</id>
    <published>2018-02-10T09:46:44.000Z</published>
    <updated>2018-02-10T02:42:20.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（基础篇）正则表达式的语法汇总与详细介绍"><a href="#（基础篇）正则表达式的语法汇总与详细介绍" class="headerlink" title="（基础篇）正则表达式的语法汇总与详细介绍"></a>（基础篇）正则表达式的语法汇总与详细介绍</h3><p>正则表达式是个好东西啊，可以让我们在一堆数据中找到我们需要的数据，这一点在爬虫中能很好的体现，还有就是能帮助我们检查数据。用好正则表达式往往会起到事半功倍的效果，以下是对PHP正则表达式的语法汇总和详细介绍。</p>
<p>首先，让我们看看两个特别的字符：<strong>‘^’ 和 ‘$’</strong> 他们是分别用来匹配字符串的开始和结束，一下分别举例说明</p>
<ul>
<li>“^The”: 匹配以 “The”开头的字符串;</li>
<li>“of despair$”: 匹配以 “of despair” 结尾的字符串;</li>
<li>“^abc$”: 匹配以abc开头和以abc结尾的字符串，实际上是只有abc与之匹配</li>
<li>“notice”: 匹配包含notice的字符串</li>
</ul>
<p>你可以看见如果你没有用我们提到的两个字符（最后一个例子），就是说 模式（正则表达式） 可以出现在被检验字符串的任何地方，你没有把他锁定到两边</p>
<p><strong>这里还有几个字符 ‘*’, ‘+’,和 ‘?’,</strong></p>
<p>他们用来表示一个字符可以出现的次数或者顺序. 他们分别表示：”zero or more”, “one or more”, and “zero or one.” 这里是一些例子:</p>
<ul>
<li>“ab*”: 匹配字符串a和0个或者更多b组成的字符串(“a”, “ab”, “abbb”, etc.);</li>
<li>“ab+”: 和上面一样，但最少有一个b (“ab”, “abbb”, etc.);</li>
<li>“ab?”:匹配0个或者一个b;</li>
<li>“a?b+$”: 匹配以一个或者0个a再加上一个以上的b结尾的字符串.</li>
</ul>
<p><strong>你也可以在大括号里面限制字符出现的个数，比如</strong></p>
<ul>
<li>“ab{2}”: 匹配一个a后面跟两个b（一个也不能少）(“abb”);</li>
<li>“ab{2,}”: 最少更两个b(“abb”, “abbbb”, etc.);</li>
<li>“ab{3,5}”: 3－5个b(“abbb”, “abbbb”, or “abbbbb”).</li>
</ul>
<p>你还要注意到你必须总是指定 (i.e, “{0,2}”, not “{,2}”.同样，你必须注意到, ‘*’, ‘+’, 和’?’ 分别和一下三个范围标注是一样的，”{0,}”, “{1,}”, 和 “{0,1}”。</p>
<p><strong>现在把一定数量的字符放到小括号里，比如:</strong></p>
<ul>
<li>“a(bc)*”: 匹配 a 后面跟0个或者一个”bc”;</li>
<li>“a(bc){1,5}”: 一个到5个 “bc.”</li>
</ul>
<p><strong>还有一个字符 ‘│’, 相当于OR 操作:</strong></p>
<ul>
<li>“hi│hello”: 匹配含有”hi” 或者 “hello” 的 字符串;</li>
<li>“(b│cd)ef”: 匹配含有 “bef” 或者 “cdef”的字符串;</li>
<li>“(a│b)*c”: 匹配含有这样 - 多个（包括0个）a或b，后面跟一个c</li>
</ul>
<p>的字符串 的字符串;</p>
<p><strong>一个点(‘.’)可以代表所有的 单一字符:</strong></p>
<ul>
<li>“a.[0-9]”: 一个a跟一个字符再跟一个数字的 （含有这样一个字符串的字符串将被匹配，以后省略此括号）</li>
<li>“^.{3}$”: 以三个字符结尾 .</li>
</ul>
<p><strong>中括号括住的内容只匹配一个 单一的字符</strong></p>
<ul>
<li>“[ab]”: 匹配单个的 a 或者 b ( 和 “a│b” 一样);</li>
<li>“[a-d]”: 匹配’a’ 到’d’的单个字符 (和”a│b│c│d” 还有 “[abcd]”效果一样);</li>
<li>“^[a-zA-Z]”: 匹配以字母开头的字符串</li>
<li>“[0-9]%”: 匹配含有 形如 x％ 的字符串</li>
<li>“,[a-zA-Z0-9]$”: 匹配以逗号在加一个数字或字母结尾的字符串</li>
</ul>
<p>你也可以把你不想要得字符列在中括号里，你只需要在总括号里面使用’^’ 作为开头 (i.e., “%[^a-zA-Z]%” 匹配含有 两个百分号里面有一个非字母 的字符串).</p>
<p>为了能够解释，但”^.[$()│*+?{/“作为有特殊意义的字符的时候，你必须在这些字符面前加’’, 还有在php3中你应该避免在模式的最前面使用/, 比如说,正则表达式 “(/$│?[0-9]+” 应该这样调用 ereg(“(//$│?[0-9]+”, $str) (不知道php4是不是一样)</p>
<p>不要忘记在中括号里面的字符是这条规路的例外—在中括号里面, 所有的特殊字符，包括(‘’), 都将失去他们的特殊性质(i.e., “[*/+?{}.]”匹配含有这些字符的字符串). 还有,正如regx的手册告诉我们: “如果列表里含有 ‘]’, 最好把它作为列表里的第一个字符(可能跟在’^’后面). 如果含有’-‘, 最好把它放在最前面或者最后面, or 或者一个范围的第二个结束点(i.e. [a-d-0-9]中间的‘-‘将有效.</p>
<p>为了完整, 我应该涉及到 collating sequences, character classes, 同埋 equivalence classes. 但我在这些方面不想讲的太详细, 这些在下面的文章仲都不需要涉及到. 你们可以在regex man pages 那里得到更多消息.</p>
<h3 id="如何构建一个模式来匹配-货币数量-的输入"><a href="#如何构建一个模式来匹配-货币数量-的输入" class="headerlink" title="如何构建一个模式来匹配 货币数量 的输入"></a>如何构建一个模式来匹配 货币数量 的输入</h3><p>好了，现在我们要用我们所学的来干一些有用的事：构建一个匹配模式去检查输入的信息是否为一个表示money的数字。我们认为一个表示money的数量有四种方式： “10000.00” 和 “10,000.00”,或者没有小数部分, “10000” and “10,000”. 现在让我们开始构建这个匹配模式:</p>
<p>^[1-9][0-9]*$</p>
<p>这是所变量必须以非0的数字开头.但这也意味着 单一的 “0” 也不能通过测试. 以下是解决的方法:</p>
<p>^(0│[1-9][0-9]*)$</p>
<p>“只有0和不以0开头的数字与之匹配”，我们也可以允许一个负号再数字之前:</p>
<p>^(0│-?[1-9][0-9]*)$</p>
<p>这就是: “0 或者 一个以0开头可能有一个负号在前面的数字.” 好了, 好了现在让我们别那么严谨，允许以0开头.现在让我们放弃负号, 因为我们在表示钱币的时候并不需要用到. 我们现在指定模式 用来匹配小数部分:</p>
<p>^[0-9]+(/.[0-9]+)?$</p>
<p>这暗示匹配的字符串必须最少以一个阿拉伯数字开头. 但是注意，在上面模式中 “10.” 是不匹配的, 只有 “10” 和 “10.2” 才可以. （你知道为什么吗）</p>
<p>^[0-9]+(/.[0-9]{2})?$</p>
<p>我们上面指定小数点后面必须有两位小数.如果你认为这样太苛刻,你可以改成:</p>
<p>^[0-9]+(/.[0-9]{1,2})?$</p>
<p>这将允许小数点后面有一到两个字符. 现在我们加上用来增加可读性的逗号（每隔三位）, 我们可以这样表示:</p>
<p>^[0-9]{1,3}(,[0-9]{3})*(/.[0-9]{1,2})?$</p>
<p>不要忘记加号 ‘+’ 可以被乘号 ‘*’ 替代如果你想允许空白字符串被输入话 (为什么?). 也不要忘记反斜杆 ‘/‘ 在php字符串中可能会出现错误 (很普遍的错误). 现在，我们已经可以确认字符串了, 我们现在把所有逗号都去掉 str_replace(“,”, “”, $money) 然后在把类型看成 double然后我们就可以通过他做数学计算了.</p>
<h3 id="构造检查email的正则表达式"><a href="#构造检查email的正则表达式" class="headerlink" title="构造检查email的正则表达式"></a>构造检查email的正则表达式</h3><p>好,让我们继续讨论怎么验证一个email地址. 在一个完整的email地址中有三个部分: POP3 用户名 (在 ‘@’ 左边的一切), ‘@’, 服务器名(就是剩下那部分). 用户名可以含有大小写字母阿拉伯数字,句号 (‘.’), 减号(‘-‘), and 下划线 (‘_’). 服务器名字也是符合这个规则,当然下划线除外.</p>
<p>现在, 用户名的开始和结束都不能是句点. 服务器也是这样. 还有你不能有两个连续的句点他们之间至少存在一个字符，好现在我们来看一下怎么为用户名写一个匹配模式:</p>
<p>^[_a-zA-Z0-9-]+$</p>
<p>现在还不能允许句号的存在. 我们把它加上:</p>
<p>^[_a-zA-Z0-9-]+(/.[_a-zA-Z0-9-]+)*$</p>
<p>上面的意思就是说: “以至少一个规范字符（除.外）开头,后面跟着0个或者多个以点开始的字符串.”</p>
<p>简单化一点, 我们可以用 eregi()取代 ereg().eregi()对大小写不敏感, 我们就不需要指定两个范围 “a-z” 和 “A-Z” – 只需要指定一个就可以了:</p>
<p>^[_a-z0-9-]+(/.[_a-z0-9-]+)*$</p>
<p>后面的服务器名字也是一样,但要去掉下划线:</p>
<p>^[a-z0-9-]+(/.[a-z0-9-]+)*$</p>
<p>Done. 现在只需要用”@”把两部分连接:</p>
<p>^[_a-z0-9-]+(/.[_a-z0-9-]+)<em>@[a-z0-9-]+(/.[a-z0-9-]+)</em>$</p>
<p>这就是完整的email认证匹配模式了,只需要调用</p>
<p>eregi(‘^[_a-z0-9-]+(/.[_a-z0-9-]+)<em>@[a-z0-9-]+(/.[a-z0-9-]+)</em>$ ‘,$eamil)</p>
<p>就可以得到是否为email了</p>
<h3 id="校验是否全由数字组成"><a href="#校验是否全由数字组成" class="headerlink" title="校验是否全由数字组成"></a>校验是否全由数字组成</h3><p>/^[0-9]{1,20}$/</p>
<p>^ 表示打头的字符要匹配紧跟^后面的规则</p>
<p>$ 表示打头的字符要匹配紧靠$前面的规则</p>
<p>[ ] 中的内容是可选字符集</p>
<p>[0-9] 表示要求字符范围在0-9之间</p>
<p>{1,20}表示数字字符串长度合法为1到20，即为[0-9]中的字符出现次数的范围是1到20次。</p>
<p>/^ 和 $/成对使用应该是表示要求整个字符串完全匹配定义的规则，而不是只匹配字符串中的一个子串。</p>
<h3 id="校验登录名：只能输入5-20个以字母开头、可带数字、“-”、“-”的字串"><a href="#校验登录名：只能输入5-20个以字母开头、可带数字、“-”、“-”的字串" class="headerlink" title="校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串"></a>校验登录名：只能输入5-20个以字母开头、可带数字、“_”、“.”的字串</h3><p>/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$/</p>
<p>^[a-zA-Z]{1} 表示第一个字符要求是字母。</p>
<p>([a-zA-Z0-9]|[.<em>]){4,19} 表示从第二位开始（因为它紧跟在上个表达式后面）的一个长度为4到9位的字符串，它要求是由大小写字母、数字或者特殊字符集[.</em>]组成。</p>
<h3 id="校验用户姓名：只能输入1-30个以字母开头的字串"><a href="#校验用户姓名：只能输入1-30个以字母开头的字串" class="headerlink" title="校验用户姓名：只能输入1-30个以字母开头的字串"></a>校验用户姓名：只能输入1-30个以字母开头的字串</h3><p>/^[a-zA-Z]{1,30}$/</p>
<h3 id="校验密码：只能输入6-20个字母、数字、下划线"><a href="#校验密码：只能输入6-20个字母、数字、下划线" class="headerlink" title="校验密码：只能输入6-20个字母、数字、下划线"></a>校验密码：只能输入6-20个字母、数字、下划线</h3><p>/^(\w){6,20}$/</p>
<p>\w：用于匹配字母，数字或下划线字符</p>
<h3 id="校验普通电话、传真号码：可以“-”或数字开头，可含有“-”-和-“-”"><a href="#校验普通电话、传真号码：可以“-”或数字开头，可含有“-”-和-“-”" class="headerlink" title="校验普通电话、传真号码：可以“+”或数字开头，可含有“-” 和 “ ”"></a>校验普通电话、传真号码：可以“+”或数字开头，可含有“-” 和 “ ”</h3><p>/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/</p>
<p>\d：用于匹配从0到9的数字；</p>
<p>“?”元字符规定其前导对象必须在目标对象中连续出现零次或一次</p>
<p>可以匹配的字符串如：+123 -999 999 ； +123-999 999 ；123 999 999 ；+123 999999等</p>
<h3 id="校验URL"><a href="#校验URL" class="headerlink" title="校验URL"></a>校验URL</h3><p>/^http[s]{0,1}:\/\/.+$/ 或 /^http[s]{0,1}:\/\/.{1,n}$/ (表示url串的长度为length(“https://”) + n )</p>
<p>\ / ：表示字符“/”。</p>
<p>. 表示所有字符的集</p>
<ul>
<li>等同于{1,}，就是1到正无穷吧。</li>
</ul>
<h3 id="校验纯中文字符"><a href="#校验纯中文字符" class="headerlink" title="校验纯中文字符"></a>校验纯中文字符</h3><p>/^[\u4E00-\u9FA5]+$/</p>
<p>[\u4E00-\u9FA5] ：估计是中文字符集的范围吧</p>
<h3 id="正则表达式的其他用法"><a href="#正则表达式的其他用法" class="headerlink" title="正则表达式的其他用法"></a>正则表达式的其他用法</h3><h4 id="提取字符串"><a href="#提取字符串" class="headerlink" title="提取字符串"></a>提取字符串</h4><p>ereg() and eregi() 有一个特性是允许用户通过正则表达式去提取字符串的一部分(具体用法你可以阅读手册). 比如说,我们想从 path/URL 提取文件名 – 下面的代码就是你需要:</p>
<p>ereg(“([^///]*)$”, $pathOrUrl, $regs);</p>
<p>echo $regs[1];</p>
<h4 id="高级的代换"><a href="#高级的代换" class="headerlink" title="高级的代换"></a>高级的代换</h4><p>ereg_replace() 和 eregi_replace()也是非常有用的: 假如我们想把所有的间隔负号都替换成逗号:</p>
<p>ereg_replace(“[ /n/r/t]+”, “,”, trim($str));  </p>
<p>PHP被大量的应用于Web的后台CGI开发，通常是在用户数据数据之后得出某种结果，但是如果用户输入的数据不正确，就会出现问题，比如说某人的生日是”2月30日”！那应该怎么样来检验暑假是否正确呢？ 在PHP中加入了正则表达式的支持，让我们可以十分方便的进行数据匹配。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;（基础篇）正则表达式的语法汇总与详细介绍&quot;&gt;&lt;a href=&quot;#（基础篇）正则表达式的语法汇总与详细介绍&quot; class=&quot;headerlink&quot; title=&quot;（基础篇）正则表达式的语法汇总与详细介绍&quot;&gt;&lt;/a&gt;（基础篇）正则表达式的语法汇总与详细介绍&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP|curl爬虫入门</title>
    <link href="http://yoursite.com/2018/02/09/PHP-curl%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/02/09/PHP-curl爬虫入门/</id>
    <published>2018-02-08T19:29:59.000Z</published>
    <updated>2018-02-08T13:47:58.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-curl"><a href="#What-is-curl" class="headerlink" title="What is curl"></a>What is curl</h3><blockquote>
<p>PHP supports libcurl, a library created by Daniel Stenberg, that allows you to connect and communicate to many different types of servers with many different types of protocols. libcurl currently supports the http, https, ftp, gopher, telnet, dict, file, and ldap protocols. libcurl also supports HTTPS certificates, HTTP POST, HTTP PUT, FTP uploading (this can also be done with PHP’s ftp extension), HTTP form based upload, proxies, cookies, and user+password authentication.</p>
</blockquote>
<p>这是PHP对于curl的一个解释，简单地说就是，curl是一个库，能让你通过URL和许多不同种的服务器进行勾搭、搭讪和深入交流，并且还支持许多协议。并且人家还说了curl可以支持https认证、http post、ftp上传、代理、cookies、简单口令认证等等功能啦。</p>
<p>说了那么多其实没什么感觉吧，在应用中才有感觉，我起初也是需要在服务器端向另一个服务器发起一个POST请求才开始接触curl的，然后才有了感觉。</p>
<p>在正式讲怎么用之前啊，先提一句，你得先在你的PHP环境中安装和启用curl模块，具体方式我就不讲了，不同系统不同安装方式，可以google查一下，或者查阅PHP官方的文档，还挺简单的。</p>
<h3 id="初始牛刀"><a href="#初始牛刀" class="headerlink" title="初始牛刀"></a>初始牛刀</h3><blockquote>
<p>工具到手，先要把玩，试试顺不顺手，不然一拿来就用，把你自己的代码搞得乌烟瘴气还怎么去撩服务器呢？</p>
</blockquote>
<p>比如我们以著名的“测试网络是否连接”的网站——百度为例，来尝试下curl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    // create curl resource </div><div class="line">   $ch = curl_init(); </div><div class="line"></div><div class="line">   // set url </div><div class="line">   curl_setopt($ch, CURLOPT_URL, &quot;baidu.com&quot;); </div><div class="line"></div><div class="line">   //return the transfer as a string </div><div class="line">   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">   // $output contains the output string </div><div class="line">   $output = curl_exec($ch); </div><div class="line"></div><div class="line">    //echo output</div><div class="line">    echo $output;</div><div class="line"></div><div class="line">   // close curl resource to free up system resources </div><div class="line">   curl_close($ch);      </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>当你在本地环境浏览器打开这个php文件时，页面出现的是百度的首页，特么我刚才输入的“localhost”呢？</p>
<p>上面的代码和注释已经充分说明了这段代码在干啥。</p>
<p>$ch = curl_init()，创建了一个curl会话资源，成功返回一个句柄；<br>curl_setopt($ch, CURLOPT_URL, “baidu.com”)，设置URL，不用说；</p>
<p>上面两句可以合起来变一句$ch = curl_init(“baidu.com”)；</p>
<p>curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0)这是设置是否将响应结果存入变量，1是存入，0是直接echo出；</p>
<p>$output = curl_exec($ch)执行，然后将响应结果存入$output变量，供下面echo；</p>
<p>curl_close($ch)关闭这个curl会话资源。</p>
<p>PHP中使用curl大致就是这么一个形式，其中第二步，通过curl_setopt方法来设置参数是最复杂也是最重要的，感兴趣可以去看官方的关于可设置参数的详细参考，长地让你看得想吐，还是根据需要熟能生巧吧。</p>
<p>小结一下，php中curl用法就是：创建curl会话 -&gt; 配置参数 -&gt; 执行 -&gt; 关闭会话。</p>
<p>下面我们来看一些常用的情景，我们需要如何“打扮自己”（配置参数）才能正确“撩妹”（正确撩到服务器）。</p>
<h3 id="打个招呼——GET和POST请求以及HTTPS协议处理"><a href="#打个招呼——GET和POST请求以及HTTPS协议处理" class="headerlink" title="打个招呼——GET和POST请求以及HTTPS协议处理"></a>打个招呼——GET和POST请求以及HTTPS协议处理</h3><p>先和服务器打个招呼吧，给服务器发个Hello看她怎么回，这里最方便的方式就是向服务器发出GET请求，当然POST这种小纸条也OK咯。</p>
<h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>我们以“在某著名同性交友网站github中搜索关键词”为例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//通过curl进行GET请求的案例</div><div class="line">&lt;?php </div><div class="line">    // create curl resource </div><div class="line">   $ch = curl_init(); </div><div class="line"></div><div class="line">   // set url </div><div class="line">   curl_setopt($ch, CURLOPT_URL, &quot;https://github.com/search?q=react&quot;); </div><div class="line"></div><div class="line">   //return the transfer as a string </div><div class="line">   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">   // $output contains the output string </div><div class="line">   $output = curl_exec($ch); </div><div class="line"></div><div class="line">   //echo output</div><div class="line">   echo $output;</div><div class="line"></div><div class="line">   // close curl resource to free up system resources </div><div class="line">   curl_close($ch);      </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>好像和之前那个例子没啥差别，但这里有2个可以提的点： </p>
<ul>
<li>默认请求方式是GET，所以不需要显式指定GET方式； </li>
<li>https请求，非http请求，可能有人在各个地方看到过HTTPS请求需要加几行代码绕过SSL证书的检查等方式来成功请求到资源，但是这里好像并不需要，原因是什么？</li>
</ul>
<blockquote>
<p>The two Curl options are defined as:<br>CURLOPT_SSL_VERIFYPEER - verify the peer’s SSL certificate<br>CURLOPT_SSL_VERIFYHOST - verify the certificate’s name against host</p>
<p>They both default to true in Curl, and shouldn’t be disabled unless you’ve got a good reason. Disabling them is generally only needed if you’re sending requests to servers with invalid or self-signed certificates, which is only usually an issue in development. Any publicly-facing site should be presenting a valid certificate, and by disabling these options you’re potentially opening yourself up to security issues.</p>
</blockquote>
<p>即，除非用了非法或者自制的证书，这大多数出现在开发环境中，你才将这两行设置为false以避开ssl证书检查，否者不需要这么做，这么做是不安全的做法。</p>
<h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>那如何进行POST请求呢？为了测试，先在某个测试服务器传了一个接收POST的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//testRespond.php</div><div class="line">&lt;?php  </div><div class="line">    $phpInput=file_get_contents(&apos;php://input&apos;);</div><div class="line">    echo urldecode($phpInput);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>发送普通数据<br>然后在本地写一个请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $data=array(</div><div class="line">    &quot;name&quot; =&gt; &quot;Lei&quot;,</div><div class="line">    &quot;msg&quot; =&gt; &quot;Are you OK?&quot;</div><div class="line">    );</div><div class="line"></div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://测试服务器的IP马赛克/testRespond.php&quot;); </div><div class="line">    curl_setopt($ch, CURLOPT_POST, 1);</div><div class="line">    //The number of seconds to wait while trying to connect. Use 0 to wait indefinitely.</div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS , http_build_query($data));</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line"></div><div class="line">    echo $output;</div><div class="line"></div><div class="line">    curl_close($ch);      </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>浏览器运行结果是：</p>
<blockquote>
<p>name=Lei&amp;msg=Are you OK?</p>
</blockquote>
<p>这里我们是构造了一个数组作为POST数据传给服务器：</p>
<p>curl_setopt($ch, CURLOPT_POST, 1)表明是POST请求；</p>
<p>curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60)设置一个最长的可忍受的连接时间，秒为单位，总不能一直等下去变成木乃伊吧；</p>
<p>curl_setopt($ch, CURLOPT_POSTFIELDS , http_build_query($data))设置POST的数据域，因为这里是数组数据形式的（等会来讲json格式），所以用http_build_query处理一下。</p>
<h4 id="对于json数据呢，又怎么进行POST请求呢？"><a href="#对于json数据呢，又怎么进行POST请求呢？" class="headerlink" title="对于json数据呢，又怎么进行POST请求呢？"></a>对于json数据呢，又怎么进行POST请求呢？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $data=&apos;&#123;&quot;name&quot;:&quot;Lei&quot;,&quot;msg&quot;:&quot;Are you OK?&quot;&#125;&apos;;</div><div class="line"></div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://测试服务器的IP马赛克/testRespond.php&quot;); </div><div class="line">    curl_setopt($ch, CURLOPT_POST, 1);</div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_HTTPHEADER, array(&apos;Content-Type: application/json&apos;, &apos;Content-Length:&apos; . strlen($data)));</div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS , $data);</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line"></div><div class="line">    echo $output;</div><div class="line"></div><div class="line">    curl_close($ch);      </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>浏览器执行，显示：</p>
<blockquote>
<p>{“name”:”Lei”,”msg”:”Are you OK?”}</p>
</blockquote>
<h3 id="如何上传和下载文件"><a href="#如何上传和下载文件" class="headerlink" title="如何上传和下载文件"></a>如何上传和下载文件</h3><p>已经和服务器勾搭上了，这时候得要个照片来看一看了吧，你也得把自己的照片发上去让人看一看了，虽然两个人在一起外貌不重要，但是男俊女靓总是最棒的。</p>
<h4 id="传一张自己的照片过去表表诚意-——-POST上传文件"><a href="#传一张自己的照片过去表表诚意-——-POST上传文件" class="headerlink" title="传一张自己的照片过去表表诚意 —— POST上传文件"></a>传一张自己的照片过去表表诚意 —— POST上传文件</h4><p>同样远程服务器端我们先传好一个接收脚本,接收图片并且保存到本地，注意文件和文件夹权限问题，需要有写入权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    if($_FILES)&#123;</div><div class="line">        $filename = $_FILES[&apos;upload&apos;][&apos;name&apos;];</div><div class="line">          $tmpname = $_FILES[&apos;upload&apos;][&apos;tmp_name&apos;];</div><div class="line">          //保存图片到当前脚本所在目录</div><div class="line">          if(move_uploaded_file($tmpname,dirname(__FILE__).&apos;/&apos;.$filename))&#123;</div><div class="line">            echo (&apos;上传成功&apos;);</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>然后我们再来写我们本地服务器的php curl部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $data = array(&apos;name&apos;=&gt;&apos;boy&apos;, &quot;upload&quot;=&gt;&quot;@boy.png&quot;);</div><div class="line"></div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://远程服务器地址马赛克/testRespond.php&quot;); </div><div class="line">    curl_setopt($ch, CURLOPT_POST, 1);</div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS , $data);</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line"></div><div class="line">    echo $output;</div><div class="line"></div><div class="line">    curl_close($ch);         </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>浏览器中运行一下，什么都米有，去看一眼远程的服务器，还是什么都没有，并没有上传成功。</p>
<p>为什么会这样呢？上面的代码应该是大家搜索curl php POST图片最常见的代码，这是因为我现在用的是PHP5.6以上版本，@符号在PHP5.6之后就弃用了，PHP5.3依旧可以用，所以有些同学发现能执行啊，有些发现不能执行，大抵是因为PHP版本的不同，而且curl在这两版本中实现是不兼容的，上面是PHP5.3的实现。</p>
<p>下面来讲PHP5.6及以后的实现，：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $data = array(&apos;name&apos;=&gt;&apos;boy&apos;, &quot;upload&quot;=&gt;&quot;&quot;);</div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    $data[&apos;upload&apos;]=new CURLFile(realpath(getcwd().&apos;/boy.png&apos;));</div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://115.29.247.189/test/testRespond.php&quot;);</div><div class="line">    curl_setopt($ch, CURLOPT_POST, 1);</div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS , $data);</div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line"></div><div class="line">    echo $output;</div><div class="line"></div><div class="line">    curl_close($ch);         </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>这里引入了一个CURLFile对象进行实现，关于此的具体可查阅文档进行了解。这时候再去远程服务器目录下看看，发现有了一张图片了，而且确实是我们刚才上传的图片。</p>
<h4 id="获取远程服务器妹子的照片-——-抓取图片"><a href="#获取远程服务器妹子的照片-——-抓取图片" class="headerlink" title="获取远程服务器妹子的照片 —— 抓取图片"></a>获取远程服务器妹子的照片 —— 抓取图片</h4><p>服务器妹子也挺实诚的，看了照骗觉得我长得挺慈眉善目的，就大方得拿出了她自己的照片，但是有点害羞的是，她不愿意主动拿过来，得我们自己去取。</p>
<p>远程服务器在她自己的目录下存放了一个图片叫girl.jpg，地址是她的web服务器根目录/girl.jpg，现在我要去获取这张照片。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">    $ch = curl_init(); </div><div class="line"></div><div class="line">    $fp=fopen(&apos;./girl.jpg&apos;, &apos;w&apos;);</div><div class="line"></div><div class="line">    curl_setopt($ch, CURLOPT_URL, &quot;http://远程服务器地址马赛克/girl.jpg&quot;); </div><div class="line">    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); </div><div class="line">    curl_setopt($ch, CURLOPT_FILE, $fp); </div><div class="line"></div><div class="line">    $output = curl_exec($ch); </div><div class="line">    $info = curl_getinfo($ch);</div><div class="line"></div><div class="line">    fclose($fp);</div><div class="line"></div><div class="line">    $size = filesize(&quot;./girl.jpg&quot;);</div><div class="line">    if ($size != $info[&apos;size_download&apos;]) &#123;</div><div class="line">        echo &quot;下载的数据不完整，请重新下载&quot;;</div><div class="line">    &#125; else &#123;</div><div class="line">        echo &quot;下载数据完整&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    curl_close($ch);    </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>现在，在我们当前目录下就有了一张刚拿到的照片啦，是不是很激动呢！</p>
<p>这里值得一说的是curl_getinfo方法，这是一个获取本次请求相关信息的方法，对于调试很有帮助，要善用。</p>
<h3 id="HTTP认证怎么搞"><a href="#HTTP认证怎么搞" class="headerlink" title="HTTP认证怎么搞"></a>HTTP认证怎么搞</h3><p>这个时候呢，服务器的家长说这个我们女儿还太小，不能找对象，就将她女儿关了起来，并且上了一个密码锁，所谓的HTTP认证，服务器呢偷偷托信鸽将HTTP认证的用户名和密码给了你，要你去见她，带她私奔。</p>
<p>那么拿到了用户名和密码，我们怎么通过PHP CURL搞定HTTP认证呢？</p>
<p>PS:这里偷懒就不去搭HTTP认证去试了，直接放一段代码，我们分析下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function curl_auth($url,$user,$passwd)&#123;</div><div class="line">    $ch = curl_init();</div><div class="line">    curl_setopt_array($ch, [</div><div class="line">        CURLOPT_USERPWD =&gt; $user.&apos;:&apos;.$passwd,</div><div class="line">        CURLOPT_URL     =&gt; $url,</div><div class="line">        CURLOPT_RETURNTRANSFER =&gt; true</div><div class="line">    ]);</div><div class="line">    $result = curl_exec($ch);</div><div class="line">    curl_close($ch);</div><div class="line">    return $result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$authurl = &apos;http://要请求HTTP认证的地址&apos;;</div><div class="line"></div><div class="line">echo curl_auth($authurl,&apos;vace&apos;,&apos;passwd&apos;);</div></pre></td></tr></table></figure>
<p>这里有一个地方比较有意思： </p>
<blockquote>
<p>curl_setopt_array </p>
</blockquote>
<p>这个方法可以通过数组一次性地设置多个参数，防止有些需要多处设置的出现密密麻麻的curl_setopt方法。</p>
<h3 id="利用cookie模拟登陆"><a href="#利用cookie模拟登陆" class="headerlink" title="利用cookie模拟登陆"></a>利用cookie模拟登陆</h3><p>这时你成功见到了服务器妹子，想带她私奔，但是无奈没有盘缠走不远，服务器妹子说，她妈服务器上有金库，可以登陆上去搞一点下来。</p>
<p>首先我们先来分析一下，这个事情分两步，一是去登陆界面通过账号密码登陆，然后获取cookie，二是去利用cookie模拟登陆到信息页面获取信息，大致的框架是这样的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">  //设置post的数据  </div><div class="line">  $post = array ( </div><div class="line">    &apos;email&apos; =&gt; &apos;账户&apos;, </div><div class="line">    &apos;pwd&apos; =&gt; &apos;密码&apos;</div><div class="line">  ); </div><div class="line">  //登录地址  </div><div class="line">  $url = &quot;登陆地址&quot;;  </div><div class="line">  //设置cookie保存路径  </div><div class="line">  $cookie = dirname(__FILE__) . &apos;/cookie.txt&apos;;  </div><div class="line">  //登录后要获取信息的地址  </div><div class="line">  $url2 = &quot;登陆后要获取信息的地址&quot;;  </div><div class="line">  //模拟登录 </div><div class="line">  login_post($url, $cookie, $post);  </div><div class="line">  //获取登录页的信息  </div><div class="line">  $content = get_content($url2, $cookie);  </div><div class="line">  //删除cookie文件 </div><div class="line">  @ unlink($cookie);</div><div class="line">     </div><div class="line">  var_dump($content);    </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>然后我们思考下下面两个方法的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">login_post($url, $cookie, $post)</div><div class="line"></div><div class="line">get_content($url2, $cookie)</div><div class="line"></div><div class="line">//模拟登录  </div><div class="line">function login_post($url, $cookie, $post) &#123; </div><div class="line">    $curl = curl_init();</div><div class="line">    curl_setopt($curl, CURLOPT_URL, $url);</div><div class="line">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class="line">    curl_setopt($curl, CURLOPT_COOKIEJAR, $cookie);</div><div class="line">    curl_setopt($curl, CURLOPT_POST, 1);</div><div class="line">    curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($post));</div><div class="line">    curl_exec($curl); </div><div class="line">    curl_close($curl);</div><div class="line">&#125; </div><div class="line">//登录成功后获取数据  </div><div class="line">function get_content($url, $cookie) &#123; </div><div class="line">    $ch = curl_init(); </div><div class="line">    curl_setopt($ch, CURLOPT_URL, $url); </div><div class="line">    curl_setopt($ch, CURLOPT_HEADER, 0); </div><div class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </div><div class="line">    curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie); </div><div class="line">    $rs = curl_exec($ch); </div><div class="line">    curl_close($ch); </div><div class="line">    return $rs; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，总算是模拟登陆成功，一切顺利啦，通过php CURL“撩”服务器就是这么简单。</p>
<p>当然，CURL的能力远不止于此，本文仅希望就后端PHP开发中最常用的几种场景做一个整理和归纳。最后一句话，具体问题具体分析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-curl&quot;&gt;&lt;a href=&quot;#What-is-curl&quot; class=&quot;headerlink&quot; title=&quot;What is curl&quot;&gt;&lt;/a&gt;What is curl&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;PHP supports libc
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java|Jersey入门实践</title>
    <link href="http://yoursite.com/2018/02/03/Java-Jersey%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/02/03/Java-Jersey入门实践/</id>
    <published>2018-02-03T10:34:34.000Z</published>
    <updated>2018-02-12T01:44:39.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jersey简介"><a href="#Jersey简介" class="headerlink" title="Jersey简介"></a>Jersey简介</h3><p>Jersey是JAX-RS（JSR311）开源参考实现用于构建RESTful Web service，它包含三个部分：</p>
<ul>
<li><p>核心服务器（Core Server）：通过提供JSR 311中标准化的注释和API标准化，可以用直观的方式开发RESTful Web服务。</p>
</li>
<li><p>核心客户端(Core Client)：Jersey客户端API能够帮助开发者与RESTful服务轻松通信；</p>
</li>
<li><p>集成（Integration)：Jersey还提供可以轻松继承Spring、Guice、Apache Abdera的库。</p>
</li>
</ul>
<h3 id="来个小demo"><a href="#来个小demo" class="headerlink" title="来个小demo"></a>来个小demo</h3><p>学习技术嘛，看多少理论书籍，都不如来个小Demo学的快。在这里，我们主要介绍如何使用Jersey创建Web  Service：</p>
<p>环境：</p>
<ul>
<li>Maven 3.2.1</li>
<li>Idea</li>
<li>Java  JDK 1.8</li>
<li>Tomcat 7.0</li>
</ul>
<h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">    &lt;groupId&gt;net.jianxi.tutorials.jerseyws&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jerseyDemo&lt;/artifactId&gt;</div><div class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line">    &lt;version&gt;1.0&lt;/version&gt;</div><div class="line">    &lt;name&gt;jerseywstest Maven Webapp&lt;/name&gt;</div><div class="line">    &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;!--jersey--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jersey-container-servlet-core&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;2.0&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!--JAXB API--&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;javax.xml.ws&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jaxws-api&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;2.1&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">        &lt;!-- Json支持 --&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jackson-core-asl&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.9.12&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.9.12&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;jackson-jaxrs&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.9.12&lt;/version&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line"></div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<p>在pom.xml中，我们引入了Jersey的依赖包，同时也引入了Json的依赖包，因为在这里主要用Json的格式来传输数据。</p>
<h4 id="写一个Model"><a href="#写一个Model" class="headerlink" title="写一个Model"></a>写一个Model</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    </div><div class="line">    String id;</div><div class="line">    </div><div class="line">    String name;</div><div class="line">   </div><div class="line">    String school;</div><div class="line"></div><div class="line">    public String getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(String id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSchool() &#123;</div><div class="line">        return school;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSchool(String school) &#123;</div><div class="line">        this.school = school;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写过Java应用的，都知道这个类是干嘛的，在这里就不多说了。</p>
<h4 id="创建服务UserService"><a href="#创建服务UserService" class="headerlink" title="创建服务UserService"></a>创建服务UserService</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Path(&quot;User&quot;)</div><div class="line">public class UserService &#123;</div><div class="line"></div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public User getUser()&#123;</div><div class="line">        User u = new User();</div><div class="line">        u.setId(&quot;1234556&quot;);</div><div class="line">        u.setName(&quot;小智e&quot;);</div><div class="line">        u.setSchool(&quot;湖南大学&quot;);</div><div class="line"></div><div class="line">        return u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @POST</div><div class="line">    @Produces(&#123; MediaType.APPLICATION_JSON + &quot;;charset=UTF-8&quot; &#125;)</div><div class="line">    public User addUser(@BeanParam User user) &#123;</div><div class="line">        return user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码稍后讲解。</p>
<h4 id="写APIApplication"><a href="#写APIApplication" class="headerlink" title="写APIApplication"></a>写APIApplication</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class APIApplication extends ResourceConfig &#123;</div><div class="line">    public APIApplication() &#123;</div><div class="line"></div><div class="line">        //资源包|提供服务的包   即UserServce所在的包名</div><div class="line">        packages(true, &quot;jersey.rest&quot;);</div><div class="line"></div><div class="line">        //注册数据转换器</div><div class="line">        register(JacksonJsonProvider.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最后一步-写web-xml"><a href="#最后一步-写web-xml" class="headerlink" title="最后一步 写web.xml"></a>最后一步 写web.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</div><div class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</div><div class="line">         version=&quot;3.1&quot;&gt;</div><div class="line">    &lt;welcome-file-list&gt;</div><div class="line">        &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;</div><div class="line">        &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;</div><div class="line">    &lt;/welcome-file-list&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;JerseyServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;jersey.rest.APIApplication&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line"></div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;JerseyServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><p>测试get方法</p>
<p><img src="/images/Jersey-get.png" alt="用postman测试" title="Jersey-get"></p>
<p>测试post方法</p>
<p><img src="/images/Jsersey-Post.png" alt="用postman测试" title="Jsersey-Post"></p>
<p>这里需要注意的是，我们用的是@BeanParam的注解来注入参数，User模板类要改成这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    @FormParam(&quot;id&quot;)</div><div class="line">    String id;</div><div class="line">    @FormParam(&quot;name&quot;)</div><div class="line">    String name;</div><div class="line">    @FormParam(&quot;school&quot;)</div><div class="line">    String school;</div><div class="line"></div><div class="line">    public String getId() &#123;</div><div class="line">        return id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setId(String id) &#123;</div><div class="line">        this.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSchool() &#123;</div><div class="line">        return school;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSchool(String school) &#123;</div><div class="line">        this.school = school;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同时，发送过来的数据格式应该是 x-www-form-urlencoded 的格式。至于为什么要用@BeanParam 来接收前端数据，个人觉得这样挺方便，映射成了Java世界里的对象，更好更方便地处理数据。</p>
<p>现在回过头来看 UserService,就不难理解了。@Path(“User”)指的是路径，@GET、@POST指的是方法，(对于HTTP动词，可查看相关资料)。@Produces(MediaType.APPLICATION_JSON) 表示的是返回的数据格式。更多注解方式可查看官方文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Path(&quot;User&quot;)</div><div class="line">public class UserService &#123;</div><div class="line"></div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public User getUser()&#123;</div><div class="line">        User u = new User();</div><div class="line">        u.setId(&quot;1234556&quot;);</div><div class="line">        u.setName(&quot;小智e&quot;);</div><div class="line">        u.setSchool(&quot;湖南大学&quot;);</div><div class="line"></div><div class="line">        return u;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @POST</div><div class="line">    @Produces(&#123; MediaType.APPLICATION_JSON + &quot;;charset=UTF-8&quot; &#125;)</div><div class="line">    public User addUser(@BeanParam User user) &#123;</div><div class="line">        return user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，入门教程就结束了。</p>
<h4 id="加入Hibernate处理数据层"><a href="#加入Hibernate处理数据层" class="headerlink" title="加入Hibernate处理数据层"></a>加入Hibernate处理数据层</h4><p>需要加入的依赖包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!-- MySQL database driver --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.1.9&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;!-- hibernate 4.3.0 start --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.3.0.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate.javax.persistence&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-jpa-2.0-api&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.0.1.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-ehcache&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.3.0.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.1.0.Alpha1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.hibernate.common&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.0.4.Final&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!-- hibernate 4.3.0 end --&gt;</div></pre></td></tr></table></figure>
<p>加入Hibernate来处理对象持久化，开发Wervice就方便多了。</p>
<h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>在Stock的服务中，我们需要StockDao来进行数据库操作，那怎么来弄这个依赖注入呢？</p>
<ul>
<li>首先，要添加@Inject</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Path(&quot;stock&quot;)</div><div class="line">public class StockService &#123;</div><div class="line">    @Inject    //依赖注入？</div><div class="line">    private StockDao dao;</div><div class="line"></div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public List getUser()&#123;</div><div class="line">        List l = dao.getAll();</div><div class="line">        return  l;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @POST</div><div class="line">    @Produces(MediaType.APPLICATION_JSON)</div><div class="line">    public Stock saveStock(@BeanParam Stock s)&#123;</div><div class="line">        Stock stock = s;</div><div class="line">        dao.saveStock(stock);</div><div class="line">        return s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后，添加MyApplicationBinder</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class MyApplicationBinder extends AbstractBinder &#123;</div><div class="line">    @Override</div><div class="line">    protected void configure() &#123;</div><div class="line">        bind(StockDao.class).to(StockDao.class);    //依赖注入</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后，配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class APIApplication extends ResourceConfig &#123;</div><div class="line">    public APIApplication() &#123;</div><div class="line"></div><div class="line">        packages(true, &quot;jersey.rest&quot;);</div><div class="line"></div><div class="line">        //注册数据转换器</div><div class="line">        register(JacksonJsonProvider.class);</div><div class="line"></div><div class="line">        //依赖注入</div><div class="line">        register(new MyApplicationBinder());</div><div class="line"></div><div class="line">        //注册 MultiPart</div><div class="line">        register(MultiPartFeature.class);</div><div class="line"></div><div class="line">        // Logging.</div><div class="line">        register(LoggingFilter.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置Web-xml的两种方式"><a href="#配置Web-xml的两种方式" class="headerlink" title="配置Web.xml的两种方式"></a>配置Web.xml的两种方式</h3><h4 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;web-app version=&quot;2.5&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;Jersey Web Application&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;jersey.config.server.provider.packages&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;com.waylau.rest&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;Jersey Web Application&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/webapi/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<p>其中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;init-param&gt;</div><div class="line">    &lt;param-name&gt;jersey.config.server.provider.packages&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;com.waylau.rest&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div></pre></td></tr></table></figure>
<p>这段说的是，如果配置属性无需设置，要部署应用程序只包括存储在特定的包的资源和提供者，那么你可以指示 Jersey 自动扫描这些包，这样就能自动注册找到的任何资源和提供者,这样就能找到了 com.waylau.rest包下的 MyResource 资源并且注册。</p>
<h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>当需要更多的配置，上述方法显然不能满足。可以重写 Application 类。也就是上述我们在Demo里用的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.waylau.rest;</div><div class="line"></div><div class="line">import org.glassfish.jersey.server.ResourceConfig;</div><div class="line">/**</div><div class="line"> * REST 主应用</div><div class="line"> * </div><div class="line"> * @author waylau.com</div><div class="line"> * 2015年3月3日</div><div class="line"> */</div><div class="line">public class RestApplication extends ResourceConfig &#123;</div><div class="line"></div><div class="line">    public RestApplication() &#123;</div><div class="line">        //资源类所在的包路径  </div><div class="line">        packages(&quot;com.waylau.rest&quot;); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终，RestApplication 在 web.xml 配置是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;init-param&gt;</div><div class="line">    &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;com.waylau.rest.RestApplication&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div></pre></td></tr></table></figure>
<h3 id="Encoding-Format-处理编码问题"><a href="#Encoding-Format-处理编码问题" class="headerlink" title="Encoding Format 处理编码问题"></a>Encoding Format 处理编码问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private final static String CHARSET_UTF_8 = &quot;charset=utf-8&quot;;</div><div class="line"></div><div class="line">@GET</div><div class="line">@Path(&quot;pojoxml&quot;)</div><div class="line">@Produces(MediaType.APPLICATION_XML + &quot;;&quot; + CHARSET_UTF_8)</div><div class="line">public MyBean getPojoXml() &#123;</div><div class="line">    MyBean pojo = new MyBean();</div><div class="line">    pojo.setName(&quot;欢迎光临：waylau.com&quot;);</div><div class="line">    pojo.setAge(28);</div><div class="line">    return pojo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@GET</div><div class="line">@Path(&quot;pojojson&quot;)</div><div class="line">@Produces(MediaType.APPLICATION_JSON + &quot;;&quot; + CHARSET_UTF_8)</div><div class="line">public MyBean getPojoJson() &#123;</div><div class="line">    MyBean pojo = new MyBean();</div><div class="line">    pojo.setName(&quot;欢迎光临：waylau.com&quot;);</div><div class="line">    pojo.setAge(28);</div><div class="line">    return pojo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Parameter-Annotations-常用参数注解"><a href="#Parameter-Annotations-常用参数注解" class="headerlink" title="Parameter Annotations 常用参数注解"></a>Parameter Annotations 常用参数注解</h3><h4 id="PathParam"><a href="#PathParam" class="headerlink" title="@PathParam"></a>@PathParam</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@GET  </div><div class="line">@Path(&quot;&#123;username&quot;&#125;)  </div><div class="line">@Produces(MediaType.APPLICATION_JSON)  </div><div class="line">public User getUser(@PathParam(&quot;username&quot;) String userName) &#123;  </div><div class="line">    ...  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请求url:<a href="http://localhost/user/jack时，userName值为jack" target="_blank" rel="external">http://localhost/user/jack时，userName值为jack</a> </p>
<h4 id="QueryParam"><a href="#QueryParam" class="headerlink" title="@QueryParam"></a>@QueryParam</h4><p>@QueryParam 用于从请求 URL 的查询组件中提取查询参数。我们在 MyResource 里面添加下面的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@PUT</div><div class="line">@Path(&quot;pojo&quot;)</div><div class="line">@Consumes(MediaType.APPLICATION_JSON)  </div><div class="line">@Produces(MediaType.APPLICATION_JSON)</div><div class="line">public MyBean putPojo(@QueryParam(&quot;age&quot;) int age, </div><div class="line">        @QueryParam(&quot;name&quot;) String name) &#123;</div><div class="line">    MyBean pojo = new MyBean();</div><div class="line">    pojo.setName(name);</div><div class="line">    pojo.setAge(age);</div><div class="line">    return pojo;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个 PUT 方法，将会接收从URL 传递过来的参数 age,name ，而后将这些参数赋给对象 MyBean ，并且返回。<br>启动服务，在 RESTClient 里面发送 PUT 请求 <a href="http://localhost:8080/webapi/myresource/pojo?age=28&amp;name=waylau" target="_blank" rel="external">http://localhost:8080/webapi/myresource/pojo?age=28&amp;name=waylau</a> 。成功后就能接收到一个 JSON 数据对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;age&quot;: 28,</div><div class="line">   &quot;name&quot;: &quot;waylau&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="DefaultValue"><a href="#DefaultValue" class="headerlink" title="@DefaultValue"></a>@DefaultValue</h4><p>如果需要为参数设置默认值，可以使用 @DefaultValue，如：<br>我们在 MyResource 里面添加下面的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@POST</div><div class="line">@Path(&quot;pojo&quot;)</div><div class="line">@Consumes(MediaType.APPLICATION_JSON)  </div><div class="line">@Produces(MediaType.APPLICATION_JSON)</div><div class="line">public MyBean postPojoDefault(@DefaultValue(&quot;21&quot;) @QueryParam(&quot;age&quot;) int age, </div><div class="line">        @DefaultValue(&quot;www.waylau.com&quot;)@QueryParam(&quot;name&quot;) String name) &#123;</div><div class="line">    MyBean pojo = new MyBean();</div><div class="line">    pojo.setName(name);</div><div class="line">    pojo.setAge(age);</div><div class="line">    return pojo;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动服务，在 RESTClient 里面发送 POST 请求调用 <a href="http://localhost:8080/webapi/myresource/pojo" target="_blank" rel="external">http://localhost:8080/webapi/myresource/pojo</a> 接口，如果该请求包含参数，则将参数值以对象形式放回，否则，将默认值以对象形式放回<br>例如，当我们的请求是<a href="http://localhost:8080/webapi/myresource/pojo?age=26&amp;name=waylau" target="_blank" rel="external">http://localhost:8080/webapi/myresource/pojo?age=26&amp;name=waylau</a><br>则返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;age&quot;: 26,</div><div class="line">   &quot;name&quot;: &quot;waylau&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我们的请求是<a href="http://localhost:8080/webapi/myresource/pojo" target="_blank" rel="external">http://localhost:8080/webapi/myresource/pojo</a><br>则返回默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;age&quot;: 21,</div><div class="line">   &quot;name&quot;: &quot;www.waylau.com&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="FormParam"><a href="#FormParam" class="headerlink" title="@FormParam"></a>@FormParam</h4><p>@FormParam 顾名思义是处理 HTML表单请求的。要求所请求 MIME 媒体类型为 <strong>application/x-www-form-urlencoded</strong>，并且符合指定的 HTML 编码的形式，此参数提取对于 HTML 表单 POST 请求是非常有用的。比如，我们要处理一个登陆表单，处理如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@POST</div><div class="line">@Consumes(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">@Produces(MediaType.APPLICATION_JSON)</div><div class="line">public Response login(@FormParam(&quot;username&quot;) String username,</div><div class="line">        @FormParam(&quot;password&quot;) String password) &#123;</div><div class="line">    //业务逻辑省略...</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>其他的参数注解还包括</p>
<ul>
<li>@MatrixParam 从 URL 路径提取信息</li>
<li>@HeaderParam 从 HTTP 头部提取信息</li>
<li>@CookieParam从关联在 HTTP 头部的 cookies 里提取信息</li>
<li>@BeanParam 允许注入参数到一个 bean</li>
<li>@Context 一般可以用于获得一个Java类型关联请求或响应的上下文。</li>
</ul>
<h3 id="File-Upload-and-Download-文件上传、下载"><a href="#File-Upload-and-Download-文件上传、下载" class="headerlink" title="File Upload and Download 文件上传、下载"></a>File Upload and Download 文件上传、下载</h3><p>文件上传下载，是一般管理系统中经常会使用的操作。下面介绍下 REST 里面是如何实现的.</p>
<h4 id="FileResource"><a href="#FileResource" class="headerlink" title="FileResource"></a>FileResource</h4><p>我们在com.waylau.rest.resource 目录下创建 FileResource 资源类,在里面写两个路径，filepath 是文件下载路径，serverLocation 是文件上传的目录。当然 “小柳哥.txt” 这个文件是必须存在的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">private static final String filepath = &quot;D:/测试文档/小柳哥.txt&quot;;</div><div class="line">private static final String serverLocation = &quot;D:/测试文档/&quot;;</div></pre></td></tr></table></figure></p>
<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><h5 id="下载服务端"><a href="#下载服务端" class="headerlink" title="下载服务端"></a>下载服务端</h5><p>在 FileResource 资源类中添加 文件下载的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@GET</div><div class="line">@Path(&quot;download&quot;)</div><div class="line">@Consumes(MediaType.APPLICATION_JSON)</div><div class="line">@Produces(MediaType.APPLICATION_OCTET_STREAM)</div><div class="line">public Response downloadFile() &#123;</div><div class="line"></div><div class="line">    File file = new File(filepath);</div><div class="line">    if (file.isFile() &amp;&amp; file.exists()) &#123;</div><div class="line">        String mt = new MimetypesFileTypeMap().getContentType(file);</div><div class="line">        String fileName = file.getName();</div><div class="line"></div><div class="line">        return Response</div><div class="line">                .ok(file, mt)</div><div class="line">                .header(&quot;Content-disposition&quot;,</div><div class="line">                        &quot;attachment;filename=&quot; + fileName)</div><div class="line">                .header(&quot;ragma&quot;, &quot;No-cache&quot;)</div><div class="line">                .header(&quot;Cache-Control&quot;, &quot;no-cache&quot;).build();</div><div class="line"></div><div class="line">    &#125; else &#123;</div><div class="line">        return Response.status(Response.Status.NOT_FOUND)</div><div class="line">                .entity(&quot;下载失败，未找到该文件&quot;).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Produces(MediaType.APPLICATION_OCTET_STREAM) 这里就说明了，文件将会以文件流的形式返回给客户端。</p>
<h5 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h5><p>在 index.jsp 里面添加</p>
<p></p><p><a href="webapi/files/download">Download</a></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>好了，代码写完，我们启动项目测试下。在浏览器中打开localhost:8888/rest/file/download ,此时发现文件名称不见了。</p>
<p><img src="/images/jersey-file.png" alt="测试" title="jersey-file"></p>
<p>这是因为系统解析不了编码导致的。需要将文件名称编码做下转化即可：<br>//处理文件名称编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fileName = new String(fileName.getBytes(&quot;utf-8&quot;),&quot;ISO8859-1&quot;);</div></pre></td></tr></table></figure></p>
<p>再次启动测试：</p>
<p><img src="/images/jersey-file-2_1.png" alt="测试2" title="jersey-file-2"></p>
<p>OK ，下载程序写完。</p>
<h4 id="处理大数量传参下载的问题"><a href="#处理大数量传参下载的问题" class="headerlink" title="处理大数量传参下载的问题"></a>处理大数量传参下载的问题</h4><p>有时难免要传递的参数较大，GET 请求难以胜任，只能用 POST 来请求下载。<br>下面例子就是用一个隐藏的 Form 表单来传参进行文件的下载：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var exportUrl = &apos;rest/files/excel/easyui-datagird&apos;</div><div class="line">var form=$(&quot;&lt;form&gt;&quot;);//定义一个form表单</div><div class="line">form.attr(&quot;style&quot;,&quot;display:none&quot;);</div><div class="line">form.attr(&quot;target&quot;,&quot;&quot;);</div><div class="line">form.attr(&quot;method&quot;,&quot;post&quot;);</div><div class="line">form.attr(&quot;action&quot;,exportUrl);</div><div class="line">var input1=$(&quot;&lt;input&gt;&quot;);</div><div class="line">input1.attr(&quot;type&quot;,&quot;hidden&quot;);</div><div class="line">input1.attr(&quot;name&quot;,&quot;fileName&quot;);</div><div class="line">input1.attr(&quot;value&quot;,fileName);</div><div class="line">var input2=$(&quot;&lt;input&gt;&quot;);</div><div class="line">input2.attr(&quot;type&quot;,&quot;hidden&quot;);</div><div class="line">input2.attr(&quot;name&quot;,&quot;columns&quot;);</div><div class="line">input2.attr(&quot;value&quot;,JSON.stringify(columns));</div><div class="line">var input3=$(&quot;&lt;input&gt;&quot;);</div><div class="line">input3.attr(&quot;type&quot;,&quot;hidden&quot;);</div><div class="line">input3.attr(&quot;name&quot;,&quot;rowsData&quot;);</div><div class="line">input3.attr(&quot;value&quot;,JSON.stringify(rows));</div><div class="line">$(&quot;body&quot;).append(form);//将表单放置在页面中</div><div class="line">form.append(input1);</div><div class="line">form.append(input2);</div><div class="line">form.append(input3);</div><div class="line">form.submit().remove();;//表单提交并</div></pre></td></tr></table></figure>
<p>其中，input 就是用来传递参数的。input 的 name 属性是参数的名称，value 属性是参数的值。<br>服务端要做如下的处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@POST</div><div class="line">@Path(&quot;excel/easyui-datagird&quot;)</div><div class="line">@Consumes(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line">@Produces(MediaType.APPLICATION_OCTET_STREAM)</div><div class="line">public Response jsonToExcle(@FormParam(&quot;fileName&quot;) String fileName,</div><div class="line">        @FormParam(&quot;columns&quot;) String columns,</div><div class="line">        @FormParam(&quot;rowsData&quot;) String rowsData) &#123;</div><div class="line">    //这里是处理的业务逻辑代码</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>上传文件稍微要复杂，需要 multipart/form-data 请求。</p>
<p>依赖<br>添加 jersey-media-multipart 到 pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--jersey-media-multipart --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.glassfish.jersey.media&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jersey-media-multipart&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.7&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>并在 RestApplication 里面注册 MultiPart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class RestApplication extends ResourceConfig &#123;</div><div class="line"></div><div class="line">    public RestApplication() &#123;</div><div class="line">        //资源类所在的包路径  </div><div class="line">        packages(&quot;com.waylau.rest.resource&quot;);</div><div class="line"></div><div class="line">        //注册 MultiPart</div><div class="line">        register(MultiPartFeature.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="上传服务端"><a href="#上传服务端" class="headerlink" title="上传服务端"></a>上传服务端</h4><p>在 FileResource 资源类中添加 文件下载的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@POST</div><div class="line">@Path(&quot;upload&quot;)</div><div class="line">@Consumes(MediaType.MULTIPART_FORM_DATA)</div><div class="line">@Produces(&quot;application/json&quot;)</div><div class="line">public Response uploadFile(</div><div class="line">        @FormDataParam(&quot;file&quot;) InputStream fileInputStream,</div><div class="line">        @FormDataParam(&quot;file&quot;) FormDataContentDisposition contentDispositionHeader) </div><div class="line">            throws IOException &#123;</div><div class="line"></div><div class="line">    String fileName = contentDispositionHeader.getFileName();</div><div class="line"></div><div class="line">    File file = new File(serverLocation + fileName); </div><div class="line">    File parent = file.getParentFile(); </div><div class="line">    //判断目录是否存在，不在创建 </div><div class="line">    if(parent!=null&amp;&amp;!parent.exists())&#123; </div><div class="line">        parent.mkdirs(); </div><div class="line">    &#125; </div><div class="line">    file.createNewFile(); </div><div class="line"></div><div class="line">    OutputStream outpuStream = new FileOutputStream(file);</div><div class="line">    int read = 0;</div><div class="line">    byte[] bytes = new byte[1024];</div><div class="line"></div><div class="line">    while ((read = fileInputStream.read(bytes)) != -1) &#123;</div><div class="line">        outpuStream.write(bytes, 0, read);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    outpuStream.flush();</div><div class="line">    outpuStream.close();</div><div class="line"></div><div class="line">    fileInputStream.close();</div><div class="line"></div><div class="line">    return Response.status(Response.Status.OK)</div><div class="line">            .entity(&quot;Upload Success!&quot;).build();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上传客户端<br>在 index.jsp 写一个上传的 Form 表单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;h3&gt;Upload a File&lt;/h3&gt;</div><div class="line">&lt;form action=&quot;webapi/files/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">   &lt;p&gt;</div><div class="line">    Select a file : &lt;input type=&quot;file&quot; name=&quot;file&quot; size=&quot;50&quot; /&gt;</div><div class="line">   &lt;/p&gt;</div><div class="line">   &lt;input type=&quot;submit&quot; value=&quot;Upload It&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Jersey简介&quot;&gt;&lt;a href=&quot;#Jersey简介&quot; class=&quot;headerlink&quot; title=&quot;Jersey简介&quot;&gt;&lt;/a&gt;Jersey简介&lt;/h3&gt;&lt;p&gt;Jersey是JAX-RS（JSR311）开源参考实现用于构建RESTful Web ser
    
    </summary>
    
    
      <category term="Jersey" scheme="http://yoursite.com/tags/Jersey/"/>
    
  </entry>
  
  <entry>
    <title>架构|RESTful API设计</title>
    <link href="http://yoursite.com/2018/01/30/%E6%9E%B6%E6%9E%84-RESTful-API%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/01/30/架构-RESTful-API设计/</id>
    <published>2018-01-30T10:11:57.000Z</published>
    <updated>2018-02-03T03:22:17.456Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RESTful简介"><a href="#RESTful简介" class="headerlink" title="RESTful简介"></a>RESTful简介</h3><p>REST(Representation State Transfer)翻译为表达性状态转移。REST是一种架构风格。在这种架构风格中，对象被视为一种资源（resource)。表达性状态是指资源数据在某个瞬间的状态快照。资源可以有多种表述，表述状态具有描述性，包括资源数据的内容、表述格式（XML、Json…)等信息。</p>
<p>REST的资源是可寻址的，通过HTTP协议的通用动词方法（如GET、PUT、DELETE、POST），同时通过URI协议来唯一标识某一个资源公布出来的接口。</p>
<p>请求一个资源的过程可以理解为访问一个具有指定性和描述性的URI，通过HTTP协议，将资源的表述性从服务器“转移”到客户端或者相反的方向。</p>
<h3 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h3><p>对于资源的具体操作，由HTTP动词表示。</p>
<p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>
<table>
<thead>
<tr>
<th>动词</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET（SELECT）</td>
<td>从服务器取出资源（一项或多项）。</td>
</tr>
<tr>
<td>POST（CREATE）</td>
<td>在服务器新建一个资源。</td>
</tr>
<tr>
<td>PUT（UPDATE）</td>
<td>在服务器更新资源（客户端提供改变后的完整资源）。</td>
</tr>
<tr>
<td>PATCH（UPDATE）</td>
<td>在服务器更新资源（客户端提供改变的属性）。</td>
</tr>
<tr>
<td>DELETE（DELETE）</td>
<td>从服务器删除资源。</td>
</tr>
</tbody>
</table>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><ul>
<li>GET /zoos：列出所有动物园</li>
<li>POST /zoos：新建一个动物园</li>
<li>GET /zoos/ID：获取某个指定动物园的信息</li>
<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li>
<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>
<li>DELETE /zoos/ID：删除某个动物园</li>
<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>
<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>
</ul>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul>
<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（* Idempotent）。</li>
<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>
<li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li>
<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>
<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>
<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>
<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>
<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>
<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>
<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>
<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>
<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。<br>状态码的完全列表参见这里。</li>
</ul>
<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>综合上面的解释，我们总结一下什么是RESTful架构：</p>
<p>　　（1）每一个URI代表一种资源；</p>
<p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p>
<p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>
<h3 id="一些误区"><a href="#一些误区" class="headerlink" title="一些误区"></a>一些误区</h3><p>RESTful架构有一些典型的设计误区。</p>
<p>最常见的一种设计错误，就是URI包含动词。因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p>
<p>举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p>
<p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　POST /accounts/1/transfer/500/to/2</div></pre></td></tr></table></figure>
<p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　POST /transaction HTTP/1.1</div><div class="line">　　Host: 127.0.0.1</div><div class="line">　　</div><div class="line">　　from=1&amp;to=2&amp;amount=500.00</div></pre></td></tr></table></figure>
<p>另一个设计误区，就是在URI中加入版本号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　http://www.example.com/app/1.0/foo</div><div class="line"></div><div class="line">　　http://www.example.com/app/1.1/foo</div><div class="line"></div><div class="line">　　http://www.example.com/app/2.0/foo</div></pre></td></tr></table></figure>
<p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RESTful简介&quot;&gt;&lt;a href=&quot;#RESTful简介&quot; class=&quot;headerlink&quot; title=&quot;RESTful简介&quot;&gt;&lt;/a&gt;RESTful简介&lt;/h3&gt;&lt;p&gt;REST(Representation State Transfer)翻译为表达性状
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java|Restful和Jersey介绍</title>
    <link href="http://yoursite.com/2018/01/28/Java-Restful-%E5%92%8C-Jersey%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/01/28/Java-Restful-和-Jersey介绍/</id>
    <published>2018-01-27T20:38:21.000Z</published>
    <updated>2018-02-03T03:22:19.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>REST 中最重要的概念是资源（resources） ，使用全球 ID（通常使用 URI）标识。client应用程序使用 HTTP 方法（GET/ POST/ PUT/ DELETE ）操作资源或资源集。</p>
<p>RESTful Web 服务是使用 HTTP 和 REST 原理实现的 Web 服务。通常。RESTful Web 服务应该定义下面方面：Web 服务的基/根 URI。比方 <a href="http://host/" target="_blank" rel="external">http://host/</a><appcontext>/resources。支持 MIME 类型的响应数据，包含JSON/XML/ATOM等等。服务支持的操作集合（比如 POST、GET、PUT 或  DELETE)</appcontext></p>
<h3 id="REST-与-JSR（jersey"><a href="#REST-与-JSR（jersey" class="headerlink" title="REST 与 JSR（jersey)"></a>REST 与 JSR（jersey)</h3><p>JSR－311  Java API for RESTful Web Services (JAX-RS) 1.0 and 1.1</p>
<p>JAX-RS是将在JavaEE 6引起的一种新技术。 JAX-RS即Java API for RESTful Web Services。是一个Java编程语言的应用程序接口，支持依照表述性状态转移（REST）架构风格创建Web服务。</p>
<p>JAX-RS使用了Java SE5引入的Java标注来简化Web服务的client和服务端 的开发和部署。包含：</p>
<p>@Path。标注资源类或者方法的相对路径 　　<br>@GET。@PUT。@POST。@DELETE，标注方法是HTTP请求的类型。</p>
<p>　　<br>@Produces，标注返回的MIME媒体类型 　　<br>@Consumes。标注可接受请求的MIME媒体类型<br>@PathParam。@QueryParam。@HeaderParam。@CookieParam，@MatrixParam。@FormParam,分别标注方法的參数来自于HTTP请求的不同位置。比如@PathParam来自于URL的路径，@QueryParam来自于URL的查询參数，@HeaderParam来自于HTTP请求的头信息，@CookieParam来自于HTTP请求的Cookie,@FormParam来自于HTTP请求的post的form格式。</p>
<h3 id="Jersey-jar包简单介绍"><a href="#Jersey-jar包简单介绍" class="headerlink" title="Jersey jar包简单介绍"></a>Jersey jar包简单介绍</h3><p>Jersey 是 JAX-RS 的參考实现，它包括三个主要部分。</p>
<ul>
<li>核心server（CoreServer）：通过提供JSR311中标准化的凝视和API标准化，您能够用直观的方式开发 RESTful Web 服务。</li>
<li>核心client（CoreClient）：JerseyclientAPI帮助您与REST服务轻松通信</li>
<li>集成（Integration）：Jersey 还提供能够轻松集成 Spring、Guice、Apache Abdera 的库。</li>
</ul>
<h3 id="Jersey配置"><a href="#Jersey配置" class="headerlink" title="Jersey配置"></a>Jersey配置</h3><p>从 Jersey 开发包中下面的库为必须：</p>
<ul>
<li>核心服务器：jersey-core.jar。jersey-server.jar。jsr311-api.jar。asm.jar</li>
<li>核心客户端：（用于測试）jersey-client.jar</li>
<li>JAXB 支持：（在高级例子中使用）jaxb-impl.jar，jaxb-api.jar。activation.jar，stax-api.jar，wstx-asl.jar</li>
<li>JSON 支持：（在高级例子中使用）jersey-json.jar</li>
</ul>
<p>(JSON是类似于xml的一种通用。在不同project/语言/平台间传递数据的格式，其比xml更精炼更优良，差点儿全部的语言和框架已经支持了，传递过来的数据再用JSON解码就可以，就像c++struct结构体一样，直接json.xxx就可以訪问。多层的话就json.xxx.xxx)</p>
<p>您须要将全部的 REST 请求发送到 Jersey 容器 —— 在应用程序的 web.xml 文件里定义 servlet 调度程序（參见清单 1）。</p>
<p>除了声明 Jersey servlet 外，它还定义一个初始化參数，指示包括资源的 Java 包。</p>
<p>Web.xml: Xml代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;  </div><div class="line">    &lt;servlet-name&gt;Jersey REST Service&lt;/servlet-name&gt;  </div><div class="line">    &lt;servlet-class&gt;  </div><div class="line">      com.sun.jersey.spi.container.servlet.ServletContainer  </div><div class="line">    &lt;/servlet-class&gt;  </div><div class="line">    &lt;init-param&gt;  </div><div class="line">      &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;  </div><div class="line">      &lt;param-value&gt;sh.cmbchina.pension.resources&lt;/param-value&gt;  </div><div class="line">    &lt;/init-param&gt;  </div><div class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </div><div class="line">&lt;/servlet&gt;  </div><div class="line">&lt;servlet-mapping&gt;  </div><div class="line">    &lt;servlet-name&gt;Jersey REST Service&lt;/servlet-name&gt;  </div><div class="line">    &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;  </div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure></p>
<p>这样，全部在包sh.cmbchina.pension.resources以下的resource类都会被注冊为Restful url的响应处理类。</p>
<h3 id="添加Json支持"><a href="#添加Json支持" class="headerlink" title="添加Json支持"></a>添加Json支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jersey-json&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.18&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;REST 中最重要的概念是资源（resources） ，使用全球 ID（通常使用 URI）标识。client应用程序使用 HTTP 方法（G
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构|树</title>
    <link href="http://yoursite.com/2018/01/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
    <id>http://yoursite.com/2018/01/24/数据结构-树/</id>
    <published>2018-01-24T15:46:20.000Z</published>
    <updated>2018-02-04T03:26:20.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树的简介"><a href="#树的简介" class="headerlink" title="树的简介"></a>树的简介</h3><p>树是一种数据结构，它是n(n&gt;=0)个节点的有限集。n=0时称为空树。n&gt;0时，有限集的元素构成一个具有层次感的数据结构。树是一种典型的一对多的数据结构，类比我们现实生活中的公司分工结构。</p>
<p>区别于线性表一对一的元素关系，树中的节点是一对多的关系。树具有以下特点：</p>
<ul>
<li>n&gt;0时，根节点是唯一的，不可能存在多个根节点。</li>
<li>每个节点有零个至多个子节点；除了根节点外，每个节点有且仅有一个父节点。根节点没有父节点。</li>
</ul>
<p><img src="/images/树-1.png" alt="树" title="树-1"></p>
<p>树有许多相关的术语与概念，在学习树的结构之前，我们要熟悉这些概念。</p>
<table>
<thead>
<tr>
<th>概念</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>子树</td>
<td>除了根节点外，每个子节点都可以分为多个不相交的子树。</td>
</tr>
<tr>
<td>孩子与双亲</td>
<td>若一个结点有子树，那么该结点称为子树根的”双亲”，子树的根是该结点的”孩子”。</td>
</tr>
<tr>
<td>兄弟</td>
<td>具有相同双亲的节点互为兄弟，例如B与H互为兄弟。</td>
</tr>
<tr>
<td>节点的度</td>
<td>一个节点拥有子树的数目。例如A的度为2，B的度为1，C的度为3.</td>
</tr>
<tr>
<td>叶子</td>
<td>没有子树，也即是度为0的节点。</td>
</tr>
<tr>
<td>分支节点</td>
<td>除了叶子节点之外的节点，也即是度不为0的节点。</td>
</tr>
<tr>
<td>内部节点</td>
<td>除了根节点之外的分支节点。</td>
</tr>
<tr>
<td>层次</td>
<td>根节点为第一层，其余节点的层次等于其双亲节点的层次加1.</td>
</tr>
<tr>
<td>树的高度</td>
<td>也称为树的深度，树中节点的最大层次。</td>
</tr>
<tr>
<td>有序树</td>
<td>树中节点各子树之间的次序是重要的，不可以随意交换位置。</td>
</tr>
<tr>
<td>无序树</td>
<td>树种节点各子树之间的次序是不重要的。可以随意交换位置。</td>
</tr>
<tr>
<td>森林</td>
<td>0或多棵互不相交的树的集合。例如图二中的两棵树为森林。</td>
</tr>
</tbody>
</table>
<p><img src="/images/树-2.png" alt="enter description here" title="树-2"></p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>在树中，我们经常用的一般是二叉树这种特殊的树。二叉树或者为空集，或者由一个根节点和两棵互不相交的、分别称为左子树和右子树的二叉树组成。从定义可以看出一棵二叉树：</p>
<ul>
<li>二叉树是有序树，区分左子树与右子树，不可以随意交换子树位置。</li>
<li>一个节点的子树数量取值范围为0，1，2。0代表该节点是叶子节点，1代表该节点只有左子树或只有右子树，2代表该节点有左右子树。</li>
</ul>
<p>根据定义，一棵二叉树有5中基本形态：</p>
<p><img src="/images/树-3.png" alt="enter description here" title="树-3"></p>
<h4 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h4><p>所有节点都只有左子树的二叉树叫做左斜树，所有节点都只有右子树的二叉树叫做右斜树。左斜树和右子树统称为斜树。<br>斜树已经退化成线性结构，二叉树在查找上表现出来优异性能在斜树得不到体现。</p>
<p><img src="/images/树-4.png" alt="斜树" title="树-4"></p>
<h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>满二叉树要满足两个条件：</p>
<ul>
<li>所有的节点都同时具有左子树和右子树。</li>
<li>所有的叶子节点都在同一层上。</li>
</ul>
<p>在同样深度的二叉树中，满二叉树的节点数目是最多的，叶子数也是最多的。</p>
<p><img src="/images/树-5.png" alt="满二叉树" title="树-5"></p>
<h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>在一棵二叉树中，只有最下两层的度可以小于2，并且最下一层的叶子节点集中出现在靠左的若干位置上。</p>
<p>或者这样定义：对一棵具有n个节点的二叉树按层序从左到右编序，二叉树树某个节点的编序与同样位置的满二叉树节点的编序相同如果所有节点都满足这个条件，则二叉树为完全二叉树。</p>
<p>从定义可以看出： 满二叉树一定是完全二叉树；完全二叉树不一定是满二叉树。</p>
<p><img src="/images/树-6.png" alt="完全二叉树" title="树-6"></p>
<h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><p>二叉排序树也称为二叉搜索树或二叉排序树。二叉排序树的节点包含键值key。二叉排序树或者是一棵空树，否则要求：</p>
<ul>
<li>若它的左子树不为空，那么左子树上所有节点的key都小于根节点的key</li>
<li>若它的右子树不为空，那么右子树上所有节点的key都大于根节点的key</li>
<li>它的左右子树也分别为二叉排序树</li>
</ul>
<p>根据定义，二叉查找树中没有重复key的节点，为一个集合。</p>
<p><img src="/images/树-7.png" alt="二叉查找树" title="树-7"></p>
<h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><h4 id="性质一：在二叉树的第i层上至多有2-i-1-个节点-i-gt-1"><a href="#性质一：在二叉树的第i层上至多有2-i-1-个节点-i-gt-1" class="headerlink" title="性质一：在二叉树的第i层上至多有2^(i-1)个节点(i&gt;=1)"></a>性质一：在二叉树的第i层上至多有2^(i-1)个节点(i&gt;=1)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">证明：利用数学归纳法进行证明</div><div class="line"></div><div class="line">当i==1时，第1层节点数目为2^(i-1) = 2^(1-1) = 2^0 = 1。显然成立，此时二叉树只有根节点。</div><div class="line">假设i&gt;1时，第i层的节点数目为2^(i-1)。</div><div class="line">根据假设，只需证明第i+1层节点数为2^i 即可。</div><div class="line">由于二叉树每个节点最多有两个孩子，故第(i+1)层上的节点数最多是第i层的两倍。</div><div class="line">即：第i+1层上节点数最多为: 2* 2^(i-1) = 2 ^ i</div><div class="line">故假设成立，命题得证。</div></pre></td></tr></table></figure>
<h4 id="性质二：深度为k的二叉树至多有2-k-1个节点"><a href="#性质二：深度为k的二叉树至多有2-k-1个节点" class="headerlink" title="性质二：深度为k的二叉树至多有2^k-1个节点"></a>性质二：深度为k的二叉树至多有2^k-1个节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">证明：二叉树节点数最多时，每层的节点树都必须最多。</div><div class="line">根据性质一，深度为k的二叉树的节点数最多为: 2^0 + 2^1 +....+2^(k-1) = 2 ^ k -1</div></pre></td></tr></table></figure>
<h4 id="性质三：对任何一棵二叉树T，如果终端节点数为n0，度为2的节点数为n2-，那么-n0-n2-1"><a href="#性质三：对任何一棵二叉树T，如果终端节点数为n0，度为2的节点数为n2-，那么-n0-n2-1" class="headerlink" title="性质三：对任何一棵二叉树T，如果终端节点数为n0，度为2的节点数为n2 ，那么 n0 = n2 +1"></a>性质三：对任何一棵二叉树T，如果终端节点数为n0，度为2的节点数为n2 ，那么 n0 = n2 +1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">证明：二叉树节点度数最大为2，则 ： n = n0 + n1 + n2 (等式一)</div><div class="line">从孩子个数角度出发： 度为0的节点没有孩子， 度为1的节点没有1个孩子，度为2的节点有2个孩子，孩子总数为 n00 + n11 +n2 2 = n1+2n2；树的所有节点中，只有根不是任何节点的孩 子，因此有 n -1 = n1 + 2* n2 ,即 n = n1 + 2* n2 + 1. （等式二）</div><div class="line">由等式一等式而可以推出 n0 = n2 +1</div></pre></td></tr></table></figure>
<h4 id="性质四：-具有n个节点的完全二叉树的高度为至少为log2-n-1"><a href="#性质四：-具有n个节点的完全二叉树的高度为至少为log2-n-1" class="headerlink" title="性质四： 具有n个节点的完全二叉树的高度为至少为log2(n+1)"></a>性质四： 具有n个节点的完全二叉树的高度为至少为log2(n+1)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">证明：高度为h的二叉树最多有2&#123;h&#125;–1个结点。反之，对于包含n个节点的二叉树的高度至少为log2(n+1)。</div></pre></td></tr></table></figure>
<h4 id="性质五：如果对一棵有n个节点的完全二叉树的节点按层序编号（从第一层开始到最下一层，每一层从左到右编号），对任一节点i有："><a href="#性质五：如果对一棵有n个节点的完全二叉树的节点按层序编号（从第一层开始到最下一层，每一层从左到右编号），对任一节点i有：" class="headerlink" title="性质五：如果对一棵有n个节点的完全二叉树的节点按层序编号（从第一层开始到最下一层，每一层从左到右编号），对任一节点i有："></a>性质五：如果对一棵有n个节点的完全二叉树的节点按层序编号（从第一层开始到最下一层，每一层从左到右编号），对任一节点i有：</h4><ul>
<li>如果i=1 ，则节点为根节点，没有双亲。</li>
<li>如果2 <em> i &gt; n ，则节点i没有左孩子 ；否则其左孩子节点为2</em>i . （n为节点总数）</li>
<li>如果2 <em> i+1&gt;n ，则节点i没有右孩子；否则其右孩子节点为2</em>1+1</li>
</ul>
<h3 id="二叉查找树-1"><a href="#二叉查找树-1" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>二叉查找树的定义我们已经知道。要维护二叉查找树的特性，比较复杂的是删除节点操作，我们将进行重点的解析。不过我们先来看看二叉查找树的节点结构定义与类定义。</p>
<h4 id="节点结构"><a href="#节点结构" class="headerlink" title="节点结构"></a>节点结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//二叉查找树的节点结构</div><div class="line">template &lt;typename T&gt;</div><div class="line">struct BSNode</div><div class="line">&#123;</div><div class="line">    BSNode(T t)</div><div class="line">    : value(t), lchild(nullptr), rchild(nullptr)&#123;&#125;</div><div class="line"> </div><div class="line">    BSNode() = default;</div><div class="line"> </div><div class="line">    T value;</div><div class="line">    BSNode&lt;T&gt;* lchild;</div><div class="line">    BSNode&lt;T&gt;* rchild;</div><div class="line">    BSNode&lt;T&gt;* parent;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">value:节点的值，也即是上文的key，类型由模板参数决定</div><div class="line">lchild :指向节点的左孩子</div><div class="line">rchild:指向节点的右孩子</div><div class="line">parent: 指向节点的双亲</div></pre></td></tr></table></figure>
<h4 id="二叉查找树的抽象数据结构"><a href="#二叉查找树的抽象数据结构" class="headerlink" title="二叉查找树的抽象数据结构"></a>二叉查找树的抽象数据结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">//二叉查找树类</div><div class="line">template &lt;typename T&gt;</div><div class="line">class BSTree</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    BSTree();</div><div class="line">    ~BSTree();</div><div class="line"> </div><div class="line">    void preOrder();    //前序遍历二叉树</div><div class="line">    void inOrder();        //中序遍历二叉树</div><div class="line">    void postOrder();    //后序遍历二叉树</div><div class="line">    void layerOrder();    //层次遍历二叉树</div><div class="line"> </div><div class="line">    BSNode&lt;T&gt;* search_recursion(T key);        //递归地进行查找</div><div class="line">    BSNode&lt;T&gt;* search_Iterator(T key);        //迭代地进行查找</div><div class="line"> </div><div class="line">    T search_minimun(); //查找最小元素</div><div class="line">    T search_maximum(); //查找最大元素</div><div class="line"> </div><div class="line">    BSNode&lt;T&gt;* successor  (BSNode&lt;T&gt;* x);    //查找指定节点的后继节点</div><div class="line">    BSNode&lt;T&gt;* predecessor(BSNode&lt;T&gt;* x);    //查找指定节点的前驱节点</div><div class="line"> </div><div class="line">    void insert(T key);    //插入指定值节点</div><div class="line">    void remove(T key);    //删除指定值节点</div><div class="line">    void destory();        //销毁二叉树</div><div class="line">    void print();        //打印二叉树</div><div class="line"> </div><div class="line"> </div><div class="line">private:</div><div class="line">    BSNode&lt;T&gt;* root; //根节点</div><div class="line">private:</div><div class="line">    BSNode&lt;T&gt;* search(BSNode&lt;T&gt;* &amp; p, T key);</div><div class="line">    void remove(BSNode&lt;T&gt;*  p, T key);         </div><div class="line">    void preOrder(BSNode&lt;T&gt;* p);</div><div class="line">    void inOrder(BSNode&lt;T&gt;* p);</div><div class="line">    void postOrder(BSNode&lt;T&gt;* p);</div><div class="line">    T search_minimun(BSNode&lt;T&gt;* p);</div><div class="line">    T search_maximum(BSNode&lt;T&gt;* p);</div><div class="line">    void destory(BSNode&lt;T&gt;* &amp;p);       </div><div class="line"> </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里我们定义了二叉排序树的类型BSTree。它包含了：</p>
<p>BSTree的根节点root，这是唯一的数据成员操作的外部接口与内部实现接口。例如 preOrder()为提供给用户使用的接口，接口声明为public；而preOrder(AVLTreeNode* pnode)是类内部为了递归操作所使用的接口，接口声明为private。提供的其他接口都有相应的备注说明。</p>
<h4 id="插入新节点"><a href="#插入新节点" class="headerlink" title="插入新节点"></a>插入新节点</h4><p>假设我们要为数组 a[] = {10 ， 5 ， 15 ， 6 ， 4 ， 16 }构建一个二叉排序树，我们按顺序逐个插入元素。</p>
<p><img src="/images/树-8.png" alt="插入新节点" title="树-8"></p>
<p>插入过程是这样的：</p>
<ul>
<li>如果是空树，则创建一个新节点，新节点作为根，因此以元素10构建的* 节点为该二叉查找树的根。</li>
<li>插入5，5比10小，与10的左孩子节点进行比较，10的左孩子节点为空，进行插入。</li>
<li>插入15，15比10大，与10的右孩子节点进行比较，10的右孩子节点为空，进行插入。</li>
<li>插入6，6比10小，与10的左孩子节点5比较；6比5大，与5的右孩子节点进行比较，5的右孩子为空，进行插入。</li>
<li>插入4，4比10小，与10的左孩子节点5比较；4比5小，与5的左孩子节点进行比较，5的左孩子为空，进行插入。</li>
<li>插入16，16比10大，与10的右孩子节点15比较；16比15大，与15的右孩子节点进行比较，15的右孩子为空，进行插入。</li>
</ul>
<p>从这个过程我们可以总结出插入新元素的步骤：</p>
<p>寻找元素合适的插入位置：新元素与当前结点进行比较，若值大于当前结点，则从右子树进行寻找；否则从左子树进行寻找.<br>找到插入位置之后，以元素的值构建新节点，插入二叉排序树中<br>该过程的实现代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/*插入函数*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::insert(T key)</div><div class="line">&#123;</div><div class="line">    BSNode&lt;T&gt;* pparent = nullptr;</div><div class="line">    BSNode&lt;T&gt;* pnode = root;</div><div class="line"> </div><div class="line">    while (pnode != nullptr)        //寻找合适的插入位置</div><div class="line">    &#123;</div><div class="line">        pparent = pnode;</div><div class="line">        if (key &gt; pnode-&gt;value)</div><div class="line">            pnode = pnode-&gt;rchild;</div><div class="line">        else if (key &lt; pnode-&gt;value)</div><div class="line">            pnode = pnode-&gt;lchild;</div><div class="line">        else</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    pnode = new BSNode&lt;T&gt;(key); //以元素的值构建新节点</div><div class="line"></div><div class="line">    if (pparent == nullptr)            //如果是空树</div><div class="line">    &#123;</div><div class="line">        root = pnode;                  //则新节点为根</div><div class="line">    &#125;</div><div class="line">    else                            </div><div class="line">    &#123;</div><div class="line">        if (key  &gt; pparent-&gt;value)   </div><div class="line">        &#123;</div><div class="line">            pparent-&gt;rchild = pnode;//否则新节点为其父节点的左孩</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">            pparent-&gt;lchild = pnode; //或右孩</div><div class="line">    &#125;</div><div class="line">    pnode-&gt;parent = pparent;        //指明新节点的父节点 </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>将构建出来的新节点插入二叉排序树时，需要修改链接指针的指向。</p>
<h4 id="遍历平衡二叉树"><a href="#遍历平衡二叉树" class="headerlink" title="遍历平衡二叉树"></a>遍历平衡二叉树</h4><p>遍历平衡二叉树，就是以某种方式逐个“访问”二叉树的每一个节点。“访问”是指对节点的进行某种操作，例如输出节点的值。<br>平衡二叉树是有序树，严格区分左子树与右子树，如果规定左子树先于右子树的次序，我们有三种方式遍历二叉树：</p>
<ul>
<li>前序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
</ul>
<p>我们以如图的两棵二叉排序树进行遍历的算法演示。</p>
<p><img src="/images/树-9.png" alt="enter description here" title="树-9"></p>
<h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><p>若二叉树为空，则空操作返回，否则先访问根节点，然后前序遍历左子树，再前序遍历右子树。（简记为：VLR）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*前序遍历算法*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::preOrder()</div><div class="line">&#123;</div><div class="line">    preOrder(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::preOrder(BSNode&lt;T&gt; *p)</div><div class="line">&#123;</div><div class="line">    if (p != nullptr)</div><div class="line">    &#123;</div><div class="line">        cout &lt;&lt; p-&gt;value &lt;&lt; endl;</div><div class="line">        preOrder(p-&gt;lchild);</div><div class="line">        preOrder(p-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>前序遍历树a：10 5 4 3 6 15 16<br>前序遍历树b：5 3 2 4 8 7 9</p>
<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>若二叉树为空，则空操作返回，否则从根节点开始，中序遍历根节点的左子树，然后访问根节点，最后中序遍历右子树。（简记为：LVR）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*中序遍历算法*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::inOrder()</div><div class="line">&#123;</div><div class="line">    inOrder(root);</div><div class="line">&#125;;</div><div class="line">template&lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::inOrder(BSNode&lt;T&gt;* p)</div><div class="line">&#123;</div><div class="line">    if (p != nullptr)</div><div class="line">    &#123;</div><div class="line">        inOrder(p-&gt;lchild);</div><div class="line">        cout &lt;&lt; p-&gt;value &lt;&lt; endl;</div><div class="line">        inOrder(p-&gt;rchild);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>中序遍历树a：3 4 5 6 10 15 16<br>中序遍历树b：2 3 4 5 7 8 9</p>
<p>二叉排序树的中序遍历刚好输出一个非递减的有序序列。</p>
<h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>若树为空，则返回空操作，否则从左到右先叶子后节点的方式遍历访问左右子树，左右子树都访问结束，才访问根节点。（简称LRV）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*后序遍历算法*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::postOrder()</div><div class="line">&#123;</div><div class="line">    postOrder(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::postOrder(BSNode&lt;T&gt;* p)</div><div class="line">&#123;</div><div class="line">    if (p != nullptr)</div><div class="line">    &#123;</div><div class="line">        postOrder(p-&gt;lchild);</div><div class="line">        postOrder(p-&gt;rchild);</div><div class="line">        cout &lt;&lt; p-&gt;value&lt;&lt;endl;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>后序遍历树a：3 4 6 5 16 15 10<br>后序遍历树b：2 4 3 7 9 8 5</p>
<h4 id="前驱与后继"><a href="#前驱与后继" class="headerlink" title="前驱与后继"></a>前驱与后继</h4><p>对于一棵二叉排序树，中序遍历时刚好可以输出一个非递减的序列。例如前序遍历图九树a：3 4 5 6 10 15 16，则可称：</p>
<ul>
<li>4是5 前驱节点，6是5的后继节点</li>
<li>6是10的前驱节点，15是10的后继节点</li>
</ul>
<p>一个节点的前驱节点有3种情况：</p>
<ul>
<li>它有左子树，则左子树根节点为其前驱节点</li>
<li>它没有左子树，且它本身为右子树，则其父节点为其前驱节点</li>
<li>它没有左子树，且它本身为左子树，则它的前驱节点为“第一个拥有右子树的父节点”</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/*寻找其前驱节点*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::predecessor(BSNode&lt;T&gt;* pnode)</div><div class="line">&#123;</div><div class="line">if (pnode-&gt;lchild != nullptr)</div><div class="line">&#123;</div><div class="line">    pnode = pnode-&gt;lchild;</div><div class="line">    while (pnode-&gt;rchild != nullptr)</div><div class="line">    &#123;</div><div class="line">        pnode = pnode-&gt;rchild;</div><div class="line">    &#125;</div><div class="line">    return pnode;</div><div class="line">&#125;</div><div class="line"></div><div class="line">BSNode&lt;T&gt;* pparent = pnode-&gt;parent;</div><div class="line">while (pparent != nullptr &amp;&amp; pparent-&gt;lchild == pnode)//如果进入循环，则是第三种情况；否则为第二种情况</div><div class="line">&#123;</div><div class="line">    pnode = pparent;</div><div class="line">    pparent = pparent-&gt;parent;</div><div class="line">&#125;</div><div class="line">return pparent;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>同样的，一个节点的后继节点也有三种情况：</p>
<ul>
<li>它有右子树；则其后继节点为其右子树的最左节点</li>
<li>它没有右子树，但它本身是一个左孩子，则后继节点为它的双亲</li>
<li>它没有右子树，但它本身是一个右孩子，则其后继节点为“具有左孩子的最近父节点”<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/*寻找其后继节点*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::successor(BSNode&lt;T&gt;* pnode)</div><div class="line">&#123;</div><div class="line">    if (pnode-&gt;rchild != nullptr)</div><div class="line">    &#123;</div><div class="line">        pnode = pnode-&gt;rchild;</div><div class="line">        while (pnode-&gt;lchild != nullptr)</div><div class="line">        &#123;</div><div class="line">            pnode = pnode-&gt;lchild;</div><div class="line">        &#125;</div><div class="line">        return pnode;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    BSNode&lt;T&gt;* pparent = pnode-&gt;parent;</div><div class="line">    while (pparent!=nullptr&amp;&amp; pparent-&gt;rchild == pnode)</div><div class="line">    &#123;</div><div class="line">        pnode = pparent;</div><div class="line">        pparent = pparent-&gt;parent;</div><div class="line">    &#125;</div><div class="line">    return pparent;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>删除二叉排序树的某个节点有三种情况：</p>
<ul>
<li>被删除节点同时有左子树与右子树。</li>
<li>被删除节点只有左子树或只有右子树。</li>
<li>被删除节点没有子树。</li>
</ul>
<p>对于第一种情况，我们的处理方式是将前驱节点的值保存在当前结点，继而删除前驱节点。<br>对于第二种情况，我们直接用子树替换被删节点。<br>对于第三种情况，我们可以直接删除节点。</p>
<p><img src="/images/树-10.png" alt="删除节点" title="树-10"></p>
<p>删除节点的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">/*删除指定节点*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::remove(T key)</div><div class="line">&#123;</div><div class="line">    remove(root, key);</div><div class="line">&#125;;</div><div class="line">/*删除指定节点*/</div><div class="line">/*内部使用函数*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::remove(BSNode&lt;T&gt;* pnode, T key)</div><div class="line">&#123;</div><div class="line">    if (pnode != nullptr)</div><div class="line">    &#123;</div><div class="line">        if (pnode-&gt;value == key)</div><div class="line">        &#123;</div><div class="line">            BSNode&lt;T&gt;* pdel=nullptr;</div><div class="line"> </div><div class="line">            if (pnode-&gt;lchild == nullptr || pnode-&gt;rchild == nullptr)</div><div class="line">                pdel = pnode;                    //情况二、三：被删节点只有左子树或右子树，或没有孩子</div><div class="line">            else</div><div class="line">                pdel = predecessor(pnode);      //情况一：被删节点同时有左右子树，则删除该节点的前驱</div><div class="line"> </div><div class="line">            //此时，被删节点只有一个孩子（或没有孩子）.保存该孩子指针</div><div class="line">            BSNode&lt;T&gt;* pchild=nullptr;</div><div class="line">            if (pdel-&gt;lchild != nullptr)</div><div class="line">                pchild = pdel-&gt;lchild;</div><div class="line">            else</div><div class="line">                pchild = pdel-&gt;rchild;</div><div class="line"> </div><div class="line">            //让孩子指向被删除节点的父节点</div><div class="line">            if (pchild != nullptr)</div><div class="line">                pchild-&gt;parent = pdel-&gt;parent;</div><div class="line"> </div><div class="line">            //如果要删除的节点是头节点，注意更改root的值</div><div class="line">            if (pdel-&gt;parent == nullptr)</div><div class="line">                root = pchild;           </div><div class="line"> </div><div class="line">            //如果要删除的节点不是头节点，要注意更改它的双亲节点指向新的孩子节点</div><div class="line">            else if (pdel-&gt;parent-&gt;lchild==pdel)</div><div class="line">            &#123;</div><div class="line">                pdel-&gt;parent-&gt;lchild = pchild;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                pdel-&gt;parent-&gt;rchild = pchild;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            if (pnode-&gt;value != pdel-&gt;value)</div><div class="line">                pnode-&gt;value = pdel-&gt;value;</div><div class="line">            delete pdel;</div><div class="line">        &#125;</div><div class="line">        //进行递归删除</div><div class="line">        else if (key &gt; pnode-&gt;value)</div><div class="line">        &#123;</div><div class="line">            remove(pnode-&gt;rchild, key);</div><div class="line">        &#125;</div><div class="line">        else remove(pnode-&gt;lchild, key);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>我们可以递归或非递归地进行元素的查找。元素的查找过程与元素的插入过程一致，也是在不断地与当前结点进行比较，若值比当前节点的值大，则在右子树进行查找，若值比当前节点的值小，则在左子树进行查找，可以看到这是一个很适合递归操作的过程。而由于二叉排序树这种左小右大的节点特征，也很容易进行非递归查找。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">/*查找指定元素的节点（非递归）*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::search_Iterator(T key)</div><div class="line">&#123;</div><div class="line">    BSNode&lt;T&gt; * pnode = root;</div><div class="line">    while (pnode != nullptr)</div><div class="line">    &#123;</div><div class="line">        if (key == pnode-&gt;value)    //找到</div><div class="line">            return pnode;</div><div class="line">        if (key &gt; pnode-&gt;value)        //关键字比节点值大，在节点右子树查找</div><div class="line">            pnode = pnode-&gt;rchild;</div><div class="line">        else</div><div class="line">            pnode = pnode-&gt;lchild; //关键字比节点值小，在节点左子树查找</div><div class="line">    &#125;</div><div class="line">    return nullptr;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*查找指定元素的节点（递归）*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::search_recursion(T key)</div><div class="line">&#123;</div><div class="line">    return search(root, key);       </div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*private:search()*/</div><div class="line">/*递归查找的类内部实现*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">BSNode&lt;T&gt;* BSTree&lt;T&gt;::search(BSNode&lt;T&gt;* &amp; pnode, T key)</div><div class="line">&#123;</div><div class="line">    if (pnode == nullptr)</div><div class="line">        return nullptr;</div><div class="line">    if (pnode-&gt;value == key)</div><div class="line">        return pnode;</div><div class="line">    //cout &lt;&lt; &quot;--&gt;&quot; &lt;&lt; pnode-&gt;value &lt;&lt; endl; //可以输出查找路径</div><div class="line">    if (key &gt; pnode-&gt;value)</div><div class="line">        return search(pnode-&gt;rchild, key);</div><div class="line">    return search(pnode-&gt;lchild, key);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="查找最值元素"><a href="#查找最值元素" class="headerlink" title="查找最值元素"></a>查找最值元素</h4><p>二叉排序树的最小值位于其最左节点上；最大值位于其最右节点上：</p>
<p><img src="/images/树-11.png" alt="最值元素" title="树-11"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/*寻找最小元素*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">T BSTree&lt;T&gt;::search_minimun()</div><div class="line">&#123;</div><div class="line">    return search_minimun(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">T BSTree&lt;T&gt;::search_minimun(BSNode&lt;T&gt;* p)</div><div class="line">&#123;</div><div class="line">    if (p-&gt;lchild != nullptr)</div><div class="line">        return search_minimun(p-&gt;lchild);</div><div class="line">    return p-&gt;value;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/*寻找最大元素*/</div><div class="line">template &lt;typename T&gt;</div><div class="line">T BSTree&lt;T&gt;::search_maximum()</div><div class="line">&#123;</div><div class="line">    return search_maximum(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">T BSTree&lt;T&gt;::search_maximum(BSNode&lt;T&gt;*p)</div><div class="line">&#123;</div><div class="line">    if (p-&gt;rchild != nullptr)</div><div class="line">        return search_maximum(p-&gt;rchild);</div><div class="line">    return p-&gt;value;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="销毁二叉树"><a href="#销毁二叉树" class="headerlink" title="销毁二叉树"></a>销毁二叉树</h4><p>使用后序遍历递归销毁二叉树<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/*销毁二叉树*/</div><div class="line">template&lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::destory()</div><div class="line">&#123;</div><div class="line">    destory(root);</div><div class="line">&#125;;</div><div class="line">template &lt;typename T&gt;</div><div class="line">void BSTree&lt;T&gt;::destory(BSNode&lt;T&gt;* &amp;p)</div><div class="line">&#123;</div><div class="line">    if (p != nullptr)</div><div class="line">    &#123;</div><div class="line">        if (p-&gt;lchild != nullptr)</div><div class="line">            destory(p-&gt;lchild);</div><div class="line">        if (p-&gt;rchild != nullptr)</div><div class="line">            destory(p-&gt;rchild);</div><div class="line">        delete p;</div><div class="line">        p = nullptr;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    BSTree&lt;int&gt; t;</div><div class="line">    t.insert(62);</div><div class="line">    t.insert(58);</div><div class="line">    t.insert(47);</div><div class="line">    t.insert(51);</div><div class="line">    t.insert(35);</div><div class="line">    t.insert(37);</div><div class="line">    t.insert(88);</div><div class="line">    t.insert(73);</div><div class="line">    t.insert(99);</div><div class="line">    t.insert(93);</div><div class="line">    t.insert(95);</div><div class="line"> </div><div class="line">    cout &lt;&lt; endl &lt;&lt; &quot;中序遍历：&quot; &lt;&lt; endl;</div><div class="line">    t.inOrder();</div><div class="line"> </div><div class="line">    cout &lt;&lt; &quot;最大元素:&quot; &lt;&lt; t.search_maximum() &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; &quot;最小元素:&quot; &lt;&lt; t.search_minimun() &lt;&lt; endl;</div><div class="line"> </div><div class="line">    cout &lt;&lt; &quot;删除元素99&quot; &lt;&lt; endl;</div><div class="line">    t.remove(99);</div><div class="line"> </div><div class="line">    cout &lt;&lt; &quot;最大元素:&quot; &lt;&lt; t.search_maximum() &lt;&lt; endl;</div><div class="line"> </div><div class="line">    t.destory();</div><div class="line"> </div><div class="line">    getchar();</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">运行结果：</div><div class="line"></div><div class="line"> </div><div class="line">中序遍历：</div><div class="line">35</div><div class="line">37</div><div class="line">47</div><div class="line">51</div><div class="line">58</div><div class="line">62</div><div class="line">73</div><div class="line">88</div><div class="line">93</div><div class="line">95</div><div class="line">99</div><div class="line">最大元素:99</div><div class="line">最小元素:35</div><div class="line">删除元素99</div><div class="line">最大元素:95</div></pre></td></tr></table></figure>
<blockquote>
<p>转载<a href="http://www.cnblogs.com/QG-whz/p/5168620.html#_label0" target="_blank" rel="external">http://www.cnblogs.com/QG-whz/p/5168620.html#_label0</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;树的简介&quot;&gt;&lt;a href=&quot;#树的简介&quot; class=&quot;headerlink&quot; title=&quot;树的简介&quot;&gt;&lt;/a&gt;树的简介&lt;/h3&gt;&lt;p&gt;树是一种数据结构，它是n(n&amp;gt;=0)个节点的有限集。n=0时称为空树。n&amp;gt;0时，有限集的元素构成一个具有层次感的
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>jquery|Ajax</title>
    <link href="http://yoursite.com/2018/01/24/jquery-Ajax/"/>
    <id>http://yoursite.com/2018/01/24/jquery-Ajax/</id>
    <published>2018-01-24T15:26:56.000Z</published>
    <updated>2018-01-27T08:22:15.016Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">function getData()&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">                url:&quot;../api&quot;,</div><div class="line">                type:&quot;GET&quot;,</div><div class="line">                data:&#123;&quot;page&quot;:&quot;1&quot;&#125;,</div><div class="line">                processData:false,</div><div class="line">                contentType:false,</div><div class="line">                dataType:&quot;json&quot;,</div><div class="line">                success:function(data)&#123;</div><div class="line">                	// console.info(data);</div><div class="line">                	$(&quot;#resText&quot;).html(&quot;状态：&quot;+data.status); </div><div class="line">                &#125;,</div><div class="line">                error:function(e)&#123;</div><div class="line">                    $(&quot;#resText&quot;).html(&quot;发生错误了&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;);    </div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function sendData()&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">                url:&quot;../api/addFindThing&quot;,</div><div class="line">                type:&quot;post&quot;,</div><div class="line">                data:new FormData($(&quot;#form&quot;)[0]),</div><div class="line">                processData:false,</div><div class="line">                contentType:false,</div><div class="line">                dataType:&quot;json&quot;,</div><div class="line">                success:function(data)&#123;</div><div class="line">                	// console.info(data);</div><div class="line">                	$(&quot;#resText&quot;).html(&quot;状态：&quot;+data.status); </div><div class="line">                &#125;,</div><div class="line">                error:function(e)&#123;</div><div class="line">                    $(&quot;#resText&quot;).html(&quot;发生错误了&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;);        </div><div class="line">	&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>总结|我的大二.上</title>
    <link href="http://yoursite.com/2018/01/24/%E6%80%BB%E7%BB%93-%E6%88%91%E7%9A%84%E5%A4%A7%E4%BA%8C-%E4%B8%8A/"/>
    <id>http://yoursite.com/2018/01/24/总结-我的大二-上/</id>
    <published>2018-01-24T09:33:17.000Z</published>
    <updated>2018-01-30T03:19:07.766Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的大二"><a href="#我的大二" class="headerlink" title="我的大二"></a>我的大二</h3><p>不得不说，大二的上学期一转眼就过了，让人触不及防，可以说大学生活已经过了一半了。现在都流行搞年度总结，像支付宝会出年度账单、网易云音乐会出年度歌单…那我也来个 <strong>小智年度总结吧</strong></p>
<h4 id="加入找实习的大军"><a href="#加入找实习的大军" class="headerlink" title="加入找实习的大军"></a>加入找实习的大军</h4><p>这是在刚开学那会，弄着玩的，但自己还真的有想过要找份实习的。在写了自己的第一份简历后，有学长学长的推荐，或者看到一些招聘信息，就一股脑的投了简历了。当时也没多想，毕竟年轻嘛，目的性也不是很强，成是最好，不成就当是练手了。当时也参加了一些笔试，可能自己还没认真钻研过数据结构和算法这些很基础的内容吧，只是知道个大概，所以笔试的时候并不能发挥的很好，因此往往总是在笔试后就止步不前了。不过，这一段经历还是挺好玩的，毕竟是以一种试一试与学习的心态去参加的，没有那么多压力，很轻松。同时，也发现了自己的很多问题吧。</p>
<h4 id="学习数据结构"><a href="#学习数据结构" class="headerlink" title="学习数据结构"></a>学习数据结构</h4><p>学校开了数据结构的这门课，但是自己从来没有认真听过一节课，因为自己总感觉不是自己想要的那种上课形式，但是自己也不知道自己想要的形式是什么。哎，那就靠自己吧。自己就在书上看理论，然后网上找了一些好的博客，看看别人是怎么实现的。编程这东西，理论开起来简单，但是要一步步写代码来实现还是有难度的。不得不说，数据结构这门课还是很重要，借助这个工具，我们能更好更合理地组织数据在内存或硬盘中的存储方式，更好的适应我们的应用场景。</p>
<h4 id="学习数字逻辑"><a href="#学习数字逻辑" class="headerlink" title="学习数字逻辑"></a>学习数字逻辑</h4><p>之前就听学长说数字逻辑这门课我们搞软件的用不上，我半信半疑，先不说其他的，个人觉得上课的胡红平老师听nice的，有耐心说话又好听，有点像高中的老师。我觉得不管搞什么方向，只要跟计算机相关的，还是要必要知道这些逻辑门的东西，这些底层的东西虽然在开发的时候用不上，但是能帮助我们更好地理解程序的运行，帮助我们写出漂亮的代码。</p>
<p>这门课还有个大作业，就是用VHDL设计一个模型机，也可以说是一个简单的CPU吧，就是可以完成一些指令，比如说加、减、移位…这些操作。自己弄了一个星期，没成功，借助了某位学霸的杰作去验收，认识学霸还是很有必要的。验收完后，自己又继续搞了两天吧，把自己的完成了，还是很有成就感的。</p>
<h4 id="近红外数据库开发"><a href="#近红外数据库开发" class="headerlink" title="近红外数据库开发"></a>近红外数据库开发</h4><p>记得是小学期的时候，课挺少的，仕祺学长发了个大数据分享，自己觉得无聊就去了。到哪之后，勇哥(咖啡厅老板)就问我做过项目没有呀？有没有实习的打算啊？当时自己也有这个打算，就说有，然后也简单了解了他那边的情况，说是陈浩老师手下的团队，就加入了，简单点说就是如果有什么项目，自己可以加入开发，然后增加自己的项目经历。</p>
<p>大概过了一两个月吧，就有项目来了。项目是要搞一个方便农大的实验室进行的近红外的研究，给他们一个存储数据的平台，然后方便进行大数据分析。这个项目还是很好玩的，跟陈浩老师的研究生和两个大三的学长一起组成一个团队，我能得到的只有需求，剩下的一切都要我们自己完成。</p>
<p>我们就一起讨论需求，然后确定需求，接着画项目的流程图，然后是原型图。再接着就是根据原型图设计数据库，等数据库设计好后就是开发了。这中间自己只参与了需求的讨论、数据库的设计以及后台的开发，当然，其他的一些部分自己也了解了一下，知道这个步骤是要干什么。在这过程中，自己也学到了一些东西吧。技术上就是了解了Java的SpringMVC框架，但更受益的是团队管理与团队协作中的一些知识：</p>
<ul>
<li>每个人要有周报，汇总自己解决的问题与遇到的问题</li>
<li>团队之间的沟通与重要通知推荐用邮件啊</li>
<li>开会要有会议记录啊</li>
<li>要有项目计划表来推动项目的推进啊</li>
</ul>
<h4 id="弦歌微湖大公众号的后台开发"><a href="#弦歌微湖大公众号的后台开发" class="headerlink" title="弦歌微湖大公众号的后台开发"></a>弦歌微湖大公众号的后台开发</h4><p>经过暑假新生宝典的洗礼，自己可以说是入门Web开发了，知道前后端的数据交互以及各自的工作流程了。这学期就接了一些实际的锅：</p>
<h5 id="知湖3-0的改版-微湖大的内部接口"><a href="#知湖3-0的改版-微湖大的内部接口" class="headerlink" title="知湖3.0的改版|微湖大的内部接口"></a>知湖3.0的改版|微湖大的内部接口</h5><p>这相当与重写了之前用户版的知湖了。之前是用基本的PHP和纯过程思想来写的，很难维护与扩展。过程中，也没需要什么难题，但是总是在加需求，想到什么好的点子就加，然后还不是很确定最终版本，进度就一直拖，所以到现在还不上线。不过自己倒是琢磨了一波微信公众号的一些接口规则，可以说基本掌握了微信的那一套吧。</p>
<h5 id="失物招领"><a href="#失物招领" class="headerlink" title="失物招领"></a>失物招领</h5><p>这应该是老大的一个硬需求吧。然后张惟丰就让我负责这个项目的进行，刚开始是我们自己想的很简单的实现，但是后来产品经理李畅加了加了匹配的功能。确实，这个功能是很有必要的，毕竟我们有学生的一些基本信息，要让这些信息发生价值，不然这些信息就全都是摆设了。</p>
<p>说到信息，自己也深有体会。记得有问过胡哥，为什么敲代码的叫做码农，胡哥说因为信息就向土壤，搞IT的就是在信息的基础上做加工，然后对外提供服务，所以码农就出现了。信息也被马云爸爸称做资源，也是很对的。</p>
<h4 id="联想比赛"><a href="#联想比赛" class="headerlink" title="联想比赛"></a>联想比赛</h4><p>这是联想俱乐部举办的一个比赛，主要看创新，看Idea怎么样。自己和队友（黄卫江、黄智威）想的是一个可以全方位为旅游出行者提供方便，提供实时的天气、景区信息等…同时能根据预算、兴趣等标签进行个性化推荐。想法应该还可以吧，接着就是怎么把这个想法在答辩的时候完美呈现给举办方。我们分工做PPT和进行答辩前的练习，但是在做PPT和上台答辩这两方面都是自己的短处，自己也没帮上什么忙。自己唯一出力的就是决赛的那个原型设计了。最卖力的还是黄智威吧，ppt大部分都是他搞得，上台答辩也是他，他确实是能说，这一点自己真的比不上。一个团队确实是需要不同的人才，需要有技术上的、管理上的…缺一不可。</p>
<h4 id="未来畅想"><a href="#未来畅想" class="headerlink" title="未来畅想"></a>未来畅想</h4><p>这一学期，自己感觉过得好快，一眨眼的功夫就期末考试了，就要回家过年了。这学期感觉自己也挺忙的，但仔细想想也没做什么实际性的东西出来，都是在弄一些增删改查的东西。这些是不需要动脑，有点基础都能完成的工作，完全没有挑战。自己也在想自己的竞争力在哪？对哇，自己还是要选择一个方向，机器学习？区块链？…然后深究的，这有这些东西才是所谓的竞争力。</p>
<p>下学期还是要学习一下新的东西，不能在原地踏步了，现在想想可以弄一下这些事：</p>
<ul>
<li>爬虫</li>
<li>机器学习</li>
<li>区块链</li>
<li>……</li>
</ul>
<p>总之，要学习一些别人不懂的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我的大二&quot;&gt;&lt;a href=&quot;#我的大二&quot; class=&quot;headerlink&quot; title=&quot;我的大二&quot;&gt;&lt;/a&gt;我的大二&lt;/h3&gt;&lt;p&gt;不得不说，大二的上学期一转眼就过了，让人触不及防，可以说大学生活已经过了一半了。现在都流行搞年度总结，像支付宝会出年度账单、
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>工具|Maven工具的使用</title>
    <link href="http://yoursite.com/2018/01/24/%E5%B7%A5%E5%85%B7-Maven%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/24/工具-Maven工具的使用/</id>
    <published>2018-01-23T21:43:25.000Z</published>
    <updated>2018-01-27T08:22:16.698Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h3><p>Apache Maven 是一种用作软件项目管理和理解工具。它基于项目对象模型（POM）的概念，可以管理一个项目的构建、报告以及从项目核心信息中生成文档。</p>
<p>Maven是一种项目管理和理解工具。Maven向开发者提供了一个完整的构建生命周期框架。开发团队几乎不用花时间就可以使用自动化构建项目的基础框架，因为 Maven使用了一套标准的目录结构和默认的构建生命周期。</p>
<p>Maven提供给开发者管理如下过程的方法：</p>
<ul>
<li>项目构建(Builds)</li>
<li>文档(Documentation)</li>
<li>报告(Reporting)</li>
<li>项目依赖(Dependencies)</li>
<li>软件配置管理(SCMs)</li>
<li>发布(Releases)</li>
<li>分发(Distribution)</li>
<li>邮件列表(mailing list)</li>
</ul>
<p>总的来说，Maven简化和统一了项目构建的过程。它无缝地处理项目编译，分发，文档，团队合作和其他任务，增加了任务处理的重用性，并可以处理大多数构建相关的任务。</p>
<h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul>
<li>mvn -v //查看版本  </li>
<li>mvn archetype:create //创建 Maven 项目  </li>
<li>mvn compile //编译源代码  </li>
<li>mvn test-compile //编译测试代码  </li>
<li>mvn test //运行应用程序中的单元测试  </li>
<li>mvn site //生成项目相关信息的网站  </li>
<li>mvn package //依据项目生成 jar 文件  </li>
<li>mvn install //在本地 Repository 中安装 jar  </li>
<li>mvn -Dmaven.test.skip=true //忽略测试文档编译  </li>
<li>mvn clean //清除目标目录中的生成结果  </li>
<li>mvn clean compile //将.java类编译为.class文件  </li>
<li>mvn clean package //进行打包  </li>
<li>mvn clean test //执行单元测试  </li>
<li>mvn clean deploy //部署到版本仓库  </li>
<li>mvn clean install</li>
<li>//使其他项目使用这个jar,会安装到maven本地仓库中  </li>
<li>mvn archetype:generate //创建项目架构  </li>
<li>mvn dependency:list //查看已解析依赖  </li>
<li>mvn dependency:tree //看到依赖树  </li>
<li>mvn dependency:analyze //查看依赖的工具  </li>
<li>mvn help:system //从中央仓库下载文件至本地仓库  </li>
<li>mvn help:active-profiles //查看当前激活的profiles  </li>
<li>mvn help:all-profiles //查看所有profiles  </li>
<li>mvn help:effective -pom //查看完整的pom信息  </li>
</ul>
<h3 id="修改默认jdk库"><a href="#修改默认jdk库" class="headerlink" title="修改默认jdk库"></a>修改默认jdk库</h3><p>修改maven的setting.xml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;profile&gt;</div><div class="line">      &lt;id&gt;jdk-1.8&lt;/id&gt;</div><div class="line"></div><div class="line">      &lt;activation&gt;</div><div class="line">          &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</div><div class="line">        &lt;jdk&gt;1.8&lt;/jdk&gt;</div><div class="line">      &lt;/activation&gt;</div><div class="line"></div><div class="line">      &lt;repositories&gt;</div><div class="line">          &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</div><div class="line">        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</div><div class="line">        &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</div><div class="line">      &lt;/repositories&gt;</div><div class="line">    &lt;/profile&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Maven简介&quot;&gt;&lt;a href=&quot;#Maven简介&quot; class=&quot;headerlink&quot; title=&quot;Maven简介&quot;&gt;&lt;/a&gt;Maven简介&lt;/h3&gt;&lt;p&gt;Apache Maven 是一种用作软件项目管理和理解工具。它基于项目对象模型（POM）的概念，可以
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java|POI的简单用</title>
    <link href="http://yoursite.com/2018/01/23/Java-POI%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/23/Java-POI的简单用/</id>
    <published>2018-01-22T23:37:27.000Z</published>
    <updated>2018-01-22T17:06:58.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Apache-POI"><a href="#什么是Apache-POI" class="headerlink" title="什么是Apache POI"></a>什么是Apache POI</h3><p>Apache POI是一种流行的API，允许程序员使用Java程序创建，修改和显示MS Office文件。它是由Apache Software Foundation开发和分发的开源库，用于使用Java程序设计或修改Microsoft Office文件。它包含将用户输入数据或文件解码为MS Office文档的类和方法。</p>
<h3 id="Apache-POI的组件"><a href="#Apache-POI的组件" class="headerlink" title="Apache POI的组件"></a>Apache POI的组件</h3><p>Apache POI包含用于处理MS Office的所有OLE2复合文档的类和方法。此API的组件列表如下。</p>
<ul>
<li><p>POIFS（Poor Obfuscation Implementation File System） ：该组件是所有其他POI元素的基本要素。它用于显式读取不同的文件。</p>
</li>
<li><p>HSSF（Horrible Spreadsheet Format） ：用于读取和写入MS-Excel文件的xls格式。</p>
</li>
<li><p>XSSF（XML Spreadsheet Format） ：用于MS-Excel的xlsx文件格式。</p>
</li>
<li><p>HPSF（Horrible Property Set Format） ：用于提取MS-Office文件的属性集。</p>
</li>
<li><p>HWPF（Horrible Word Processor Format） ：用于读取和写入MS-Word的文档扩展文件。</p>
</li>
<li><p>XWPF（XML Word Processor Format） ：用于读取和写入MS-Word的docx扩展文件。</p>
</li>
<li><p>HSLF（Horrible Slide Layout Format） ：用于阅读，创建和编辑PowerPoint演示文稿。</p>
</li>
<li><p>HDGF（Horrible DiaGram Format） ：它包含MS-Visio二进制文件的类和方法。</p>
</li>
<li><p>HPBF（Horrible PuBlisher Format） ：用于读取和写入MS-Publisher文件。</p>
</li>
</ul>
<h3 id="先用了再说"><a href="#先用了再说" class="headerlink" title="先用了再说"></a>先用了再说</h3><h4 id="创建工作簿（“工作簿”是指Microsoft-Excel文件）"><a href="#创建工作簿（“工作簿”是指Microsoft-Excel文件）" class="headerlink" title="创建工作簿（“工作簿”是指Microsoft Excel文件）"></a>创建工作簿（“工作簿”是指Microsoft Excel文件）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import org.apache.poi.xssf.usermodel.*;</div><div class="line">public class CreateWorkBook </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      //Create Blank workbook</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      //Create file system using specific name</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;createworkbook.xlsx&quot;));</div><div class="line">      //write operation workbook using file out object </div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;</div><div class="line">      createworkbook.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打开现有工作簿"><a href="#打开现有工作簿" class="headerlink" title="打开现有工作簿"></a>打开现有工作簿</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import org.apache.poi.xssf.usermodel.*;</div><div class="line">public class OpenWorkBook</div><div class="line">&#123;</div><div class="line">   public static void main(String args[])throws Exception</div><div class="line">   &#123; </div><div class="line">      File file = new File(&quot;openworkbook.xlsx&quot;);</div><div class="line">      FileInputStream fIP = new FileInputStream(file);</div><div class="line">      //Get the workbook instance for XLSX file </div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(fIP);</div><div class="line">      if(file.isFile() &amp;&amp; file.exists())</div><div class="line">      &#123;</div><div class="line">         System.out.println(</div><div class="line">         &quot;openworkbook.xlsx file open successfully.&quot;);</div><div class="line">      &#125;</div><div class="line">      else</div><div class="line">      &#123;</div><div class="line">         System.out.println(</div><div class="line">         &quot;Error to open openworkbook.xlsx file.&quot;);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="创建电子表格"><a href="#创建电子表格" class="headerlink" title="创建电子表格"></a>创建电子表格</h4><p>电子表格是Excel文件中的一个页面;它包含具有特定名称的行和列。电子表格具有网格布局。行和列用特定名称标识。列用字母和数字的行标识。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Set;</div><div class="line">import java.util.TreeMap;</div><div class="line">import org.apache.poi.ss.usermodel.Cell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class Writesheet </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args) throws Exception </div><div class="line">   &#123;</div><div class="line">      //Create blank workbook</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      //Create a blank sheet</div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet( </div><div class="line">      &quot; Employee Info &quot;);</div><div class="line">      //Create row object</div><div class="line">      XSSFRow row;</div><div class="line">      //This data needs to be written (Object[])</div><div class="line">      Map &lt; String, Object[] &gt; empinfo =  new TreeMap &lt; String, Object[] &gt;();</div><div class="line">      empinfo.put( &quot;1&quot;, new Object[] &#123; &quot;EMP ID&quot;, &quot;EMP NAME&quot;, &quot;DESIGNATION&quot; &#125;);</div><div class="line">      empinfo.put( &quot;2&quot;, new Object[] &#123; &quot;tp01&quot;, &quot;Gopal&quot;, &quot;Technical Manager&quot; &#125;);</div><div class="line">      empinfo.put( &quot;3&quot;, new Object[] &#123; &quot;tp02&quot;, &quot;Manisha&quot;, &quot;Proof Reader&quot; &#125;);</div><div class="line">      empinfo.put( &quot;4&quot;, new Object[] &#123; &quot;tp03&quot;, &quot;Masthan&quot;, &quot;Technical Writer&quot; &#125;);</div><div class="line">      empinfo.put( &quot;5&quot;, new Object[] &#123; &quot;tp04&quot;, &quot;Satish&quot;, &quot;Technical Writer&quot; &#125;);</div><div class="line">      empinfo.put( &quot;6&quot;, new Object[] &#123; &quot;tp05&quot;, &quot;Krishna&quot;, &quot;Technical Writer&quot; &#125;);</div><div class="line">      //Iterate over data and write to sheet</div><div class="line">      Set &lt; String &gt; keyid = empinfo.keySet();</div><div class="line">      int rowid = 0;</div><div class="line">      for (String key : keyid)</div><div class="line">      &#123;</div><div class="line">         row = spreadsheet.createRow(rowid++);</div><div class="line">         Object [] objectArr = empinfo.get(key);</div><div class="line">         int cellid = 0;</div><div class="line">         for (Object obj : objectArr)</div><div class="line">         &#123;</div><div class="line">            Cell cell = row.createCell(cellid++);</div><div class="line">            cell.setCellValue((String)obj);</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      //Write the workbook in file system</div><div class="line">      FileOutputStream out = new FileOutputStream( new File(&quot;Writesheet.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println( &quot;Writesheet.xlsx written successfully&quot; );</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="从电子表格阅读"><a href="#从电子表格阅读" class="headerlink" title="从电子表格阅读"></a>从电子表格阅读</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.util.Iterator;</div><div class="line">import org.apache.poi.ss.usermodel.Cell;</div><div class="line">import org.apache.poi.ss.usermodel.Row;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class Readsheet </div><div class="line">&#123;</div><div class="line">   static XSSFRow row;</div><div class="line">   public static void main(String[] args) throws Exception </div><div class="line">   &#123;</div><div class="line">      FileInputStream fis = new FileInputStream(</div><div class="line">      new File(&quot;WriteSheet.xlsx&quot;));</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(fis);</div><div class="line">      XSSFSheet spreadsheet = workbook.getSheetAt(0);</div><div class="line">      Iterator &lt; Row &gt; rowIterator = spreadsheet.iterator();</div><div class="line">      while (rowIterator.hasNext()) </div><div class="line">      &#123;</div><div class="line">         row = (XSSFRow) rowIterator.next();</div><div class="line">         Iterator &lt; Cell &gt; cellIterator = row.cellIterator();</div><div class="line">         while ( cellIterator.hasNext()) </div><div class="line">         &#123;</div><div class="line">            Cell cell = cellIterator.next();</div><div class="line">            switch (cell.getCellType()) </div><div class="line">            &#123;</div><div class="line">               case Cell.CELL_TYPE_NUMERIC:</div><div class="line">               System.out.print( </div><div class="line">               cell.getNumericCellValue() + &quot; \t\t &quot; );</div><div class="line">               break;</div><div class="line">               case Cell.CELL_TYPE_STRING:</div><div class="line">               System.out.print(</div><div class="line">               cell.getStringCellValue() + &quot; \t\t &quot; );</div><div class="line">               break;</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">         System.out.println();</div><div class="line">      &#125;</div><div class="line">      fis.close();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="操作单元格"><a href="#操作单元格" class="headerlink" title="操作单元格"></a>操作单元格</h4><p>您输入电子表格的任何数据始终存储在单元格中。我们使用行和列的标签来标识单元格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.util.Date;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class TypesofCells </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;cell types&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow((short) 2);</div><div class="line">      row.createCell(0).setCellValue(&quot;Type of Cell&quot;);</div><div class="line">      row.createCell(1).setCellValue(&quot;cell value&quot;);</div><div class="line">      row = spreadsheet.createRow((short) 3);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type BLANK&quot;);</div><div class="line">      row.createCell(1);</div><div class="line">      row = spreadsheet.createRow((short) 4);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type BOOLEAN&quot;);</div><div class="line">      row.createCell(1).setCellValue(true);</div><div class="line">      row = spreadsheet.createRow((short) 5);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type ERROR&quot;);</div><div class="line">      row.createCell(1).setCellValue(XSSFCell.CELL_TYPE_ERROR );</div><div class="line">      row = spreadsheet.createRow((short) 6);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type date&quot;);</div><div class="line">      row.createCell(1).setCellValue(new Date());</div><div class="line">      row = spreadsheet.createRow((short) 7);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type numeric&quot; );</div><div class="line">      row.createCell(1).setCellValue(20 );</div><div class="line">      row = spreadsheet.createRow((short) 8);</div><div class="line">      row.createCell(0).setCellValue(&quot;set cell type string&quot;);</div><div class="line">      row.createCell(1).setCellValue(&quot;A String&quot;);</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;typesofcells.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;typesofcells.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h4><p>在这里，您可以学习如何进行单元格格式化，并应用不同的样式，例如合并相邻单元格，添加边框，设置单元格对齐和填充颜色。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.hssf.util.HSSFColor;</div><div class="line">import org.apache.poi.ss.usermodel.IndexedColors;</div><div class="line">import org.apache.poi.ss.util.CellRangeAddress;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class CellStyle </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;cellstyle&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow((short) 1);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      XSSFCell cell = (XSSFCell) row.createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;test of merging&quot;);</div><div class="line">      //MEARGING CELLS </div><div class="line">      //this statement for merging cells</div><div class="line">      spreadsheet.addMergedRegion(new CellRangeAddress(</div><div class="line">      1, //first row (0-based)</div><div class="line">      1, //last row (0-based)</div><div class="line">      1, //first column (0-based)</div><div class="line">      4 //last column (0-based)</div><div class="line">      ));</div><div class="line">      //CELL Alignment</div><div class="line">      row = spreadsheet.createRow(5); </div><div class="line">      cell = (XSSFCell) row.createCell(0);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      // Top Left alignment </div><div class="line">      XSSFCellStyle style1 = workbook.createCellStyle();</div><div class="line">      spreadsheet.setColumnWidth(0, 8000);</div><div class="line">      style1.setAlignment(XSSFCellStyle.ALIGN_LEFT);</div><div class="line">      style1.setVerticalAlignment(XSSFCellStyle.VERTICAL_TOP);</div><div class="line">      cell.setCellValue(&quot;Top Left&quot;);</div><div class="line">      cell.setCellStyle(style1);</div><div class="line">      row = spreadsheet.createRow(6); </div><div class="line">      cell = (XSSFCell) row.createCell(1);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      // Center Align Cell Contents </div><div class="line">      XSSFCellStyle style2 = workbook.createCellStyle();</div><div class="line">      style2.setAlignment(XSSFCellStyle.ALIGN_CENTER);</div><div class="line">      style2.setVerticalAlignment( </div><div class="line">      XSSFCellStyle.VERTICAL_CENTER);</div><div class="line">      cell.setCellValue(&quot;Center Aligned&quot;); </div><div class="line">      cell.setCellStyle(style2);</div><div class="line">      row = spreadsheet.createRow(7); </div><div class="line">      cell = (XSSFCell) row.createCell(2);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      // Bottom Right alignment </div><div class="line">      XSSFCellStyle style3 = workbook.createCellStyle();</div><div class="line">      style3.setAlignment(XSSFCellStyle.ALIGN_RIGHT);</div><div class="line">      style3.setVerticalAlignment( </div><div class="line">      XSSFCellStyle.VERTICAL_BOTTOM);</div><div class="line">      cell.setCellValue(&quot;Bottom Right&quot;);</div><div class="line">      cell.setCellStyle(style3);</div><div class="line">      row = spreadsheet.createRow(8);</div><div class="line">      cell = (XSSFCell) row.createCell(3);</div><div class="line">      // Justified Alignment </div><div class="line">      XSSFCellStyle style4 = workbook.createCellStyle();</div><div class="line">      style4.setAlignment(XSSFCellStyle.ALIGN_JUSTIFY);</div><div class="line">      style4.setVerticalAlignment(</div><div class="line">      XSSFCellStyle.VERTICAL_JUSTIFY);</div><div class="line">      cell.setCellValue(&quot;Contents are Justified in Alignment&quot;); </div><div class="line">      cell.setCellStyle(style4);</div><div class="line">      //CELL BORDER</div><div class="line">      row = spreadsheet.createRow((short) 10);</div><div class="line">      row.setHeight((short) 800);</div><div class="line">      cell = (XSSFCell) row.createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;BORDER&quot;);</div><div class="line">      XSSFCellStyle style5 = workbook.createCellStyle();</div><div class="line">      style5.setBorderBottom(XSSFCellStyle.BORDER_THICK);</div><div class="line">      style5.setBottomBorderColor(</div><div class="line">      IndexedColors.BLUE.getIndex());</div><div class="line">      style5.setBorderLeft(XSSFCellStyle.BORDER_DOUBLE);</div><div class="line">      style5.setLeftBorderColor( </div><div class="line">      IndexedColors.GREEN.getIndex());</div><div class="line">      style5.setBorderRight(XSSFCellStyle.BORDER_HAIR);</div><div class="line">      style5.setRightBorderColor( </div><div class="line">      IndexedColors.RED.getIndex());</div><div class="line">      style5.setBorderTop(XSSFCellStyle.BIG_SPOTS);</div><div class="line">      style5.setTopBorderColor( </div><div class="line">      IndexedColors.CORAL.getIndex());</div><div class="line">      cell.setCellStyle(style5);</div><div class="line">      //Fill Colors</div><div class="line">      //background color</div><div class="line">      row = spreadsheet.createRow((short) 10 );</div><div class="line">      cell = (XSSFCell) row.createCell((short) 1);</div><div class="line">      XSSFCellStyle style6 = workbook.createCellStyle();</div><div class="line">      style6.setFillBackgroundColor(</div><div class="line">      HSSFColor.LEMON_CHIFFON.index );</div><div class="line">      style6.setFillPattern(XSSFCellStyle.LESS_DOTS);</div><div class="line">      style6.setAlignment(XSSFCellStyle.ALIGN_FILL);</div><div class="line">      spreadsheet.setColumnWidth(1,8000);</div><div class="line">      cell.setCellValue(&quot;FILL BACKGROUNG/FILL PATTERN&quot;);</div><div class="line">      cell.setCellStyle(style6);</div><div class="line">      //Foreground color</div><div class="line">      row = spreadsheet.createRow((short) 12);</div><div class="line">      cell = (XSSFCell) row.createCell((short) 1);</div><div class="line">      XSSFCellStyle style7=workbook.createCellStyle();</div><div class="line">      style7.setFillForegroundColor(HSSFColor.BLUE.index);</div><div class="line">      style7.setFillPattern( XSSFCellStyle.LESS_DOTS);</div><div class="line">      style7.setAlignment(XSSFCellStyle.ALIGN_FILL);</div><div class="line">      cell.setCellValue(&quot;FILL FOREGROUND/FILL PATTERN&quot;);</div><div class="line">      cell.setCellStyle(style7);</div><div class="line">      FileOutputStream out = new FileOutputStream(new File(&quot;cellstyle.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;cellstyle.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="操作字体"><a href="#操作字体" class="headerlink" title="操作字体"></a>操作字体</h4><p>每个系统都捆绑了大量的字体集合，如Arial，Impact，Times New Roman等。如果需要，还可以使用新的字体更新该集合。类似地，可以显示字体的各种风格，例如粗体，斜体，下划线，敲击等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.hssf.util.HSSFColor;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFFont;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class FontStyle </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;Fontstyle&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow(2);</div><div class="line">      //Create a new font and alter it.</div><div class="line">      XSSFFont font = workbook.createFont();</div><div class="line">      font.setFontHeightInPoints((short) 30);</div><div class="line">      font.setFontName(&quot;IMPACT&quot;);</div><div class="line">      font.setItalic(true);</div><div class="line">      font.setColor(HSSFColor.BRIGHT_GREEN.index);</div><div class="line">      //Set font into style</div><div class="line">      XSSFCellStyle style = workbook.createCellStyle();</div><div class="line">      style.setFont(font);</div><div class="line">      // Create a cell with a value and set style to it.</div><div class="line">      XSSFCell cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;Font Style&quot;);</div><div class="line">      cell.setCellStyle(style);</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;fontstyle.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(</div><div class="line">      &quot;fontstyle.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="操作文字方向"><a href="#操作文字方向" class="headerlink" title="操作文字方向"></a>操作文字方向</h4><p>在这里，您可以学习如何设置不同角度的文字方向。通常，细胞内容从左到右以00角水平显示;但是，如果需要，您可以使用以下代码旋转文本方向。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class TextDirection </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(</div><div class="line">      &quot;Text direction&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow(2);</div><div class="line">      XSSFCellStyle myStyle = workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 0);</div><div class="line">      XSSFCell cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;0D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //30 degrees</div><div class="line">      myStyle=workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 30);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;30D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //90 degrees</div><div class="line">      myStyle=workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 90);</div><div class="line">      cell = row.createCell(5);</div><div class="line">      cell.setCellValue(&quot;90D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //120 degrees</div><div class="line">      myStyle=workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 120);</div><div class="line">      cell = row.createCell(7);</div><div class="line">      cell.setCellValue(&quot;120D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //270 degrees</div><div class="line">      myStyle = workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 270);</div><div class="line">      cell = row.createCell(9);</div><div class="line">      cell.setCellValue(&quot;270D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      //360 degrees</div><div class="line">      myStyle=workbook.createCellStyle();</div><div class="line">      myStyle.setRotation((short) 360);</div><div class="line">      cell = row.createCell(12);</div><div class="line">      cell.setCellValue(&quot;360D angle&quot;);</div><div class="line">      cell.setCellStyle(myStyle);</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;textdirection.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println( </div><div class="line">      &quot;textdirection.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="操作公式"><a href="#操作公式" class="headerlink" title="操作公式"></a>操作公式</h4><p>本章将介绍使用Java编程在单元格上应用不同公式的过程。 Excel应用程序的基本目的是通过在其上应用公式来维护数值数据。</p>
<p>在公式中，我们传递Excel表中值的动态值或位置。执行此公式时，您将获得所需的结果。下表列出了Excel中经常使用的几个基本公式。</p>
<table>
<thead>
<tr>
<th>运算</th>
<th>句法</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>统计多个数字|    = SUM（Loc1：Locn）或= SUM（n1，n2，）|<br>计数    |= COUNT（Loc1：Locn）或= COUNT（n1，n2，）|<br>两个数字的力量    |= POWER（Loc1，Loc2）或= POWER（数字，功率）|<br>最多的多个数字    |= MAX（Loc1：Locn）或= MAX（n1，n2，）|<br>产品    |= PRODUCT（Loc1：Locn）或= PRODUCT（n1，n2，）|<br>阶乘    |= FACT（Locn）或= FACT（number）|<br>绝对数    |= ABS（位置）或= ABS（数字）|<br>当天日期    |= TODAY（）|<br>转换为小写    |= LOWER（Locn）或= LOWER（文字）|<br>平方根    |= SQRT（locn）或= SQRT（number）|</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class Formula </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;formula&quot;);</div><div class="line">      XSSFRow row = spreadsheet.createRow(1);</div><div class="line">      XSSFCell cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;A =&quot; );</div><div class="line">      cell = row.createCell(2);</div><div class="line">      cell.setCellValue(2);</div><div class="line">      row = spreadsheet.createRow(2);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;B =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      cell.setCellValue(4);</div><div class="line">      row = spreadsheet.createRow(3);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;Total =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      // Create SUM formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;SUM(C2:C3)&quot; );</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;SUM(C2:C3)&quot;);</div><div class="line">      row = spreadsheet.createRow(4);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;POWER =&quot;);</div><div class="line">      cell=row.createCell(2);</div><div class="line">      // Create POWER formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;POWER(C2,C3)&quot;);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;POWER(C2,C3)&quot;);</div><div class="line">      row = spreadsheet.createRow(5);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;MAX =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      // Create MAX formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;MAX(C2,C3)&quot;);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;MAX(C2,C3)&quot;);</div><div class="line">      row = spreadsheet.createRow(6);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;FACT =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      // Create FACT formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;FACT(C3)&quot;);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;FACT(C3)&quot;);</div><div class="line">      row = spreadsheet.createRow(7);</div><div class="line">      cell = row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;SQRT =&quot;);</div><div class="line">      cell = row.createCell(2);</div><div class="line">      // Create SQRT formula</div><div class="line">      cell.setCellType(XSSFCell.CELL_TYPE_FORMULA);</div><div class="line">      cell.setCellFormula(&quot;SQRT(C5)&quot;);</div><div class="line">      cell = row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;SQRT(C5)&quot;);</div><div class="line">      workbook.getCreationHelper()</div><div class="line">      .createFormulaEvaluator()</div><div class="line">      .evaluateAll();</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;formula.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;fromula.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><p>本章介绍如何在单元格中添加超链接到内容。通常，超链接用于访问任何Web URL，电子邮件或外部文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.common.usermodel.Hyperlink;</div><div class="line">import org.apache.poi.hssf.util.HSSFColor;</div><div class="line">import org.apache.poi.ss.usermodel.CreationHelper;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCellStyle;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFFont;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFHyperlink;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class HyperlinkEX </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args) throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook</div><div class="line">      .createSheet(&quot;Hyperlinks&quot;);</div><div class="line">      XSSFCell cell;</div><div class="line">      CreationHelper createHelper = workbook</div><div class="line">      .getCreationHelper();</div><div class="line">      XSSFCellStyle hlinkstyle = workbook.createCellStyle();</div><div class="line">      XSSFFont hlinkfont = workbook.createFont();</div><div class="line">      hlinkfont.setUnderline(XSSFFont.U_SINGLE);</div><div class="line">      hlinkfont.setColor(HSSFColor.BLUE.index);</div><div class="line">      hlinkstyle.setFont(hlinkfont);</div><div class="line">      //URL Link</div><div class="line">      cell = spreadsheet.createRow(1)</div><div class="line">      .createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;URL Link&quot;);</div><div class="line">      XSSFHyperlink link = (XSSFHyperlink)createHelper</div><div class="line">      .createHyperlink(Hyperlink.LINK_URL);</div><div class="line">      link.setAddress(&quot;http://www.tutorialspoint.com/&quot; );</div><div class="line">      cell.setHyperlink((XSSFHyperlink) link);</div><div class="line">      cell.setCellStyle(hlinkstyle);</div><div class="line">      //Hyperlink to a file in the current directory</div><div class="line">      cell = spreadsheet.createRow(2)</div><div class="line">      .createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;File Link&quot;);</div><div class="line">      link = (XSSFHyperlink)createHelper</div><div class="line">      .createHyperlink(Hyperlink.LINK_FILE);</div><div class="line">      link.setAddress(&quot;cellstyle.xlsx&quot;);</div><div class="line">      cell.setHyperlink(link);</div><div class="line">      cell.setCellStyle(hlinkstyle);</div><div class="line">      //e-mail link</div><div class="line">      cell = spreadsheet.createRow(3)</div><div class="line">      .createCell((short) 1);</div><div class="line">      cell.setCellValue(&quot;Email Link&quot;);</div><div class="line">      link = (XSSFHyperlink)createHelper</div><div class="line">      .createHyperlink(Hyperlink.LINK_EMAIL);</div><div class="line">      link.setAddress( </div><div class="line">      &quot;mailto:contact@tutorialspoint.com?&quot;</div><div class="line">      +&quot;subject=Hyperlink&quot;);</div><div class="line">      cell.setHyperlink(link);</div><div class="line">      cell.setCellStyle(hlinkstyle);</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;hyperlink.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(&quot;hyperlink.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="POI-打印区域"><a href="#POI-打印区域" class="headerlink" title="POI 打印区域"></a>POI 打印区域</h4><p>本章介绍如何在电子表格中设置打印区域。通常的打印区域是Excel电子表格的左上角和右下角。打印区域可根据您的要求定制。这意味着您可以从整个电子表格打印特定范围的单元格，自定义纸张尺寸，打开网格线打开内容等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFPrintSetup;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class PrintArea </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args)throws Exception </div><div class="line">   &#123;</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook.createSheet(&quot;Print Area&quot;);</div><div class="line">      //set print area with indexes</div><div class="line">      workbook.setPrintArea(</div><div class="line">          0, //sheet index</div><div class="line">          0, //start column</div><div class="line">          5, //end column</div><div class="line">          0, //start row</div><div class="line">          5 //end row</div><div class="line">      );</div><div class="line">      //set paper size</div><div class="line">      spreadsheet.getPrintSetup().setPaperSize(</div><div class="line">      XSSFPrintSetup.A4_PAPERSIZE);</div><div class="line">      //set display grid lines or not</div><div class="line">      spreadsheet.setDisplayGridlines(true);</div><div class="line">     //set print grid lines or not</div><div class="line">     spreadsheet.setPrintGridlines(true);</div><div class="line">     FileOutputStream out = new FileOutputStream(</div><div class="line">     new File(&quot;printarea.xlsx&quot;));</div><div class="line">     workbook.write(out);</div><div class="line">     out.close();</div><div class="line">     System.out.println(&quot;printarea.xlsx written successfully&quot;); </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>借助JDBC，您可以从数据库检索数据，并使用POI库将该数据插入到电子表格中。让我们考虑MySQL数据库的SQL操作。</p>
<h5 id="从数据库写入Excel"><a href="#从数据库写入Excel" class="headerlink" title="从数据库写入Excel"></a>从数据库写入Excel</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.Statement;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFCell;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFRow;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFSheet;</div><div class="line">import org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line">public class ExcelDatabase </div><div class="line">&#123;</div><div class="line">   public static void main(String[] args) throws Exception </div><div class="line">   &#123;</div><div class="line">      Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</div><div class="line">      Connection connect = DriverManager.getConnection( </div><div class="line">      &quot;jdbc:mysql://localhost:3306/test&quot; , </div><div class="line">      &quot;root&quot; , </div><div class="line">      &quot;root&quot;</div><div class="line">      );</div><div class="line">      Statement statement = connect.createStatement();</div><div class="line">      ResultSet resultSet = statement</div><div class="line">      .executeQuery(&quot;select * from emp_tbl&quot;);</div><div class="line">      XSSFWorkbook workbook = new XSSFWorkbook(); </div><div class="line">      XSSFSheet spreadsheet = workbook</div><div class="line">      .createSheet(&quot;employe db&quot;);</div><div class="line">      XSSFRow row=spreadsheet.createRow(1);</div><div class="line">      XSSFCell cell;</div><div class="line">      cell=row.createCell(1);</div><div class="line">      cell.setCellValue(&quot;EMP ID&quot;);</div><div class="line">      cell=row.createCell(2);</div><div class="line">      cell.setCellValue(&quot;EMP NAME&quot;);</div><div class="line">      cell=row.createCell(3);</div><div class="line">      cell.setCellValue(&quot;DEG&quot;);</div><div class="line">      cell=row.createCell(4);</div><div class="line">      cell.setCellValue(&quot;SALARY&quot;);</div><div class="line">      cell=row.createCell(5);</div><div class="line">      cell.setCellValue(&quot;DEPT&quot;);</div><div class="line">      int i=2;</div><div class="line">      while(resultSet.next())</div><div class="line">      &#123;</div><div class="line">         row=spreadsheet.createRow(i);</div><div class="line">         cell=row.createCell(1);</div><div class="line">         cell.setCellValue(resultSet.getInt(&quot;eid&quot;));</div><div class="line">         cell=row.createCell(2);</div><div class="line">         cell.setCellValue(resultSet.getString(&quot;ename&quot;));</div><div class="line">         cell=row.createCell(3);</div><div class="line">         cell.setCellValue(resultSet.getString(&quot;deg&quot;));</div><div class="line">         cell=row.createCell(4);</div><div class="line">         cell.setCellValue(resultSet.getString(&quot;salary&quot;));</div><div class="line">         cell=row.createCell(5);</div><div class="line">         cell.setCellValue(resultSet.getString(&quot;dept&quot;));</div><div class="line">         i++;</div><div class="line">      &#125;</div><div class="line">      FileOutputStream out = new FileOutputStream(</div><div class="line">      new File(&quot;exceldatabase.xlsx&quot;));</div><div class="line">      workbook.write(out);</div><div class="line">      out.close();</div><div class="line">      System.out.println(</div><div class="line">      &quot;exceldatabase.xlsx written successfully&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考<a href="https://www.54yhr.com/apache_poi/index.htm" target="_blank" rel="external">https://www.54yhr.com/apache_poi/index.htm</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Apache-POI&quot;&gt;&lt;a href=&quot;#什么是Apache-POI&quot; class=&quot;headerlink&quot; title=&quot;什么是Apache POI&quot;&gt;&lt;/a&gt;什么是Apache POI&lt;/h3&gt;&lt;p&gt;Apache POI是一种流行的API，允许程序员使
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据结构|图</title>
    <link href="http://yoursite.com/2018/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/01/18/数据结构-图/</id>
    <published>2018-01-18T14:43:37.000Z</published>
    <updated>2018-01-18T09:30:35.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>图这种数据结构，是对现实中人们常说的地图的一种抽象，在数据结构中，图有点和边构成，每两个点之间如果有关系，就用一条边将这两个点连起来，这样就形成了类似于地图的图。图是个好东西啊，可以用于对现实世界中的很多问题进行抽象建模:</p>
<ul>
<li>为计算机之间的互联与通信网络之间的互联建立模型</li>
<li>把一张地图表示为一组位置点，以及位置点之间的关系，求两个点之间的最短路径（这不就是导航吗）</li>
<li>为交通网络的流量状态建模</li>
<li>为一个复杂的活动找到一个可以接受的各个子任务完成的先后顺序，例如大型建筑工程的建设任务分解</li>
<li>为家族、商业或军事组织和自然科学分类中的各种相互关系建模 </li>
</ul>
<p>其实，讲到底，在多对多的关系中，几乎都能用图来表示其关系，最形象的就是人的关系网。我们前面学的线性表是一对一的关系，树是一对多的关系，现在讲的图是多对多的关系。</p>
<h4 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h4><p>我们先来解决第一个问题，怎么表示在计算机中存储图，也就是要怎么表示图。容易想到的是用二位数组，a[i][j],i与j表示两个点，如果a[i][j]为 1 就表示 i , j 之间有关系，否则就没有关系，书上称之为邻接矩阵表示法。还有一种是邻接表表示法，即数组与链表相结合的存储方法。具体是这样的：</p>
<ul>
<li>图中顶点用一个一维数组存储，另外，对于顶点数组中，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。</li>
<li>图中每个顶点vi的所有邻接点构成一个线性表，由于邻接点的个数不定，所以用单链表存储，无向图称为顶点vi的边表，有向图称为顶点vi作为弧尾的出边表。</li>
</ul>
<p><img src="/images/图1.jpg" alt="图的表示" title="图1"></p>
<p><img src="/images/图2.jpg" alt="图的表示" title="图2"></p>
<p>值得一提的是，这两种表示法的各有各的优缺点，一般来说，如果图的边较少的情况下，我们一般选用邻接表，这样开销较小，因为如果用邻接矩阵的话，整个二维数组里就有很多空间没有用到，浪费空间；如果是边较多的时候，也就是我们所说的稠密图，选用邻接矩阵是个好的选择。</p>
<h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><p>确定从一个指定的顶点可以到达其他哪些顶点。这是经常对图执行的操作。我们可能想通过地图了解到从一个城镇到另一个城镇有哪些路，或者从一个机场到其他机场有哪些航班。</p>
<p>图的遍历方法一般有两种：</p>
<ul>
<li>深度遍历</li>
<li>广度遍历</li>
</ul>
<h5 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h5><p>深度优先搜索DFS遍历类似于树的前序遍历。其基本思路是：</p>
<ul>
<li><p>a) 假设初始状态是图中所有顶点都未曾访问过，则可从图G中任意一顶点v为初始出发点，首先访问出发点v，并将其标记为已访问过。</p>
</li>
<li><p>b)然后依次从v出发搜索v的每个邻接点w，若w未曾访问过，则以w作为新的出发点出发，继续进行深度优先遍历，直到图中所有和v有路径相通的顶点都被访问到。</p>
</li>
<li><p>c) 若此时图中仍有顶点未被访问，则另选一个未曾访问的顶点作为起点，重复上述步骤，直到图中所有顶点都被访问到为止。</p>
</li>
</ul>
<p>简单的来说，深度优先搜索包括从一条路径的起始点开始追溯，直到到达最后一个顶点，然后回溯，继续追溯下一条路径，直到到达最后的顶点，如此往复，直到没有路径为止。不好听地说，就是先一条路走到黑，只到无路可走，然后退回上一个顶点，在一直走，重复此操作。</p>
<p><img src="/images/图-深度遍历.jpg" alt="图的深度优先遍历" title="图-深度遍历"></p>
<p>注：红色数字代表遍历的先后顺序，所以图(e)无向图的深度优先遍历的顶点访问序列为：V0，V1，V2，V5，V4，V6，V3，V7，V8</p>
<p>深度优先搜索的算法比较简单： 访问一个没有访问过的顶点，将它标记为已访问，再递归地去访问在起始点的邻接表中其他没有访问过的顶点。</p>
<h4 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h4><p>广度优先搜索遍历BFS类似于树的按层次遍历。其基本思路是：</p>
<ul>
<li>a) 首先访问出发点Vi</li>
<li>b) 接着依次访问Vi的所有未被访问过的邻接点Vi1，Vi2，Vi3，…，Vit并均标记为已访问过。</li>
<li>c) 然后再按照Vi1，Vi2，… ，Vit的次序，访问每一个顶点的所有未曾访问过的顶点并均标记为已访问过，依此类推，直到图中所有和初始出发点Vi有路径相通的顶点都被访问过为止。</li>
</ul>
<p><img src="/images/图-广度遍历.jpg" alt="图的广度优先遍历" title="图-广度遍历"></p>
<p>因此，图(f)采用广义优先搜索遍历以V0为出发点的顶点序列为：V0，V1，V3，V4，V2，V6，V8，V5，V7</p>
<p>简单的来说，广度优先搜索从一个顶点开始，尝试访问尽可能靠近它的顶点。本质上这种搜索在图上是逐层移动的，首先检查最靠近第一个顶点的层，再逐渐向下移动到离起始顶点最远的层。就想警察进山抓贼一样，层层逼近，逐渐缩小包围圈。</p>
<p>要实现广度优先搜索，我们自然会想到用队列来存储我们找到过得顶点，当遍历完一个当前顶点的所关联点后，就从队列中弹出一个新的顶点，访问其还没被访问的关联顶点，直到队列为空。</p>
<h4 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h4><p>在图论中，拓扑排序（Topological Sorting）是一个有向无环图（DAG, Directed Acyclic Graph）的所有顶点的线性序列。<br>该序列必须满足下面两个条件：</p>
<ul>
<li>每个顶点出现且只出现一次</li>
<li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面</li>
</ul>
<p><img src="/images/拓扑排序1.png" alt="enter description here" title="拓扑排序1"></p>
<p>它是一个 DAG 图，那么如何写出它的拓扑排序呢？这里说一种比较常用的方法：</p>
<ul>
<li>从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出。</li>
<li>从图中删除该顶点和所有以它为起点的有向边。</li>
<li>重复 1 和 2 直到当前的 DAG 图为空或当前图中不存在无前驱的顶点为止。后一种情况说明有向图中必然存在环。</li>
</ul>
<p><img src="/images/拓扑排序2.png" alt="拓扑排序" title="拓扑排序2"></p>
<p>于是，得到拓扑排序后的结果是 { 1, 2, 4, 3, 5 }。</p>
<p>值得一提的是，一个有向无环图是可以有一个或多个拓扑排序序列的。</p>
<h6 id="拓扑排序的应用"><a href="#拓扑排序的应用" class="headerlink" title="拓扑排序的应用"></a>拓扑排序的应用</h6><p>拓扑排序通常用来“排序”具有依赖关系的任务。比如学校对我们的课程安排，一些课程是需要学生先去修特定的课程后才能开课的，所以可以用一个有向图来表示这些课程的关系，然后得到该图的拓扑排序排序，就能得到我们的课程先后关系，进而安排大一修什么课，大二修什么课…还有就是一些生产工艺，有些工序之间也是有关系的，也能用图将其建模，得出它的拓扑排序序列，更好地安排生产顺序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h3&gt;&lt;p&gt;图这种数据结构，是对现实中人们常说的地图的一种抽象，在数据结构中，图有点和边构成，每两个点之间如果有关系，就用一条边将这两个点连起来，这样就形成了类
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构|排序算法浅谈</title>
    <link href="http://yoursite.com/2018/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B5%85%E8%B0%88/"/>
    <id>http://yoursite.com/2018/01/18/数据结构-排序算法浅谈/</id>
    <published>2018-01-17T23:13:38.000Z</published>
    <updated>2018-01-18T06:47:35.661Z</updated>
    
    <content type="html"><![CDATA[<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p>经过大一到大二的洗礼，自己对自己专业的认识也越来越深，从最开始认为自己是学软件工程的，然后认为自己是学计算机的，再到现在认为自己是搞互联网的，可能还会有更深的认识。学习，不仅是要学习专业知识，更要知道行业的发展趋势和发展方向，两者缺一不可。这个行业说到底还是对信息进行处理，那么排序就是最重要的处理方式之一。</p>
<p>排序算法有很多种，现在我们主要谈谈常见的几种：</p>
<ul>
<li>插入排序</li>
<li>冒泡排序</li>
<li>选择排序</li>
<li>shell排序</li>
<li>归并排序</li>
<li>快速排序</li>
</ul>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序，就是我们打扑克是所用的伎俩，我们抽到一张牌，然后从手里的牌中寻找合适的位置插入，这个寻找的过程就是插入排序。</p>
<p><img src="/images/插入排序.gif" alt="enter description here" title="插入排序"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">	A[]  待排序列</div><div class="line">	n    元素个数</div><div class="line">*/</div><div class="line">void inssort(int A[],int n)&#123;</div><div class="line">	for(int i=1;i&lt;n;i++)&#123;</div><div class="line">		for(int j=i;j&gt;0;j--)&#123;</div><div class="line">			if(A[j]&lt;A[j-1])&#123;</div><div class="line">				int temp = A[j];</div><div class="line">				A[j] = A[j-1];</div><div class="line">				A[j-1] = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序也挺好理解，就是没每趟比较相邻的两个数，把小的数往后移，每一趟都把待排序列中最小的数往后移，重复n-1此操作就能让待排序列有序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">	A[]  待排序列</div><div class="line">	n    元素个数</div><div class="line">*/</div><div class="line">void bubSort(int A[],int n)&#123;</div><div class="line">	for(int i=1;i&lt;n;i++)&#123;</div><div class="line">		for(int j=0;j&lt;n-i;j++)&#123;</div><div class="line">			if(A[j]&lt;A[j+1])&#123;</div><div class="line">				int temp = A[j];</div><div class="line">				A[j] = A[j+1];</div><div class="line">				A[j+1] = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理如下，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<p><img src="/images/选择排序.gif" alt="enter description here" title="选择排序"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">	A[]  待排序列</div><div class="line">	n    元素个数</div><div class="line">*/</div><div class="line">void choSort(int A[],int n)&#123;</div><div class="line">	for(int i=0;i&lt;n-1;i++)&#123;</div><div class="line">		for(int j=i;j&lt;n;j++)&#123;</div><div class="line">			int index = i;</div><div class="line">			if(A[j]&lt;A[index])&#123;</div><div class="line">				index = j;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		int temp = A[i];</div><div class="line">		A[i] = A[index];</div><div class="line">		A[index] = temp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="一点干货"><a href="#一点干货" class="headerlink" title="一点干货"></a>一点干货</h4><p>上面三种排序方法的时间复杂度都是 n2;通过比较我们可以发现它们都有一个共同的瓶颈：都是只比较相邻的两个数，这是个致命的缺点，只到后来人们找到了分组比较的方法，得以让排序算法的复杂度降低了。接下来，咱们讨论更高级的排序算法。</p>
<h4 id="Shell排序"><a href="#Shell排序" class="headerlink" title="Shell排序"></a>Shell排序</h4><p>Shell排序讲到底还是插入排序，不过它先把待排序列分成了许多组，先分组用插入排序，这样做到目的是先将待排序列变成基本有序，然后在用一次完整的插入排序。我们都知道，如果序列是基本有序的，插入排序的效率还是挺高的。Shell的特点就在于：它的作法不是每次一个元素挨一个元素的比较。而是初期选用大跨步（增量较大）间隔比较，使记录跳跃式接近它的排序位置；然后增量缩小；最后增量为 1 ，这样记录移动次数大大减少，提高了排序效率。</p>
<p>假设有数组 array = [80, 93, 60, 12, 42, 30, 68, 85, 10]，首先取 d1 = 4，将数组分为 4 组，如下图中相同颜色代表一组：<br><img src="/images/shell-sort-step1.1.png" alt="enter description here" title="shell-sort-step1.1"><br>然后分别对 4 个小组进行插入排序，排序后的结果为：<br><img src="/images/shell-sort-step1.2.png" alt="enter description here" title="shell-sort-step1.2"><br>然后，取 d2 = 2，将原数组分为 2 小组，如下图：<br><img src="/images/shell-sort-step2.1.png" alt="enter description here" title="shell-sort-step2.1"><br>然后分别对 2 个小组进行插入排序，排序后的结果为：<br><img src="/images/shell-sort-step2.2.png" alt="enter description here" title="shell-sort-step2.2"><br>最后，取 d3 = 1，进行插入排序后得到最终结果：<br><img src="/images/shell-sort-step3.png" alt="enter description here" title="shell-sort-step3"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">void shell_sort(int a[], int n)&#123;</div><div class="line">    int i,j,gap;</div><div class="line">    //gap为步长，每次减为原来的一半</div><div class="line">    for(gap = n/2;gap&gt;0;gap/=2)&#123;</div><div class="line">        // 共gap个组，对每一组都执行直接插入排序</div><div class="line">        for(i = 0;i&lt;gap;i++)&#123;</div><div class="line">            for(j = i+gap;j&lt;n;j+=gap)&#123;</div><div class="line">                // 如果a[j] &lt; a[j-gap]，则寻找a[j]位置，并将后面数据的位置都后移。</div><div class="line">                if (a[j] &lt; a[j - gap]) </div><div class="line">                &#123;</div><div class="line">                    int tmp = a[j];</div><div class="line">                    int k = j - gap;</div><div class="line">                    while (k &gt;= 0 &amp;&amp; a[k] &gt; tmp)</div><div class="line">                    &#123;</div><div class="line">                        a[k + gap] = a[k];</div><div class="line">                        k -= gap;</div><div class="line">                    &#125;</div><div class="line">                    a[k + gap] = tmp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并操作(Merge)，也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。归并排序有多路归并排序、两路归并排序 , 可用于内排序，也可以用于外排序。这里仅对内排序的两路归并方法进行讨论。</p>
<p>算法思路：</p>
<ul>
<li>把 n 个记录看成 n 个长度为 l 的有序子表</li>
<li>进行两两归并使记录关键字有序，得到 n/2 个长度为 2 的有序子表</li>
<li>重复第 2 步直到所有记录归并成一个长度为 n 的有序表为止。</li>
</ul>
<p>先讲讲归并吧，就是将两个有序个数据合并成一个新的有序数组。看代码吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 将一个数组中的两个相邻有序区间合并成一个</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     a -- 包含两个有序区间的数组</div><div class="line"> *     start -- 第1个有序区间的起始地址。</div><div class="line"> *     mid   -- 第1个有序区间的结束地址。也是第2个有序区间的起始地址。</div><div class="line"> *     end   -- 第2个有序区间的结束地址。</div><div class="line"> */</div><div class="line">void merge(int* a, int start, int mid, int end)</div><div class="line">&#123;</div><div class="line">    int *tmp = new int[end-start+1];    // tmp是汇总2个有序区的临时区域</div><div class="line">    int i = start;            // 第1个有序区的索引</div><div class="line">    int j = mid + 1;        // 第2个有序区的索引</div><div class="line">    int k = 0;                // 临时区域的索引</div><div class="line"></div><div class="line">    while(i &lt;= mid &amp;&amp; j &lt;= end)</div><div class="line">    &#123;</div><div class="line">        if (a[i] &lt;= a[j])</div><div class="line">            tmp[k++] = a[i++];</div><div class="line">        else</div><div class="line">            tmp[k++] = a[j++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    while(i &lt;= mid)</div><div class="line">        tmp[k++] = a[i++];</div><div class="line"></div><div class="line">    while(j &lt;= end)</div><div class="line">        tmp[k++] = a[j++];</div><div class="line"></div><div class="line">    // 将排序后的元素，全部都整合到数组a中。</div><div class="line">    for (i = 0; i &lt; k; i++)</div><div class="line">        a[start + i] = tmp[i];</div><div class="line"></div><div class="line">    delete[] tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是我们的归并排序算法啦，刚刚讲到是用分而治之的办法，那就是要用到递归了，先看代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 归并排序(从上往下)</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     a -- 待排序的数组</div><div class="line"> *     start -- 数组的起始地址</div><div class="line"> *     end -- 数组的结束地址</div><div class="line"> */</div><div class="line"></div><div class="line">void mergeSortUp2Down(int* a, int start, int end)&#123;</div><div class="line">    </div><div class="line">    if(a==NULL || start &gt;= end)</div><div class="line">        return ;</div><div class="line"></div><div class="line">    int mid = (end + start)/2;</div><div class="line">    mergeSortUp2Down(a, start, mid); // 递归排序a[start...mid]</div><div class="line">    mergeSortUp2Down(a, mid+1, end); // 递归排序a[mid+1...end]</div><div class="line"></div><div class="line">    // a[start...mid] 和 a[mid...end]是两个有序空间，</div><div class="line">    // 将它们排序成一个有序空间a[start...end]</div><div class="line">    merge(a, start, mid, end);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/归并排序.gif" alt="归并排序动画演示" title="归并排序"></p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序与归并排序的思想是一致的，都是 采用的分而治之的办法，但这个分的方法不一样，归并算法是相邻的两个分，快速排序是选择一个基准，然后通过比较将小于基准的数放在其左边，大于基准的数放在右边，这个操作叫做分区操作，然后对基准左边和右边的数进行同样的操作。</p>
<p>利用分治法可将快速排序的分为三步：</p>
<ul>
<li>在数据集之中，选择一个元素作为”基准”（pivot）。</li>
<li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。这个操作称为分区 (partition) 操作，分区操作结束后，基准元素所处的位置就是最终排序后它的位置。</li>
<li>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li>
</ul>
<p><img src="/images/快速排序.gif" alt="快速排序" title="快速排序"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 快速排序</div><div class="line"> *</div><div class="line"> * 参数说明：</div><div class="line"> *     a -- 待排序的数组</div><div class="line"> *     l -- 数组的左边界(例如，从起始位置开始排序，则l=0)</div><div class="line"> *     r -- 数组的右边界(例如，排序截至到数组末尾，则r=a.length-1)</div><div class="line"> */</div><div class="line"></div><div class="line">void quickSort(int *a ,int l,int r)&#123; </div><div class="line">    if(l&lt;r)&#123;</div><div class="line">        int i,j,x;</div><div class="line">        i=l;</div><div class="line">        j=r;</div><div class="line">        x = a[i];</div><div class="line">        while(i&lt;j)&#123;</div><div class="line">            while(i&lt;j &amp;&amp; a[j]&gt;x)&#123;</div><div class="line">                j--; // 从右向左找第一个小于x的数</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if(i&lt;j)&#123;</div><div class="line">                a[i] = a[j];</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            while(i&lt;j &amp;&amp; a[i]&lt;x)&#123;</div><div class="line">                i++;   // 从左向右找第一个大于x的数</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if(i&lt;j)&#123;</div><div class="line">                a[j] = a[i];</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        a[i] = x;</div><div class="line">        quickSort(a,l,i-1);</div><div class="line">        quickSort(a,i+1,r);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h3&gt;&lt;p&gt;经过大一到大二的洗礼，自己对自己专业的认识也越来越深，从最开始认为自己是学软件工程的，然后认为自己是学计算机的，再到现在认为
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>VHDL与数字逻辑的一些坑</title>
    <link href="http://yoursite.com/2018/01/09/VHDL%E4%B8%8E%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://yoursite.com/2018/01/09/VHDL与数字逻辑的一些坑/</id>
    <published>2018-01-08T23:24:03.000Z</published>
    <updated>2018-01-08T15:45:23.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于VHDL"><a href="#关于VHDL" class="headerlink" title="关于VHDL"></a>关于VHDL</h3><p>来了大二，学习数字逻辑电路后才知道VHDL的，用来写数字逻辑的实验。刚开始接触的时候，也并不知道它是用来干什么的，经过一个学期的琢磨，才搞清楚它是用来干嘛的。简单点说，就是用来描述电路的，就像我们常说的芯片，它都有自己的功能，这些功能的实现都是内部封装好了的，只留下一些外部接口给我们，VHDL这门语言呢，就是用来描述这些芯片的内部功能的。用代码设计电路，想不到吧。更不可思议的是，IDE工具还能根据写的代码，帮我们把电路实现。</p>
<h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p>VHDL跟我们所学习的C语言这些差不多，也有if、else这些逻辑语句，但毕竟是描述电路的，还是有一些区别的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于VHDL&quot;&gt;&lt;a href=&quot;#关于VHDL&quot; class=&quot;headerlink&quot; title=&quot;关于VHDL&quot;&gt;&lt;/a&gt;关于VHDL&lt;/h3&gt;&lt;p&gt;来了大二，学习数字逻辑电路后才知道VHDL的，用来写数字逻辑的实验。刚开始接触的时候，也并不知道它是用来干什
    
    </summary>
    
      <category term="VHDL" scheme="http://yoursite.com/categories/VHDL/"/>
    
    
      <category term="VHDL" scheme="http://yoursite.com/tags/VHDL/"/>
    
  </entry>
  
  <entry>
    <title>Java|Hibernate入门</title>
    <link href="http://yoursite.com/2017/12/24/Java-Hibernate%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/12/24/Java-Hibernate入门/</id>
    <published>2017-12-24T09:39:28.000Z</published>
    <updated>2017-12-24T01:54:11.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hibernate简介"><a href="#Hibernate简介" class="headerlink" title="Hibernate简介"></a>Hibernate简介</h3><h4 id="为什么要有Hiernate"><a href="#为什么要有Hiernate" class="headerlink" title="为什么要有Hiernate"></a>为什么要有Hiernate</h4><p>我们都知道，现在主流的编程语言大多是面向对象的，如Java、C++，但是现在的主流数据库产品又是关系型的数据，在面向对象的世界里，对关系型数据库的访问与操作都是相当麻烦的。这时候ORM（Object/Relation Mapping,对象/关系数据库映射)出现了，可以说它是一种规范，完成了面向对象编程语言到关系数据库的映射。</p>
<p><img src="./images/ORM.gif" alt="ORM工具作用示意图" title="ORM"></p>
<p>Hibernate是ORM框架的一种，也是目前最流行的ORM框架。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hibernate简介&quot;&gt;&lt;a href=&quot;#Hibernate简介&quot; class=&quot;headerlink&quot; title=&quot;Hibernate简介&quot;&gt;&lt;/a&gt;Hibernate简介&lt;/h3&gt;&lt;h4 id=&quot;为什么要有Hiernate&quot;&gt;&lt;a href=&quot;#为什么要
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PHP||文件操作</title>
    <link href="http://yoursite.com/2017/12/16/PHP-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/12/16/PHP-文件操作/</id>
    <published>2017-12-16T08:29:56.000Z</published>
    <updated>2017-12-16T17:18:58.161Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP文件操作"><a href="#PHP文件操作" class="headerlink" title="PHP文件操作"></a>PHP文件操作</h3><p>今天来记录一下PHP的文件操作，由于之前没怎么用过，导致需要用的时候也是需要查看文档，不如就记录下来，不然下次还需要查看文档。</p>
<p>当然，文件的操作，还是一样的步骤：</p>
<ul>
<li>打开文件</li>
<li>获取数据流</li>
<li>进行操作</li>
<li>关闭文件</li>
</ul>
<h4 id="文件创建-打开"><a href="#文件创建-打开" class="headerlink" title="文件创建/打开"></a>文件创建/打开</h4><p>PHP Open File - fopen() </p>
<p>打开文件的更好的方法是通过 fopen() 函数。此函数为您提供比 readfile() 函数更多的选项。open() 的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。如果 fopen() 函数未能打开指定的文件，下面的例子会生成一段消息：</p>
<p>webdictionary.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AJAX = Asynchronous JavaScript and XML</div><div class="line">CSS = Cascading Style Sheets</div><div class="line">HTML = Hyper Text Markup Language</div><div class="line">PHP = PHP Hypertext Preprocessor</div><div class="line">SQL = Structured Query Language</div><div class="line">SVG = Scalable Vector Graphics</div><div class="line">XML = EXtensible Markup Language</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$myfile = fopen(&quot;webdictionary.txt&quot;, &quot;r&quot;) or die(&quot;Unable to open file!&quot;);</div><div class="line">echo fread($myfile,filesize(&quot;webdictionary.txt&quot;));</div><div class="line">fclose($myfile);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AJAX = Asynchronous JavaScript and XML CSS = Cascading Style Sheets HTML = Hyper Text Markup Language PHP = PHP Hypertext Preprocessor SQL = Structured Query Language SVG = Scalable Vector Graphics XML = EXtensible Markup Language</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>打开文件为只读。文件指针在文件的开头开始。</td>
<td></td>
</tr>
<tr>
<td>w</td>
<td>打开文件为只写。删除文件的内容或创建一个新的文件，如果它不存在。文件指针在文件的开头开始。</td>
<td></td>
</tr>
<tr>
<td>a</td>
<td>打开文件为只写。文件中的现有数据会被保留。文件指针在文件结尾开始。创建新的文件，如果文件不存在。</td>
<td></td>
</tr>
<tr>
<td>x</td>
<td>创建新文件为只写。返回 FALSE 和错误，如果文件已存在。</td>
<td></td>
</tr>
<tr>
<td>r+</td>
<td>打开文件为读/写、文件指针在文件开头开始。</td>
<td></td>
</tr>
<tr>
<td>w+</td>
<td>打开文件为读/写。删除文件内容或创建新文件，如果它不存在。文件指针在文件开头开始。</td>
<td></td>
</tr>
<tr>
<td>a+</td>
<td>打开文件为读/写。文件中已有的数据会被保留。文件指针在文件结尾开始。创建新文件，如果它不存在。</td>
<td></td>
</tr>
<tr>
<td>x+</td>
<td>创建新文件为读/写。返回 FALSE 和错误，如果文件已存在。</td>
</tr>
</tbody>
</table>
<h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><ul>
<li>fwrite：向文件写入内容，可安全用于二进制文件 。</li>
<li>file_put_contents：向文件写入内容，等同依次调用 fopen，fwrite 以及 fclose 函数。</li>
</ul>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><ul>
<li>fread：读取文件，可安全用于二进制文件。</li>
<li>fgets：从文件中读取 一行 数据，并将文件指针指向下一行。</li>
<li>feof:函数是用来检测文件是否结束的。该函数唯一参数就是文件指针（即$fp对应打开的文件）</li>
<li>fgetc：从文件中 逐字 读取文件数据，直到文件结束。</li>
<li>file_get_contents：把 整个文件 读入一个字符串。</li>
<li>file：把 整个文件 读入一个数组中，数组中的每个单元都是文件中相应的一行。</li>
</ul>
<h3 id="检查文件是否存在"><a href="#检查文件是否存在" class="headerlink" title="检查文件是否存在"></a>检查文件是否存在</h3><ul>
<li>file_exists：检查文件或目录是否存在。</li>
</ul>
<h4 id="检查文件是否可读写执行"><a href="#检查文件是否可读写执行" class="headerlink" title="检查文件是否可读写执行"></a>检查文件是否可读写执行</h4><ul>
<li>is_readable：检查文件是否可读。</li>
<li>is_writable：检查文件是否是否可写入。</li>
<li>is_executable：检查文件是否可执行。</li>
</ul>
<h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><p>copy：拷贝文件。</p>
<h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>unlink：删除文件。</p>
<h3 id="取得文件大小、类型、修改时间信息"><a href="#取得文件大小、类型、修改时间信息" class="headerlink" title="取得文件大小、类型、修改时间信息"></a>取得文件大小、类型、修改时间信息</h3><ul>
<li>filesize：取得文件大小。</li>
<li>filetype：取得文件类型。</li>
<li>filemtime：取得文件修改时间。</li>
</ul>
<h3 id="文件指针函数"><a href="#文件指针函数" class="headerlink" title="文件指针函数"></a>文件指针函数</h3><ul>
<li>fclose：关闭文件指针。</li>
<li>feof：测试文件指针是否到了文件结束的位置。</li>
<li>fseek：在文件指针中定位。</li>
<li>rewind：倒回文件指针的位置。</li>
<li>ftell：返回文件指针读/写的位置</li>
</ul>
<h3 id="测试Demo"><a href="#测试Demo" class="headerlink" title="测试Demo"></a>测试Demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">const FILE_NAME = &quot;file_info.dat&quot;;</div><div class="line"></div><div class="line">class file_info</div><div class="line">&#123;</div><div class="line">    public $file_name;</div><div class="line">    public $self_count;</div><div class="line">    public $total_count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//判断文件是否存在</div><div class="line">if (file_exists(FILE_NAME))</div><div class="line">&#123;</div><div class="line">  echo &quot;file existed.\n&quot;;</div><div class="line">  unlink(FILE_NAME);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$fd = NULL;</div><div class="line"></div><div class="line">$fd = fopen(FILE_NAME, &quot;wb&quot;);</div><div class="line"></div><div class="line">if ($fd == NULL || $fd == false)</div><div class="line">&#123;</div><div class="line">  echo &quot;Failed to open file.\n&quot;; </div><div class="line">  return;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj = new file_info();</div><div class="line"></div><div class="line">if ($obj == NULL)</div><div class="line">&#123;</div><div class="line">   echo &quot;Failed to create object.\n&quot;;</div><div class="line">   return;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for($i=0; $i&lt;3; $i++)</div><div class="line">&#123;</div><div class="line">   $temp_1 = $i * 10;</div><div class="line">   $temp_2 = $i * 100;</div><div class="line">   /*</div><div class="line">   $obj-&gt;file_name = &quot;file_&quot;.$i.&quot;\n&quot;;</div><div class="line">   $obj-&gt;self_count = $temp_1.&quot;\n&quot;;</div><div class="line">   $obj-&gt;total_count = $temp_2.&quot;\n&quot;;</div><div class="line">   */</div><div class="line">   //构造字符串。filename-0-0\n</div><div class="line">   $row = &quot;file_&quot;.$i.&quot;-&quot;.$temp_1.&quot;-&quot;.$temp_2.&quot;\n&quot;;</div><div class="line">   echo &quot;row: &quot;.$row;</div><div class="line">   fwrite($fd, $row);</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ($fd)</div><div class="line">  fclose($fd); </div><div class="line"></div><div class="line">$fd = fopen(FILE_NAME, &quot;rb&quot;);</div><div class="line">if ($fd == false)</div><div class="line">&#123;</div><div class="line">   echo &quot;Failed to open read file.\n&quot;;</div><div class="line">   return;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj_params =  array();</div><div class="line"></div><div class="line">$i = 0;</div><div class="line"></div><div class="line">while (!feof($fd))</div><div class="line">&#123;</div><div class="line">    $tmp_obj = new file_info();</div><div class="line">    $tmp_row = fgets($fd);</div><div class="line">    if ($tmp_row == NULL)</div><div class="line">    break;</div><div class="line">    $pos_1 = strpos($tmp_row, &apos;-&apos;,0);</div><div class="line">    $pos_2 = strpos($tmp_row,&apos;-&apos;,$pos_1 + 1);</div><div class="line">    $tmp_obj-&gt;file_name = substr($tmp_row, 0, $pos_1);</div><div class="line">    $tmp_obj-&gt;self_count = substr($tmp_row, $pos_1 + 1, $pos_2- $pos_1 - 1);</div><div class="line">    $tmp_obj-&gt;total_count = substr($tmp_row, $pos_2 + 1, strlen($tmp_row) - $pos_2 - 2);</div><div class="line">    $obj_params[$i] = $tmp_obj;</div><div class="line">    $i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for ($k = 0; $k &lt; count($obj_params); $k++)</div><div class="line">&#123;</div><div class="line">   echo $obj_params[$k]-&gt;file_name.&quot;\n&quot;;</div><div class="line">   echo $obj_params[$k]-&gt;self_count.&quot;\n&quot;;</div><div class="line">   echo $obj_params[$k]-&gt;total_count.&quot;\n&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ($fd)</div><div class="line">   fclose($fd);</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>参考<a href="http://www.cnblogs.com/Anker/p/3387180.html" target="_blank" rel="external">http://www.cnblogs.com/Anker/p/3387180.html</a></p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PHP文件操作&quot;&gt;&lt;a href=&quot;#PHP文件操作&quot; class=&quot;headerlink&quot; title=&quot;PHP文件操作&quot;&gt;&lt;/a&gt;PHP文件操作&lt;/h3&gt;&lt;p&gt;今天来记录一下PHP的文件操作，由于之前没怎么用过，导致需要用的时候也是需要查看文档，不如就记录下来
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
</feed>
